<template>
  <div class="reservation-detail">
    <div v-if="loading" class="loading-container">
      <el-skeleton :rows="10" animated />
    </div>

    <div v-else-if="!reservation" class="error-container">
      <el-result
        icon="error"
        :title="$t('error.errorMessage')"
        :sub-title="$t('reservation.reservationNotFound')"
      >
        <template #extra>
          <el-button type="primary" @click="$router.push('/reservation/query')">
            {{ $t('reservation.query') }}
          </el-button>
        </template>
      </el-result>
    </div>

    <div v-else>
      <!-- 返回按钮 -->
      <div class="back-link">
        <el-button icon="el-icon-arrow-left" @click="goBack">
          {{ $t('common.back') }}
        </el-button>
      </div>

      <h1 class="page-title">{{ $t('reservation.detail') }}</h1>

      <!-- 预定状态 -->
      <div class="reservation-status-card" :class="getStatusClass(reservation.status)">
        <div class="status-icon">
          <i :class="getStatusIcon(reservation.status)"></i>
        </div>
        <div class="status-text">
          <h2>{{ getStatusText(reservation.status) }}</h2>
          <p>{{ $t('reservation.code') }}: {{ reservation.reservation_code }}</p>
        </div>
      </div>

      <!-- 预定详情 -->
      <el-card shadow="never" class="detail-card">
        <div slot="header">
          <span>{{ $t('reservation.detail') }}</span>
        </div>

        <el-descriptions :column="1" border>
          <el-descriptions-item :label="$t('reservation.equipmentName')">
            {{ reservation.equipment_name }}
          </el-descriptions-item>

          <el-descriptions-item :label="$t('equipment.category')" v-if="reservation.equipment_category">
            {{ reservation.equipment_category }}
          </el-descriptions-item>

          <el-descriptions-item :label="$t('equipment.location')" v-if="reservation.equipment_location">
            {{ reservation.equipment_location }}
          </el-descriptions-item>

          <el-descriptions-item :label="$t('reservation.startTime')">
            {{ formatDateTime(reservation.start_datetime) }}
          </el-descriptions-item>

          <el-descriptions-item :label="$t('reservation.endTime')">
            {{ formatDateTime(reservation.end_datetime) }}
          </el-descriptions-item>

          <el-descriptions-item :label="$t('reservation.purpose')" v-if="reservation.purpose">
            {{ reservation.purpose }}
          </el-descriptions-item>
        </el-descriptions>
      </el-card>

      <!-- 用户信息 -->
      <el-card shadow="never" class="user-card">
        <div slot="header">
          <span>{{ $t('common.userInfo') }}</span>
        </div>

        <el-descriptions :column="1" border>
          <el-descriptions-item :label="$t('reservation.userName')">
            {{ reservation.user_name }}
          </el-descriptions-item>

          <el-descriptions-item :label="$t('reservation.userDepartment')">
            {{ reservation.user_department }}
          </el-descriptions-item>

          <el-descriptions-item :label="$t('reservation.userContact')">
            {{ reservation.user_contact }}
          </el-descriptions-item>

          <el-descriptions-item :label="$t('reservation.userEmail')" v-if="reservation.user_email">
            {{ reservation.user_email }}
          </el-descriptions-item>
        </el-descriptions>
      </el-card>

          <p>{{ $t('reservation.scanQrcode') }}</p>
        </div>
      </el-card>

      <!-- 操作按钮 -->
      <div class="action-buttons">
        <!-- 已确认且未开始的预约才显示取消按钮 -->
        <el-button
          v-if="reservation.status === 'confirmed' && !isReservationInProgress(reservation)"
          type="danger"
          @click="showCancelDialog"
        >
          {{ $t('reservation.cancelReservation') }}
        </el-button>

        <!-- 只有使用中状态才显示提前归还按钮 -->
        <el-button
          v-if="reservation.status === 'in_use'"
          type="primary"
          @click="showReturnDialog"
        >
          {{ $t('reservation.earlyReturn') }}
        </el-button>

        <!-- 如果是循环预约的一部分，显示查看循环预约按钮 -->
        <el-button
          v-if="isRecurringReservation && recurringReservationId"
          type="primary"
          @click="viewRecurringReservation"
        >
          {{ $t('reservation.viewRecurringReservation') }}
        </el-button>
      </div>

      <!-- 取消预定对话框 -->
      <el-dialog
        :title="$t('reservation.cancelReservation')"
        :visible.sync="cancelDialogVisible"
        width="500px"
      >
        <div class="cancel-content">
          <p>{{ $t('reservation.confirmCancel') }}</p>

          <el-form ref="cancelForm" :model="cancelForm" label-position="top">
            <el-form-item :label="$t('reservation.cancelReason')">
              <el-input
                v-model="cancelForm.reason"
                type="textarea"
                :rows="3"
              ></el-input>
            </el-form-item>
          </el-form>
        </div>

        <span slot="footer" class="dialog-footer">
          <el-button @click="cancelDialogVisible = false">{{ $t('common.cancel') }}</el-button>
          <el-button type="danger" :loading="cancelling" @click="cancelReservation">{{ $t('common.confirm') }}</el-button>
        </span>
      </el-dialog>

      <!-- 提前归还对话框 -->
      <el-dialog
        :title="$t('reservation.earlyReturn')"
        :visible.sync="returnDialogVisible"
        width="500px"
      >
        <div class="return-content">
          <p>{{ $t('reservation.confirmEarlyReturn') }}</p>

          <el-form ref="returnForm" :model="returnForm" label-position="top">
            <el-form-item :label="$t('reservation.returnReason')">
              <el-input
                v-model="returnForm.reason"
                type="textarea"
                :rows="3"
              ></el-input>
            </el-form-item>
          </el-form>
        </div>

        <span slot="footer" class="dialog-footer">
          <el-button @click="returnDialogVisible = false">{{ $t('common.cancel') }}</el-button>
          <el-button type="primary" :loading="returning" @click="returnEquipment">{{ $t('common.confirm') }}</el-button>
        </span>
      </el-dialog>
    </div>
  </div>
</template>

<script>
import { reservationApi, recurringReservationApi } from '@/api'
import { isReservationExpired } from '@/utils/date'

export default {
  name: 'ReservationDetail',

  data() {
    return {
      loading: false,
      cancelling: false,
      returning: false,
      reservation: null,
      isRecurringReservation: false,
      recurringReservationId: null,
      childReservationStartTime: null,
      childReservationEndTime: null,
      cancelDialogVisible: false,
      returnDialogVisible: false,
      cancelForm: {
        reason: ''
      },
      returnForm: {
        reason: ''
      }
    }
  },

  created() {
    this.fetchReservation()
  },

  methods: {
    async fetchReservation() {
      this.loading = true
      try {
        // 检查是否是通过预约序号查询
        let reservationNumber = this.$route.params.number
        const reservationCode = this.$route.params.code

        // 如果URL中没有预约序号，尝试从localStorage中获取
        if (!reservationNumber) {
          const savedReservationNumber = localStorage.getItem('current_reservation_number')
          if (savedReservationNumber) {
            console.log('从localStorage中获取预约序号:', savedReservationNumber)
            reservationNumber = savedReservationNumber
            // 使用后清除，避免影响后续操作
            localStorage.removeItem('current_reservation_number')
          }
        }

        // 检查是否是子预约查询请求
        const isChildReservation = this.$route.query.child === 'true'
        const childReservationId = this.$route.query.id
        const recurringId = this.$route.query.recurringId
        const startTime = this.$route.query.startTime
        const endTime = this.$route.query.endTime

        // 如果是子预约查询，保存循环预约ID
        if (isChildReservation && recurringId) {
          this.recurringReservationId = recurringId
          console.log('Child reservation query detected, saving recurring ID:', recurringId)
        }

        // 如果是通过预约序号查询
        if (reservationNumber) {
          console.log('通过预约序号查询预约:', reservationNumber)

          // 直接通过预约序号查询
          const response = await reservationApi.getReservationByNumber(reservationNumber)

          if (response.data.success) {
            this.reservation = response.data.data
            console.log('通过预约序号找到预约:', this.reservation)

            // 显示预约序号信息
            this.$notify({
              title: '预约详情',
              message: `当前查看的是预约序号: ${this.reservation.reservation_number}`,
              type: 'info',
              duration: 5000
            })

            // 如果是子预约查询，并且有开始和结束时间，则使用URL中的时间覆盖API返回的时间
            if (this.childReservationStartTime && this.childReservationEndTime) {
              console.log('Overriding reservation times with child reservation times')
              this.reservation.start_datetime = this.childReservationStartTime
              this.reservation.end_datetime = this.childReservationEndTime
            }

            // 检查是否是循环预约的子预约
            if (this.reservation.recurring_reservation_id) {
              this.isRecurringReservation = true
              this.recurringReservationId = this.reservation.recurring_reservation_id

              // 添加提示，告知用户这是循环预约的一部分
              this.$notify({
                title: this.$t('reservation.recurringReservationNotice'),
                message: this.$t('reservation.partOfRecurringReservation'),
                type: 'info',
                duration: 8000
              })

              console.log('This is part of a recurring reservation:', this.recurringReservationId)
            }
          } else {
            this.reservation = null
            this.$message.error(response.data.message || this.$t('reservation.notFound'))
          }

          this.loading = false
          return
        }

        // 如果不是通过预约序号查询，则继续原来的逻辑
        // 如果不是子预约查询，则先尝试查询循环预约
        if (!isChildReservation) {
          try {
            const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(reservationCode)

            if (recurringResponse.data.success) {
              // 如果是循环预约，重定向到循环预约详情页
              console.log('Found recurring reservation, redirecting to recurring reservation detail page')
              // 使用window.location直接跳转，避免路由守卫问题
              window.location.href = `#/recurring-reservation/${recurringResponse.data.data.id}`
              return
            }
          } catch (recurringError) {
            console.log('Not a recurring reservation, continuing with normal reservation lookup')
            // 不是循环预约，继续查询普通预约
          }
        } else {
          console.log('Child reservation query detected, skipping recurring reservation check')

          // 如果有子预约ID和开始/结束时间，尝试通过ID获取子预约详情
          if (childReservationId && startTime && endTime) {
            try {
              // 由于后端没有直接通过ID获取预约的API，我们仍然使用预约码查询，但会在前端处理
              console.log('Fetching child reservation with ID:', childReservationId)
              console.log('Child reservation time:', startTime, 'to', endTime)

              // 保存子预约的开始和结束时间，用于后续处理
              this.childReservationStartTime = startTime
              this.childReservationEndTime = endTime
            }
            catch (error) {
              console.error('Failed to fetch child reservation by ID:', error)
            }
          }
        }

        // 查询普通预约
        // 检查URL中是否包含预约序号参数
        const queryReservationNumber = this.$route.query.reservation_number

        // 确保reservationNumber是字符串，并且不是一个对象
        let reservationNumberStr = null
        if (queryReservationNumber) {
          if (typeof queryReservationNumber === 'object') {
            console.warn('预约序号参数是对象类型，将被忽略:', queryReservationNumber)
          } else {
            reservationNumberStr = String(queryReservationNumber)
          }
        }

        console.log('获取预约详情:', {
          reservationCode,
          reservationNumber: reservationNumberStr || '未提供',
          reservationNumberType: queryReservationNumber ? typeof queryReservationNumber : 'null',
          routeQuery: this.$route.query
        })

        // 如果URL中包含预约序号参数，则传递给API
        const response = await reservationApi.getReservationByCode(
          reservationCode,
          reservationNumberStr
        )

        if (response.data.success) {
          this.reservation = response.data.data

          // 如果是子预约查询，并且有开始和结束时间，则使用URL中的时间覆盖API返回的时间
          if (this.childReservationStartTime && this.childReservationEndTime) {
            console.log('Overriding reservation times with child reservation times')
            this.reservation.start_datetime = this.childReservationStartTime
            this.reservation.end_datetime = this.childReservationEndTime
          }

          // 检查是否是循环预约的子预约
          if (this.reservation.recurring_reservation_id) {
            this.isRecurringReservation = true
            this.recurringReservationId = this.reservation.recurring_reservation_id

            // 添加提示，告知用户这是循环预约的一部分
            this.$notify({
              title: this.$t('reservation.recurringReservationNotice'),
              message: this.$t('reservation.partOfRecurringReservation'),
              type: 'info',
              duration: 8000
            })

            console.log('This is part of a recurring reservation:', this.recurringReservationId)
          }
        } else {
          this.reservation = null
          this.$message.error(response.data.message || this.$t('reservation.notFound'))
        }
      } catch (error) {
        console.error('Failed to fetch reservation:', error)
        this.$message.error(this.$t('common.error'))
        this.reservation = null
      } finally {
        this.loading = false
      }
    },

    showCancelDialog() {
      this.cancelDialogVisible = true
    },

    async cancelReservation() {
      this.cancelling = true
      try {
        const reservationCode = this.reservation.reservation_code

        // 打印预约详情，帮助调试
        console.log('预约详情:', this.reservation)
        console.log('预约序号:', this.reservation.reservation_number)
        console.log('预约码:', reservationCode)

        const data = {
          reason: this.cancelForm.reason,
          user_email: this.reservation.user_email,
          lang: this.$i18n.locale
        }

        // 添加预约序号参数，确保只取消特定的子预约
        if (this.reservation.reservation_number) {
          // 确保reservation_number是字符串
          data.reservation_number = String(this.reservation.reservation_number)
          console.log('预约序号参数存在:', data.reservation_number)
          console.log('预约序号类型:', typeof data.reservation_number)
        } else {
          console.warn('预约序号参数不存在，将取消所有具有相同预约码的预约')
        }

        // 打印请求参数
        console.log('取消预约请求参数:', data)

        const response = await reservationApi.cancelReservation(reservationCode, data)

        if (response.data.success) {
          this.$message.success(this.$t('reservation.cancelSuccess'))
          this.cancelDialogVisible = false

          // 立即更新当前页面的状态显示
          this.reservation.status = 'cancelled'

          // 保存状态变更到localStorage，以便其他页面可以检测到状态变化
          this.saveReservationStatus('cancelled')

          console.log('预约已取消，状态已更新为:', this.reservation.status)

          // 设置一个延迟，让用户看到状态变化后再跳转
          setTimeout(() => {
            // 检查是否是从循环预约详情页面跳转过来的
            const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId

            if (isFromRecurring) {
              // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面
              this.$router.push({
                path: `/recurring-reservation/${this.recurringReservationId}`,
                query: {
                  fromChild: 'true',
                  reservation_number: this.reservation.reservation_number
                }
              })
            } else {
              // 否则返回到预约管理页面
              this.$router.push('/reservation/manage')
            }
          }, 1500) // 增加延迟时间，让用户有更多时间看到状态变化
        } else {
          this.$message.error(response.data.message || this.$t('common.error'))
        }
      } catch (error) {
        console.error('Failed to cancel reservation:', error)
        this.$message.error(this.$t('common.error'))
      } finally {
        this.cancelling = false
      }
    },

    // 保存预约状态到localStorage
    saveReservationStatus(status) {
      if (!this.reservation) return

      // 使用预约码作为键
      const stateKey = `reservation_status_${this.reservation.reservation_code}`

      // 保存状态信息
      const state = {
        statusText: this.getStatusText(status),
        statusType: this.getStatusClass(status),
        dbStatus: status,
        forcedStatus: status,
        timestamp: new Date().getTime(),
        permanent: true,
        reservationCode: this.reservation.reservation_code
      }

      console.log('保存预约状态到localStorage:', state)
      localStorage.setItem(stateKey, JSON.stringify(state))

      // 如果是循环预约的子预约，还需要保存循环预约ID
      if (this.isRecurringReservation && this.recurringReservationId) {
        // 使用循环预约ID和预约码的组合作为键
        const recurringStateKey = `recurring_reservation_${this.recurringReservationId}_child_status_changed`

        // 保存状态变更信息
        const recurringState = {
          reservationCode: this.reservation.reservation_code,
          status: status,
          timestamp: new Date().getTime()
        }

        console.log('保存循环预约子预约状态变更到localStorage:', recurringState)
        localStorage.setItem(recurringStateKey, JSON.stringify(recurringState))
      }
    },

    formatDateTime(dateTime) {
      if (!dateTime) return ''

      const date = new Date(dateTime)
      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`
    },

    // 判断预约是否正在进行中
    isReservationInProgress(reservation) {
      if (!reservation) return false

      const now = new Date()
      const start = new Date(reservation.start_datetime)
      const end = new Date(reservation.end_datetime)

      // 当前时间在开始时间和结束时间之间
      return now >= start && now <= end
    },

    // 显示提前归还对话框
    showReturnDialog() {
      this.returnDialogVisible = true
    },

    // 提前归还设备
    async returnEquipment() {
      this.returning = true
      try {
        const reservationCode = this.reservation.reservation_code

        // 打印预约详情，帮助调试
        console.log('提前归还 - 预约详情:', this.reservation)
        console.log('提前归还 - 预约序号:', this.reservation.reservation_number)
        console.log('提前归还 - 预约码:', reservationCode)

        const data = {
          reason: this.returnForm.reason,
          user_email: this.reservation.user_email,
          lang: this.$i18n.locale,
          early_return: true
        }

        // 添加预约序号参数，确保只取消特定的子预约
        if (this.reservation.reservation_number) {
          // 确保reservation_number是字符串
          data.reservation_number = String(this.reservation.reservation_number)
          console.log('提前归还 - 预约序号参数存在:', data.reservation_number)
          console.log('提前归还 - 预约序号类型:', typeof data.reservation_number)
        } else {
          console.warn('提前归还 - 预约序号参数不存在，将取消所有具有相同预约码的预约')
        }

        // 打印请求参数
        console.log('提前归还 - 请求参数:', data)

        const response = await reservationApi.cancelReservation(reservationCode, data)

        if (response.data.success) {
          this.$message.success(this.$t('reservation.returnSuccess'))
          this.returnDialogVisible = false

          // 立即更新当前页面的状态显示
          this.reservation.status = 'cancelled'

          // 保存状态变更到localStorage，以便其他页面可以检测到状态变化
          this.saveReservationStatus('cancelled')

          console.log('预约已提前归还，状态已更新为:', this.reservation.status)

          // 设置一个延迟，让用户看到状态变化后再跳转
          setTimeout(() => {
            // 检查是否是从循环预约详情页面跳转过来的
            const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId

            if (isFromRecurring) {
              // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面
              this.$router.push({
                path: `/recurring-reservation/${this.recurringReservationId}`,
                query: {
                  fromChild: 'true',
                  reservation_number: this.reservation.reservation_number
                }
              })
            } else {
              // 否则返回到预约管理页面
              this.$router.push('/reservation/manage')
            }
          }, 1500) // 增加延迟时间，让用户有更多时间看到状态变化
        } else {
          this.$message.error(response.data.message || this.$t('common.error'))
        }
      } catch (error) {
        console.error('Failed to return equipment:', error)
        this.$message.error(this.$t('common.error'))
      } finally {
        this.returning = false
      }
    },

    // 返回上一页或跳转到指定页面
    goBack() {
      // 检查是否是从循环预约详情页面跳转过来的
      const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId

      if (isFromRecurring) {
        // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面
        // 添加fromChild参数，标记是从子预约详情页面返回的
        this.$router.push({
          path: `/recurring-reservation/${this.recurringReservationId}`,
          query: {
            fromChild: 'true',
            reservation_number: this.reservation.reservation_number
          }
        })
      } else {
        // 否则返回到预约查询页面
        this.$router.push('/reservation/query')
      }
    },

    // 查看循环预约
    viewRecurringReservation() {
      if (this.recurringReservationId) {
        // 将当前预约序号作为查询参数传递，以便在循环预约详情页面中高亮显示当前预约
        this.$router.push({
          path: `/recurring-reservation/${this.recurringReservationId}`,
          query: {
            reservation_number: this.reservation.reservation_number,
            from_detail: 'true'
          }
        })
      } else {
        this.$message.warning('无法查看循环预约详情，缺少循环预约ID')
      }
    },

    getStatusClass(status) {
      const s = (status || '').toLowerCase()
      switch (s) {
        case 'confirmed': return 'confirmed';
        case 'cancelled': return 'cancelled';
        case 'pending': return 'pending';
        case 'expired': return 'expired';
        case 'in_use': return 'in-use';
        default: return 'unknown';
      }
    },

    getStatusIcon(status) {
      const s = (status || '').toLowerCase()
      switch (s) {
        case 'confirmed': return 'el-icon-success';
        case 'cancelled': return 'el-icon-close';
        case 'pending': return 'el-icon-time';
        case 'expired': return 'el-icon-warning';
        case 'in_use': return 'el-icon-refresh';
        default: return 'el-icon-question';
      }
    },

    getStatusText(status) {
      const s = (status || '').toLowerCase()
      switch (s) {
        case 'confirmed': return this.$t('reservation.confirmed');
        case 'cancelled': return this.$t('reservation.cancelled');
        case 'pending': return this.$t('reservation.pending');
        case 'expired': return this.$t('reservation.expired');
        case 'in_use': return this.$t('reservation.inUse');
        default: return status;
      }
    },
  }
}
</script>

<style scoped>
.reservation-detail {
  max-width: 800px;
  margin: 0 auto;
}

.back-link {
  margin-bottom: 20px;
}

.page-title {
  margin-bottom: 20px;
  font-size: 24px;
  color: #303133;
}

.reservation-status-card {
  display: flex;
  align-items: center;
  padding: 20px;
  background-color: #f0f9eb;
  border-radius: 4px;
  margin-bottom: 20px;
}

.reservation-status-card.cancelled {
  background-color: #fef0f0;
}

.reservation-status-card.expired {
  background-color: #fdf6ec;
}

.reservation-status-card.in-use {
  background-color: #ecf5ff;
}

.reservation-status-card.in-use .status-icon,
.reservation-status-card.in-use .status-text h2 {
  color: #409EFF;
}

.status-icon {
  font-size: 48px;
  margin-right: 20px;
  color: #67c23a;
}

.reservation-status-card.cancelled .status-icon {
  color: #f56c6c;
}

.reservation-status-card.expired .status-icon {
  color: #e6a23c;
}

.status-text h2 {
  margin: 0 0 10px;
  font-size: 20px;
  color: #67c23a;
}

.reservation-status-card.cancelled .status-text h2 {
  color: #f56c6c;
}

.reservation-status-card.expired .status-text h2 {
  color: #e6a23c;
}

.status-text p {
  margin: 0;
  font-size: 16px;
  color: #606266;
}

.detail-card,
.user-card,
.qrcode-card {
  margin-bottom: 20px;
}

.qrcode-container {
  text-align: center;
}


.loading-container {
  padding: 40px 0;
}

.error-container {
  padding: 40px 0;
  text-align: center;
}

.cancel-content p {
  margin-top: 0;
  margin-bottom: 20px;
}
</style>
