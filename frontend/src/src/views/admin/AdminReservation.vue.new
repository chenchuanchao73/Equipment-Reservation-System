<template>
  <div class="admin-reservation">
    <div class="page-header">
      <h1 class="page-title">{{ $t('admin.reservation') }}</h1>
    </div>

    <!-- 筛选卡片 -->
    <el-card shadow="hover" class="filter-card">
      <el-form :inline="true" :model="filter" class="filter-form">
        <el-form-item :label="$t('reservation.code')">
          <el-input
            v-model="filter.code"
            :placeholder="$t('reservation.queryPlaceholder')"
            clearable
            @keyup.enter.native="handleFilterChange"
          ></el-input>
        </el-form-item>

        <el-form-item :label="$t('reservation.userName')">
          <el-input
            v-model="filter.userName"
            :placeholder="$t('reservation.userName')"
            clearable
            @keyup.enter.native="handleFilterChange"
          ></el-input>
        </el-form-item>

        <el-form-item :label="$t('reservation.status')">
          <el-select
            v-model="filter.status"
            :placeholder="$t('equipment.allStatus')"
            clearable
            @change="handleFilterChange"
          >
            <el-option
              :label="$t('reservation.confirmed')"
              value="confirmed"
            ></el-option>
            <el-option
              :label="$t('reservation.inUse')"
              value="in_use"
            ></el-option>
            <el-option
              :label="$t('reservation.expired')"
              value="expired"
            ></el-option>
            <el-option
              :label="$t('reservation.cancelled')"
              value="cancelled"
            ></el-option>
          </el-select>
        </el-form-item>

        <el-form-item :label="$t('reservation.dateRange')">
          <el-date-picker
            v-model="filter.dateRange"
            type="daterange"
            range-separator="至"
            :start-placeholder="$t('reservation.startDate')"
            :end-placeholder="$t('reservation.endDate')"
            value-format="yyyy-MM-dd"
            @change="handleFilterChange"
          >
          </el-date-picker>
        </el-form-item>

        <el-form-item>
          <el-button type="primary" icon="el-icon-search" @click="handleFilterChange">
            {{ $t('common.search') }}
          </el-button>
          <el-button @click="resetFilter" icon="el-icon-refresh-left">
            {{ $t('common.reset') }}
          </el-button>
        </el-form-item>
      </el-form>
    </el-card>

    <!-- 预定列表 -->
    <el-card shadow="hover" class="reservation-list">
      <div v-if="loading" class="loading-container">
        <el-skeleton :rows="10" animated />
      </div>

      <div v-else-if="reservations.length === 0" class="empty-data">
        <el-empty :description="$t('common.noData')"></el-empty>
      </div>

      <el-table
        v-else
        :data="reservations"
        style="width: 100%"
        :default-sort="{ prop: 'created_at', order: 'descending' }"
        header-align="center"
        cell-class-name="text-center"
        border
        stripe
      >
        <el-table-column
          prop="reservation_code"
          :label="$t('reservation.code')"
          min-width="100"
        >
          <template slot-scope="scope">
            <span style="color: #F56C6C; font-weight: bold;">{{ scope.row.reservation_code }}</span>
          </template>
        </el-table-column>

        <el-table-column
          prop="equipment_name"
          :label="$t('reservation.equipmentName')"
          min-width="120"
        ></el-table-column>

        <el-table-column
          prop="user_name"
          :label="$t('reservation.userName')"
          min-width="100"
        ></el-table-column>

        <el-table-column
          prop="user_department"
          :label="$t('reservation.userDepartment')"
          min-width="100"
        ></el-table-column>

        <el-table-column
          prop="user_contact"
          :label="$t('reservation.userContact')"
          min-width="120"
        ></el-table-column>

        <el-table-column
          prop="start_datetime"
          :label="$t('reservation.startTime')"
          min-width="150"
          :formatter="formatDateTime"
        ></el-table-column>

        <el-table-column
          prop="end_datetime"
          :label="$t('reservation.endTime')"
          min-width="150"
          :formatter="formatDateTime"
        ></el-table-column>

        <el-table-column
          prop="status"
          :label="$t('reservation.status')"
          min-width="100"
        >
          <template slot-scope="scope">
            <el-tag
              :type="getStatusType(scope.row)"
              size="medium"
              style="font-weight: bold; padding: 0px 10px; font-size: 14px;"
            >
              {{ getStatusText(scope.row) }}
            </el-tag>
          </template>
        </el-table-column>

        <el-table-column
          :label="$t('common.operation')"
          min-width="100"
        >
          <template slot-scope="scope">
            <el-button
              type="text"
              size="small"
              @click="viewReservation(scope.row)"
            >
              {{ $t('admin.viewReservation') }}
            </el-button>
          </template>
        </el-table-column>
      </el-table>

      <!-- 分页 -->
      <div class="pagination-container" v-if="reservations.length > 0">
        <el-pagination
          background
          layout="prev, pager, next"
          :total="total"
          :page-size="pageSize"
          :current-page.sync="currentPage"
          @current-change="handlePageChange"
        ></el-pagination>
      </div>
    </el-card>
  </div>
</template>

<script>
import { reservationApi } from '@/api'
import { isReservationExpired } from '@/utils/date'

export default {
  name: 'AdminReservation',

  data() {
    return {
      loading: false,
      reservations: [],
      total: 0,
      currentPage: 1,
      pageSize: 10,
      filter: {
        code: '',
        userName: '',
        status: '',
        dateRange: []
      }
    }
  },

  created() {
    this.fetchData()
  },

  methods: {
    async fetchData() {
      this.loading = true
      console.log('Fetching data with filter:', this.filter);
      console.log('Current page:', this.currentPage);

      try {
        const params = {
          skip: (this.currentPage - 1) * this.pageSize, // 将页码转换为skip参数
          limit: this.pageSize,
          code: this.filter.code || undefined,
          user_name: this.filter.userName || undefined,
          _t: new Date().getTime() // 添加时间戳，防止缓存
        }

        // 添加日期范围过滤
        if (this.filter.dateRange && this.filter.dateRange.length === 2) {
          params.from_date = this.filter.dateRange[0]
          params.to_date = this.filter.dateRange[1]
        }

        // 处理不同的状态筛选
        if (this.filter.status) {
          console.log('Filtering by status:', this.filter.status);

          if (this.filter.status === 'in_use' || this.filter.status === 'confirmed') {
            // 这些状态需要特殊处理，因为后端没有这些细分状态
            // 我们获取所有已确认的预约，然后在前端筛选
            params.status = 'confirmed'
            console.log('Setting status parameter to "confirmed"');
          } else if (this.filter.status === 'expired') {
            // 对于已过期状态，我们需要获取所有可能已过期的预约
            // 由于我们在当前页只能获取一种状态的预约，我们选择获取"已确认"状态的预约
            // 总数会在fetchTotalForSpecialStatus中计算
            params.status = 'confirmed'
            console.log('Setting status parameter to "confirmed" for expired filter');
          } else {
            // 其他状态直接传递给后端
            params.status = this.filter.status
            console.log(`Setting status parameter to "${this.filter.status}"`);
          }
        }

        console.log('Fetching reservations with params:', params)
        const response = await reservationApi.getReservations(params)
        console.log('API Response:', response)
        let reservations = response.data.items || []
        console.log('Received reservations:', reservations)

        // 如果选择了特殊状态，需要在前端进行筛选
        if (this.filter.status === 'in_use') {
          // 筛选出"使用中"的预约
          const now = new Date()
          reservations = reservations.filter(reservation => {
            const start = new Date(reservation.start_datetime)
            const end = new Date(reservation.end_datetime)
            return now >= start && now <= end
          })
        } else if (this.filter.status === 'expired') {
          // 筛选出"已过期"的预约
          reservations = reservations.filter(reservation => {
            return isReservationExpired(reservation.end_datetime)
          })
        } else if (this.filter.status === 'confirmed') {
          // 筛选出真正的"已确认"预约（未开始的预约）
          const now = new Date()
          reservations = reservations.filter(reservation => {
            const start = new Date(reservation.start_datetime)
            // 未开始且未过期
            return start > now && !isReservationExpired(reservation.end_datetime)
          })
        }

        console.log('Filtered reservations:', reservations)
        this.reservations = reservations

        // 如果是特殊状态，总数需要重新计算
        if (this.filter.status === 'in_use' || this.filter.status === 'expired') {
          // 对于特殊状态，我们需要获取所有页的数据来计算总数
          // 这里我们先使用当前页的数据计算一个临时总数
          this.total = reservations.length
          console.log(`Temporary total based on current page: ${this.total}`);

          // 无论当前页是否有数据，都获取所有数据来计算真实总数
          this.fetchTotalForSpecialStatus()
        } else {
          this.total = response.data.total
          console.log(`Total from API response: ${this.total}`);
        }
      } catch (error) {
        console.error('Failed to fetch reservations:', error)
        this.$message.error(this.$t('error.serverError'))
      } finally {
        this.loading = false
      }
    },

    formatDateTime(row, column, cellValue) {
      if (!cellValue) return ''

      const date = new Date(cellValue)
      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`
    },

    getStatusType(reservation) {
      // 如果预约已取消，返回红色
      if (reservation.status === 'cancelled') {
        return 'danger'
      }

      // 如果预约已过期，返回橙色
      if (isReservationExpired(reservation.end_datetime)) {
        return 'warning'
      }

      // 如果预约正在进行中，返回蓝色
      const now = new Date()
      const start = new Date(reservation.start_datetime)
      const end = new Date(reservation.end_datetime)
      if (now >= start && now <= end) {
        return 'primary'
      }

      // 如果预约已确认且未开始，返回绿色
      // "已确认"状态出现在预约被管理员批准，但还未开始使用的情况
      return 'success'
    },

    getStatusText(reservation) {
      // 如果预约已过期，显示"已过期"
      if (isReservationExpired(reservation.end_datetime)) {
        return this.$t('reservation.statusExpired')
      }

      // 如果预约正在进行中，显示"使用中"
      const now = new Date()
      const start = new Date(reservation.start_datetime)
      const end = new Date(reservation.end_datetime)
      if (now >= start && now <= end) {
        return this.$t('reservation.statusInUse')
      }
      
      // 如果预约已取消，显示"已取消"
      if (reservation.status === 'cancelled') {
        return this.$t('reservation.statusCancelled')
      }

      // 如果预约已确认且未开始，显示"已确认"
      // "已确认"状态出现在预约被管理员批准，但还未开始使用的情况
      return this.$t('reservation.statusConfirmed')
    },

    handleFilterChange() {
      this.currentPage = 1
      this.fetchData()
    },

    resetFilter() {
      this.filter = {
        code: '',
        userName: '',
        status: '',
        dateRange: []
      }
      this.handleFilterChange()
    },

    handlePageChange(page) {
      this.currentPage = page
      this.fetchData()
    },

    viewReservation(reservation) {
      // 构建URL，只包含预约码和时间参数，不再包含状态参数
      // 这样详情页面将始终从API获取最新状态，而不是依赖URL参数
      const url = {
        path: `/admin/reservation/${reservation.reservation_code}`,
        query: {
          startTime: reservation.start_datetime,
          endTime: reservation.end_datetime
        }
      }
      this.$router.push(url)
    },

    // 获取特殊状态的总记录数并更新当前页面的预约列表
    async fetchTotalForSpecialStatus() {
      try {
        console.log('Fetching total for special status:', this.filter.status);

        // 构建查询参数，不包含分页参数
        const params = {
          // 不设置limit，获取所有记录
          skip: 0,
          code: this.filter.code || undefined,
          user_name: this.filter.userName || undefined
        }

        // 添加日期范围过滤
        if (this.filter.dateRange && this.filter.dateRange.length === 2) {
          params.from_date = this.filter.dateRange[0]
          params.to_date = this.filter.dateRange[1]
        }

        let allReservations = [];

        if (this.filter.status === 'expired') {
          // 对于"已过期"状态，我们需要获取所有状态的预约
          // 分别获取"已确认"和"已取消"状态的预约
          const confirmedParams = { ...params, status: 'confirmed' };
          const cancelledParams = { ...params, status: 'cancelled' };

          console.log('Fetching confirmed reservations for expired status');
          const confirmedResponse = await reservationApi.getReservations(confirmedParams);

          console.log('Fetching cancelled reservations for expired status');
          const cancelledResponse = await reservationApi.getReservations(cancelledParams);

          // 合并结果
          allReservations = [
            ...confirmedResponse.data.items,
            ...cancelledResponse.data.items
          ];

          console.log(`Total reservations before filtering: ${allReservations.length}`);

          // 筛选出"已过期"的预约
          const now = new Date();
          console.log(`使用当前日期: ${now} 来检查预约是否过期`);

          allReservations = allReservations.filter(reservation => {
            // 使用当前日期检查是否已过期
            const end = new Date(reservation.end_datetime);
            console.log(`检查预约是否过期: ID=${reservation.id}, 结束时间=${end}, 当前时间=${now}, 是否过期=${now > end}, 状态=${reservation.status}`);

            // 只有当预约结束时间早于当前时间时，才认为预约已过期
            return now > end;
          });

          console.log(`Total expired reservations: ${allReservations.length}`);

          // 如果找到了过期预约，更新当前页面的预约列表
          if (allReservations.length > 0) {
            // 按照结束时间排序，最近过期的排在前面
            allReservations.sort((a, b) => {
              return new Date(b.end_datetime) - new Date(a.end_datetime);
            });

            // 计算当前页应该显示的预约
            const startIndex = (this.currentPage - 1) * this.pageSize;
            const endIndex = Math.min(startIndex + this.pageSize, allReservations.length);

            // 更新当前页面的预约列表
            this.reservations = allReservations.slice(startIndex, endIndex);
            console.log(`更新当前页面的预约列表: ${this.reservations.length} 条记录`);

            // 打印每条记录的详细信息，用于调试
            this.reservations.forEach(res => {
              console.log(`显示预约: ID=${res.id}, 结束时间=${new Date(res.end_datetime)}, 状态=${res.status}`);
            });
          }
        } else if (this.filter.status === 'in_use') {
          // 对于"使用中"状态，只获取已确认的预约
          params.status = 'confirmed';

          console.log('Fetching confirmed reservations for in_use status');
          const response = await reservationApi.getReservations(params);
          allReservations = response.data.items;

          console.log(`Total reservations before filtering: ${allReservations.length}`);

          // 筛选出"使用中"的预约
          const now = new Date();
          allReservations = allReservations.filter(reservation => {
            const start = new Date(reservation.start_datetime);
            const end = new Date(reservation.end_datetime);
            console.log(`检查预约是否使用中: ID=${reservation.id}, 开始时间=${start}, 结束时间=${end}, 当前时间=${now}, 是否使用中=${now >= start && now <= end}, 状态=${reservation.status}`);
            return now >= start && now <= end;
          });

          console.log(`Total in_use reservations: ${allReservations.length}`);

          // 如果找到了使用中的预约，更新当前页面的预约列表
          if (allReservations.length > 0) {
            // 按照开始时间排序，最近开始的排在前面
            allReservations.sort((a, b) => {
              return new Date(b.start_datetime) - new Date(a.start_datetime);
            });

            // 计算当前页应该显示的预约
            const startIndex = (this.currentPage - 1) * this.pageSize;
            const endIndex = Math.min(startIndex + this.pageSize, allReservations.length);

            // 更新当前页面的预约列表
            this.reservations = allReservations.slice(startIndex, endIndex);
            console.log(`更新当前页面的预约列表: ${this.reservations.length} 条记录`);

            // 打印每条记录的详细信息，用于调试
            this.reservations.forEach(res => {
              console.log(`显示预约: ID=${res.id}, 开始时间=${new Date(res.start_datetime)}, 结束时间=${new Date(res.end_datetime)}, 状态=${res.status}`);
            });
          }
        }

        // 更新总数
        this.total = allReservations.length;
        console.log(`Updated total to: ${this.total}`);
      } catch (error) {
        console.error('Failed to fetch total for special status:', error);
      }
    }
  }
}
</script>

<style scoped>
.admin-reservation {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding: 15px 20px;
  background-color: #FFFFFF;
  border-radius: 4px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
}

.page-title {
  margin: 0;
  font-size: 24px;
  color: #303133;
}

.filter-card {
  margin-bottom: 20px;
}

.reservation-list {
  margin-bottom: 20px;
}

.loading-container {
  padding: 40px 0;
}

.empty-data {
  padding: 40px 0;
  text-align: center;
}

.pagination-container {
  text-align: center;
  margin-top: 20px;
}

.text-center {
  text-align: center !important;
}

@media (max-width: 768px) {
  .filter-form .el-form-item {
    margin-right: 0;
    margin-bottom: 10px;
  }
}
</style>
