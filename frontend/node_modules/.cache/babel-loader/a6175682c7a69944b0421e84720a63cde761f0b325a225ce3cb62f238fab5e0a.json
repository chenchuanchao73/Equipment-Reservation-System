{"ast":null,"code":"import { reservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'AdminReservationDetail',\n  data() {\n    return {\n      loading: false,\n      submitting: false,\n      reservation: null,\n      cancelDialogVisible: false,\n      returnDialogVisible: false\n    };\n  },\n  created() {\n    this.fetchReservation();\n\n    // 注册页面刷新事件监听器\n    window.addEventListener('beforeunload', this.saveState);\n  },\n  destroyed() {\n    // 移除事件监听器，避免内存泄漏\n    window.removeEventListener('beforeunload', this.saveState);\n  },\n  computed: {\n    getStatusTagText() {\n      if (!this.reservation) return '';\n\n      // 尝试恢复存储的状态\n      const savedState = this.getSavedState();\n      if (savedState && savedState.statusText) {\n        console.log('Using saved status text:', savedState.statusText);\n        return savedState.statusText;\n      }\n\n      // 调用方法获取状态文本\n      const statusText = this.getStatusText(this.reservation);\n      console.log('Computed status text:', statusText);\n      return statusText;\n    },\n    getStatusTagType() {\n      if (!this.reservation) return '';\n\n      // 尝试恢复存储的状态\n      const savedState = this.getSavedState();\n      if (savedState && savedState.statusType) {\n        console.log('Using saved status type:', savedState.statusType);\n        return savedState.statusType;\n      }\n\n      // 调用方法获取状态类型\n      const statusType = this.getStatusType(this.reservation);\n      console.log('Computed status type:', statusType);\n      return statusType;\n    },\n    // 获取显示的状态文本\n    displayStatusText() {\n      // 优先使用URL传递的状态，这是从列表页计算好的状态\n      if (this.$route.query.displayStatus) {\n        console.log('使用URL传递的状态文本:', this.$route.query.displayStatus);\n        return this.$route.query.displayStatus;\n      }\n\n      // 如果没有传递状态，则使用计算方法获取\n      if (!this.reservation) return '';\n\n      // 调用方法获取状态文本\n      const statusText = this.getStatusText(this.reservation);\n      console.log('计算得到的状态文本:', statusText);\n      return statusText;\n    },\n    // 获取显示的状态类型（用于样式）\n    displayStatusType() {\n      // 优先使用URL传递的状态类型，这是从列表页计算好的\n      if (this.$route.query.displayStatusType) {\n        console.log('使用URL传递的状态类型:', this.$route.query.displayStatusType);\n        return this.$route.query.displayStatusType;\n      }\n\n      // 如果没有传递状态类型，则使用计算方法获取\n      if (!this.reservation) return '';\n\n      // 调用方法获取状态类型\n      const statusType = this.getStatusType(this.reservation);\n      console.log('计算得到的状态类型:', statusType);\n      return statusType;\n    }\n  },\n  methods: {\n    isReservationExpired,\n    async fetchReservation() {\n      this.loading = true;\n      try {\n        const code = this.$route.params.code;\n        console.log('Fetching reservation with code:', code);\n\n        // 获取URL中的查询参数（仅用于时间参数）\n        const startTime = this.$route.query.startTime;\n        const endTime = this.$route.query.endTime;\n\n        // 构建API请求参数\n        let params = {};\n\n        // 只有当同时提供了开始和结束时间才添加到请求参数中\n        if (startTime && endTime) {\n          params.start_time = startTime;\n          params.end_time = endTime;\n          console.log('Including time parameters:', params);\n        }\n\n        // 使用API进行请求，直接传递预定码和参数\n        console.log('Calling API with code and params:', code, params);\n        const response = await reservationApi.getReservationByCode(code, params);\n        console.log('API Response:', response);\n        if (response.data && response.data.success) {\n          // 获取原始数据\n          this.reservation = response.data.data;\n          console.log('Original reservation data:', this.reservation);\n\n          // 添加详细日志，帮助调试状态判断\n          console.log('Status from API:', this.reservation.status);\n          console.log('Start time:', new Date(this.reservation.start_datetime));\n          console.log('End time:', new Date(this.reservation.end_datetime));\n          console.log('Current time:', new Date());\n\n          // 确保状态字段正确\n          if (!this.reservation.status) {\n            // 如果API返回的状态为空，默认设置为confirmed\n            console.warn('API returned empty status, setting default to confirmed');\n            this.reservation.status = 'confirmed';\n          }\n\n          // 重要：确保状态字段是正确的，而不是检查它是否为cancelled\n          console.log(`最终状态: ${this.reservation.status}，展示状态为: ${this.getStatusText(this.reservation)}`);\n        } else {\n          const errorMsg = response.data ? response.data.message : this.$t('reservation.reservationNotFound');\n          this.$message.error(errorMsg);\n          this.reservation = null;\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservation:', error);\n        this.$message.error(this.$t('error.serverError'));\n        this.reservation = null;\n      } finally {\n        this.loading = false;\n      }\n    },\n    formatDateTime(dateString) {\n      if (!dateString) return '-';\n      const date = new Date(dateString);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    // 获取状态文本\n    getStatusText(reservation) {\n      // 首先检查状态是否直接来自API响应\n      console.log('Checking status from API:', reservation.status);\n\n      // 如果API明确返回了cancelled状态，显示已取消\n      if (reservation.status === 'cancelled') {\n        console.log('Using cancelled status from API');\n        return this.$t('reservation.cancelled');\n      }\n\n      // 其他状态根据时间动态计算\n      if (isReservationExpired(reservation.end_datetime)) {\n        console.log('Calculated status: expired');\n        return this.$t('reservation.expired');\n      }\n\n      // 如果预约正在进行中，显示\"使用中\"\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        console.log('Calculated status: in use');\n        return this.$t('reservation.inUse');\n      }\n\n      // 如果预约已确认且未开始，显示\"已确认\"\n      console.log('Calculated status: confirmed');\n      return this.$t('reservation.confirmed');\n    },\n    // 获取状态类型（样式）\n    getStatusType(reservation) {\n      // 首先检查状态是否直接来自API响应\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning';\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return 'primary';\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      return 'success';\n    },\n    // 判断预约是否正在进行中\n    isReservationInProgress(reservation) {\n      if (!reservation) return false;\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n\n      // 当前时间在开始时间和结束时间之间\n      return now >= start && now <= end;\n    },\n    handleCancel() {\n      this.cancelDialogVisible = true;\n    },\n    handleReturn() {\n      this.returnDialogVisible = true;\n    },\n    async confirmCancel() {\n      this.submitting = true;\n      try {\n        // 检查是否是循环预约的子预约\n        if (this.reservation.recurring_reservation_id) {\n          console.log('Cancelling a child reservation of recurring reservation:', this.reservation.recurring_reservation_id);\n\n          // 获取当前预约的详细信息\n          const reservationCode = this.reservation.reservation_code;\n\n          // 取消单个子预约\n          const response = await reservationApi.cancelReservation(reservationCode);\n          console.log('Cancel child reservation response:', response);\n          if (response.data && response.data.success) {\n            // 关闭取消对话框\n            this.cancelDialogVisible = false;\n\n            // 显示成功消息\n            this.$message.success(this.$t('reservation.cancelSuccess'));\n\n            // 清除URL中的状态参数，强制使用API返回的最新状态\n            this.updateUrlWithNewStatus('cancelled');\n\n            // 提示用户返回循环预约详情页面\n            this.$confirm('已成功取消此子预约。是否查看循环预约详情？', '操作成功', {\n              confirmButtonText: '查看循环预约',\n              cancelButtonText: '留在当前页面',\n              type: 'success'\n            }).then(() => {\n              // 跳转到循环预约详情页面\n              this.$router.push(`/admin/recurring-reservation/${this.reservation.recurring_reservation_id}`);\n            }).catch(() => {\n              // 用户选择留在当前页面，直接重新获取预定信息\n              this.fetchReservation();\n            });\n          } else {\n            const errorMsg = response.data ? response.data.message : this.$t('reservation.cancelFailed');\n            this.$message.error(errorMsg);\n            // 关闭取消对话框\n            this.cancelDialogVisible = false;\n          }\n        } else {\n          // 普通预约的取消逻辑\n          const response = await reservationApi.cancelReservation(this.reservation.reservation_code);\n          console.log('Cancel response:', response);\n          if (response.data && response.data.success) {\n            // 关闭取消对话框\n            this.cancelDialogVisible = false;\n\n            // 显示成功消息\n            this.$message.success(this.$t('reservation.cancelSuccess'));\n\n            // 清除URL中的状态参数，强制使用API返回的最新状态\n            this.updateUrlWithNewStatus('cancelled');\n\n            // 直接重新获取预定信息\n            this.fetchReservation();\n          } else {\n            const errorMsg = response.data ? response.data.message : this.$t('reservation.cancelFailed');\n            this.$message.error(errorMsg);\n            // 关闭取消对话框\n            this.cancelDialogVisible = false;\n          }\n        }\n      } catch (error) {\n        console.error('Failed to cancel reservation:', error);\n        this.$message.error(this.$t('error.serverError'));\n        // 关闭取消对话框\n        this.cancelDialogVisible = false;\n      } finally {\n        this.submitting = false;\n      }\n    },\n    async confirmReturn() {\n      this.submitting = true;\n      try {\n        // 使用取消预定的API，但添加early_return参数\n        const response = await reservationApi.cancelReservation(this.reservation.reservation_code, {\n          early_return: true\n        });\n        console.log('Return response:', response);\n        if (response.data && response.data.success) {\n          // 关闭对话框\n          this.returnDialogVisible = false;\n\n          // 显示成功消息\n          this.$message.success(this.$t('reservation.returnSuccess'));\n\n          // 直接重新获取预定信息\n          this.fetchReservation();\n        } else {\n          const errorMsg = response.data ? response.data.message : this.$t('reservation.returnFailed');\n          this.$message.error(errorMsg);\n          this.returnDialogVisible = false;\n        }\n      } catch (error) {\n        console.error('Failed to return equipment:', error);\n        this.$message.error(this.$t('error.serverError'));\n        this.returnDialogVisible = false;\n      } finally {\n        this.submitting = false;\n      }\n    },\n    goBack() {\n      // 使用浏览器的历史记录返回，而不是直接跳转\n      if (window.history.length > 1) {\n        this.$router.go(-1); // 返回上一页\n      } else {\n        // 如果没有历史记录，则导航到预定管理页面\n        this.$router.push('/admin/reservation');\n      }\n    },\n    // 状态保存相关方法\n    saveState() {\n      if (!this.reservation) return;\n\n      // 计算当前状态\n      const statusText = this.getStatusText(this.reservation);\n      const statusType = this.getStatusType(this.reservation);\n\n      // 将状态保存到localStorage\n      const stateKey = `reservation_status_${this.reservation.reservation_code}`;\n      const state = {\n        statusText,\n        statusType,\n        timestamp: new Date().getTime()\n      };\n      console.log('Saving state to localStorage:', state);\n      localStorage.setItem(stateKey, JSON.stringify(state));\n    },\n    getSavedState() {\n      if (!this.reservation) return null;\n\n      // 从localStorage获取状态\n      const stateKey = `reservation_status_${this.reservation.reservation_code}`;\n      const savedStateStr = localStorage.getItem(stateKey);\n      if (!savedStateStr) return null;\n      try {\n        const savedState = JSON.parse(savedStateStr);\n        console.log('Retrieved saved state:', savedState);\n\n        // 检查保存的状态是否过期（超过5分钟）\n        const now = new Date().getTime();\n        const fiveMinutes = 5 * 60 * 1000;\n        if (now - savedState.timestamp > fiveMinutes) {\n          console.log('Saved state is expired, removing it');\n          localStorage.removeItem(stateKey);\n          return null;\n        }\n        return savedState;\n      } catch (e) {\n        console.error('Error parsing saved state:', e);\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["reservationApi","isReservationExpired","name","data","loading","submitting","reservation","cancelDialogVisible","returnDialogVisible","created","fetchReservation","window","addEventListener","saveState","destroyed","removeEventListener","computed","getStatusTagText","savedState","getSavedState","statusText","console","log","getStatusText","getStatusTagType","statusType","getStatusType","displayStatusText","$route","query","displayStatus","displayStatusType","methods","code","params","startTime","endTime","start_time","end_time","response","getReservationByCode","success","status","Date","start_datetime","end_datetime","warn","errorMsg","message","$t","$message","error","formatDateTime","dateString","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","now","start","end","isReservationInProgress","handleCancel","handleReturn","confirmCancel","recurring_reservation_id","reservationCode","reservation_code","cancelReservation","updateUrlWithNewStatus","$confirm","confirmButtonText","cancelButtonText","type","then","$router","push","catch","confirmReturn","early_return","goBack","history","length","go","stateKey","state","timestamp","getTime","localStorage","setItem","JSON","stringify","savedStateStr","getItem","parse","fiveMinutes","removeItem","e"],"sources":["src/views/admin/AdminReservationDetail.vue"],"sourcesContent":["<template>\n  <div class=\"admin-reservation-detail\">\n    <div class=\"page-header\">\n      <h1 class=\"page-title\">{{ $t('reservation.detail') }}</h1>\n      <el-button @click=\"goBack\" icon=\"el-icon-back\">\n        {{ $t('common.back') }}\n      </el-button>\n    </div>\n\n    <div v-if=\"loading\" class=\"loading-container\">\n      <el-skeleton :rows=\"10\" animated />\n    </div>\n\n    <el-card v-else-if=\"!reservation\" class=\"error-card\">\n      <div class=\"error-message\">\n        <i class=\"el-icon-warning-outline\"></i>\n        <p>{{ $t('reservation.reservationNotFound') }}</p>\n      </div>\n      <el-button type=\"primary\" @click=\"goBack\">\n        {{ $t('common.back') }}\n      </el-button>\n    </el-card>\n\n    <div v-else>\n      <!-- 预定详情卡片 -->\n      <el-card shadow=\"hover\" class=\"detail-card\">\n        <div slot=\"header\" class=\"card-header\">\n          <span>{{ $t('reservation.detail') }}</span>\n          <el-tag :type=\"displayStatusType\">\n            {{ displayStatusText }}\n          </el-tag>\n        </div>\n\n        <el-descriptions :column=\"2\" border>\n          <el-descriptions-item :label=\"$t('reservation.code')\">\n            {{ reservation.reservation_code }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.status')\">\n            <el-tag :type=\"displayStatusType\">\n              {{ displayStatusText }}\n            </el-tag>\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.equipmentName')\">\n            <router-link :to=\"`/equipment/${reservation.equipment_id}`\">\n              {{ reservation.equipment_name }}\n            </router-link>\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('common.createTime')\">\n            {{ formatDateTime(reservation.created_at) }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.startTime')\">\n            {{ formatDateTime(reservation.start_datetime) }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.endTime')\">\n            {{ formatDateTime(reservation.end_datetime) }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.userName')\">\n            {{ reservation.user_name }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.userDepartment')\">\n            {{ reservation.user_department }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.userContact')\">\n            {{ reservation.user_contact }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.userEmail')\">\n            {{ reservation.user_email || '-' }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.purpose')\" :span=\"2\">\n            {{ reservation.purpose || '-' }}\n          </el-descriptions-item>\n        </el-descriptions>\n\n        <div class=\"actions\">\n          <!-- 已确认且未开始的预约才显示取消按钮 -->\n          <el-button\n            v-if=\"displayStatusText === $t('reservation.confirmed')\"\n            type=\"danger\"\n            @click=\"handleCancel\"\n          >\n            {{ $t('reservation.cancelReservation') }}\n          </el-button>\n\n          <!-- 使用中的预约才显示提前归还按钮 -->\n          <el-button\n            v-if=\"displayStatusText === $t('reservation.inUse')\"\n            type=\"primary\"\n            @click=\"handleReturn\"\n          >\n            {{ $t('reservation.earlyReturn') }}\n          </el-button>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 取消预定确认对话框 -->\n    <el-dialog\n      :title=\"$t('common.warning')\"\n      :visible.sync=\"cancelDialogVisible\"\n      width=\"30%\"\n    >\n      <span>{{ $t('reservation.confirmCancel') }}</span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"cancelDialogVisible = false\">{{ $t('common.cancel') }}</el-button>\n        <el-button type=\"danger\" @click=\"confirmCancel\" :loading=\"submitting\">{{ $t('common.confirm') }}</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 提前归还确认对话框 -->\n    <el-dialog\n      :title=\"$t('reservation.earlyReturn')\"\n      :visible.sync=\"returnDialogVisible\"\n      width=\"30%\"\n    >\n      <span>{{ $t('reservation.confirmEarlyReturn') }}</span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"returnDialogVisible = false\">{{ $t('common.cancel') }}</el-button>\n        <el-button type=\"primary\" @click=\"confirmReturn\" :loading=\"submitting\">{{ $t('common.confirm') }}</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { reservationApi } from '@/api'\nimport { isReservationExpired } from '@/utils/date'\n\nexport default {\n  name: 'AdminReservationDetail',\n\n  data() {\n    return {\n      loading: false,\n      submitting: false,\n      reservation: null,\n      cancelDialogVisible: false,\n      returnDialogVisible: false\n    }\n  },\n\n  created() {\n    this.fetchReservation()\n    \n    // 注册页面刷新事件监听器\n    window.addEventListener('beforeunload', this.saveState)\n  },\n  \n  destroyed() {\n    // 移除事件监听器，避免内存泄漏\n    window.removeEventListener('beforeunload', this.saveState)\n  },\n\n  computed: {\n    getStatusTagText() {\n      if (!this.reservation) return ''\n      \n      // 尝试恢复存储的状态\n      const savedState = this.getSavedState()\n      if (savedState && savedState.statusText) {\n        console.log('Using saved status text:', savedState.statusText)\n        return savedState.statusText\n      }\n      \n      // 调用方法获取状态文本\n      const statusText = this.getStatusText(this.reservation)\n      console.log('Computed status text:', statusText)\n      return statusText\n    },\n    \n    getStatusTagType() {\n      if (!this.reservation) return ''\n      \n      // 尝试恢复存储的状态\n      const savedState = this.getSavedState()\n      if (savedState && savedState.statusType) {\n        console.log('Using saved status type:', savedState.statusType)\n        return savedState.statusType\n      }\n      \n      // 调用方法获取状态类型\n      const statusType = this.getStatusType(this.reservation)\n      console.log('Computed status type:', statusType)\n      return statusType\n    },\n    // 获取显示的状态文本\n    displayStatusText() {\n      // 优先使用URL传递的状态，这是从列表页计算好的状态\n      if (this.$route.query.displayStatus) {\n        console.log('使用URL传递的状态文本:', this.$route.query.displayStatus);\n        return this.$route.query.displayStatus;\n      }\n      \n      // 如果没有传递状态，则使用计算方法获取\n      if (!this.reservation) return '';\n      \n      // 调用方法获取状态文本\n      const statusText = this.getStatusText(this.reservation);\n      console.log('计算得到的状态文本:', statusText);\n      return statusText;\n    },\n    \n    // 获取显示的状态类型（用于样式）\n    displayStatusType() {\n      // 优先使用URL传递的状态类型，这是从列表页计算好的\n      if (this.$route.query.displayStatusType) {\n        console.log('使用URL传递的状态类型:', this.$route.query.displayStatusType);\n        return this.$route.query.displayStatusType;\n      }\n      \n      // 如果没有传递状态类型，则使用计算方法获取\n      if (!this.reservation) return '';\n      \n      // 调用方法获取状态类型\n      const statusType = this.getStatusType(this.reservation);\n      console.log('计算得到的状态类型:', statusType);\n      return statusType;\n    }\n  },\n\n  methods: {\n    isReservationExpired,\n\n    async fetchReservation() {\n      this.loading = true\n\n      try {\n        const code = this.$route.params.code\n        console.log('Fetching reservation with code:', code)\n\n        // 获取URL中的查询参数（仅用于时间参数）\n        const startTime = this.$route.query.startTime\n        const endTime = this.$route.query.endTime\n\n        // 构建API请求参数\n        let params = {}\n        \n        // 只有当同时提供了开始和结束时间才添加到请求参数中\n        if (startTime && endTime) {\n          params.start_time = startTime\n          params.end_time = endTime\n          console.log('Including time parameters:', params)\n        }\n\n        // 使用API进行请求，直接传递预定码和参数\n        console.log('Calling API with code and params:', code, params)\n        const response = await reservationApi.getReservationByCode(code, params)\n\n        console.log('API Response:', response)\n\n        if (response.data && response.data.success) {\n          // 获取原始数据\n          this.reservation = response.data.data\n          console.log('Original reservation data:', this.reservation)\n          \n          // 添加详细日志，帮助调试状态判断\n          console.log('Status from API:', this.reservation.status)\n          console.log('Start time:', new Date(this.reservation.start_datetime))\n          console.log('End time:', new Date(this.reservation.end_datetime))\n          console.log('Current time:', new Date())\n          \n          // 确保状态字段正确\n          if (!this.reservation.status) {\n            // 如果API返回的状态为空，默认设置为confirmed\n            console.warn('API returned empty status, setting default to confirmed')\n            this.reservation.status = 'confirmed'\n          }\n          \n          // 重要：确保状态字段是正确的，而不是检查它是否为cancelled\n          console.log(`最终状态: ${this.reservation.status}，展示状态为: ${this.getStatusText(this.reservation)}`)\n        } else {\n          const errorMsg = response.data ? response.data.message : this.$t('reservation.reservationNotFound')\n          this.$message.error(errorMsg)\n          this.reservation = null\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservation:', error)\n        this.$message.error(this.$t('error.serverError'))\n        this.reservation = null\n      } finally {\n        this.loading = false\n      }\n    },\n\n    formatDateTime(dateString) {\n      if (!dateString) return '-'\n\n      const date = new Date(dateString)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    },\n\n    // 获取状态文本\n    getStatusText(reservation) {\n      // 首先检查状态是否直接来自API响应\n      console.log('Checking status from API:', reservation.status);\n      \n      // 如果API明确返回了cancelled状态，显示已取消\n      if (reservation.status === 'cancelled') {\n        console.log('Using cancelled status from API');\n        return this.$t('reservation.cancelled');\n      }\n      \n      // 其他状态根据时间动态计算\n      if (isReservationExpired(reservation.end_datetime)) {\n        console.log('Calculated status: expired');\n        return this.$t('reservation.expired');\n      }\n\n      // 如果预约正在进行中，显示\"使用中\"\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        console.log('Calculated status: in use');\n        return this.$t('reservation.inUse');\n      }\n\n      // 如果预约已确认且未开始，显示\"已确认\"\n      console.log('Calculated status: confirmed');\n      return this.$t('reservation.confirmed');\n    },\n\n    // 获取状态类型（样式）\n    getStatusType(reservation) {\n      // 首先检查状态是否直接来自API响应\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning';\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return 'primary';\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      return 'success';\n    },\n\n    // 判断预约是否正在进行中\n    isReservationInProgress(reservation) {\n      if (!reservation) return false\n\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n\n      // 当前时间在开始时间和结束时间之间\n      return now >= start && now <= end\n    },\n\n    handleCancel() {\n      this.cancelDialogVisible = true\n    },\n\n    handleReturn() {\n      this.returnDialogVisible = true\n    },\n\n    async confirmCancel() {\n      this.submitting = true\n\n      try {\n        // 检查是否是循环预约的子预约\n        if (this.reservation.recurring_reservation_id) {\n          console.log('Cancelling a child reservation of recurring reservation:', this.reservation.recurring_reservation_id)\n\n          // 获取当前预约的详细信息\n          const reservationCode = this.reservation.reservation_code\n\n          // 取消单个子预约\n          const response = await reservationApi.cancelReservation(reservationCode)\n\n          console.log('Cancel child reservation response:', response)\n\n          if (response.data && response.data.success) {\n            // 关闭取消对话框\n            this.cancelDialogVisible = false\n\n            // 显示成功消息\n            this.$message.success(this.$t('reservation.cancelSuccess'))\n            \n            // 清除URL中的状态参数，强制使用API返回的最新状态\n            this.updateUrlWithNewStatus('cancelled')\n\n            // 提示用户返回循环预约详情页面\n            this.$confirm(\n              '已成功取消此子预约。是否查看循环预约详情？',\n              '操作成功',\n              {\n                confirmButtonText: '查看循环预约',\n                cancelButtonText: '留在当前页面',\n                type: 'success'\n              }\n            ).then(() => {\n              // 跳转到循环预约详情页面\n              this.$router.push(`/admin/recurring-reservation/${this.reservation.recurring_reservation_id}`)\n            }).catch(() => {\n              // 用户选择留在当前页面，直接重新获取预定信息\n              this.fetchReservation()\n            })\n          } else {\n            const errorMsg = response.data ? response.data.message : this.$t('reservation.cancelFailed')\n            this.$message.error(errorMsg)\n            // 关闭取消对话框\n            this.cancelDialogVisible = false\n          }\n        } else {\n          // 普通预约的取消逻辑\n          const response = await reservationApi.cancelReservation(this.reservation.reservation_code)\n\n          console.log('Cancel response:', response)\n\n          if (response.data && response.data.success) {\n            // 关闭取消对话框\n            this.cancelDialogVisible = false\n\n            // 显示成功消息\n            this.$message.success(this.$t('reservation.cancelSuccess'))\n\n            // 清除URL中的状态参数，强制使用API返回的最新状态\n            this.updateUrlWithNewStatus('cancelled')\n            \n            // 直接重新获取预定信息\n            this.fetchReservation()\n          } else {\n            const errorMsg = response.data ? response.data.message : this.$t('reservation.cancelFailed')\n            this.$message.error(errorMsg)\n            // 关闭取消对话框\n            this.cancelDialogVisible = false\n          }\n        }\n      } catch (error) {\n        console.error('Failed to cancel reservation:', error)\n        this.$message.error(this.$t('error.serverError'))\n        // 关闭取消对话框\n        this.cancelDialogVisible = false\n      } finally {\n        this.submitting = false\n      }\n    },\n\n    async confirmReturn() {\n      this.submitting = true\n\n      try {\n        // 使用取消预定的API，但添加early_return参数\n        const response = await reservationApi.cancelReservation(this.reservation.reservation_code, {\n          early_return: true\n        })\n\n        console.log('Return response:', response)\n\n        if (response.data && response.data.success) {\n          // 关闭对话框\n          this.returnDialogVisible = false\n\n          // 显示成功消息\n          this.$message.success(this.$t('reservation.returnSuccess'))\n\n          // 直接重新获取预定信息\n          this.fetchReservation()\n        } else {\n          const errorMsg = response.data ? response.data.message : this.$t('reservation.returnFailed')\n          this.$message.error(errorMsg)\n          this.returnDialogVisible = false\n        }\n      } catch (error) {\n        console.error('Failed to return equipment:', error)\n        this.$message.error(this.$t('error.serverError'))\n        this.returnDialogVisible = false\n      } finally {\n        this.submitting = false\n      }\n    },\n\n    goBack() {\n      // 使用浏览器的历史记录返回，而不是直接跳转\n      if (window.history.length > 1) {\n        this.$router.go(-1); // 返回上一页\n      } else {\n        // 如果没有历史记录，则导航到预定管理页面\n        this.$router.push('/admin/reservation');\n      }\n    },\n\n    // 状态保存相关方法\n    saveState() {\n      if (!this.reservation) return\n      \n      // 计算当前状态\n      const statusText = this.getStatusText(this.reservation)\n      const statusType = this.getStatusType(this.reservation)\n      \n      // 将状态保存到localStorage\n      const stateKey = `reservation_status_${this.reservation.reservation_code}`\n      const state = {\n        statusText,\n        statusType,\n        timestamp: new Date().getTime()\n      }\n      \n      console.log('Saving state to localStorage:', state)\n      localStorage.setItem(stateKey, JSON.stringify(state))\n    },\n    \n    getSavedState() {\n      if (!this.reservation) return null\n      \n      // 从localStorage获取状态\n      const stateKey = `reservation_status_${this.reservation.reservation_code}`\n      const savedStateStr = localStorage.getItem(stateKey)\n      \n      if (!savedStateStr) return null\n      \n      try {\n        const savedState = JSON.parse(savedStateStr)\n        console.log('Retrieved saved state:', savedState)\n        \n        // 检查保存的状态是否过期（超过5分钟）\n        const now = new Date().getTime()\n        const fiveMinutes = 5 * 60 * 1000\n        if (now - savedState.timestamp > fiveMinutes) {\n          console.log('Saved state is expired, removing it')\n          localStorage.removeItem(stateKey)\n          return null\n        }\n        \n        return savedState\n      } catch (e) {\n        console.error('Error parsing saved state:', e)\n        return null\n      }\n    },\n  }\n}\n</script>\n\n<style scoped>\n.admin-reservation-detail {\n  padding: 20px;\n}\n\n.page-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  color: #303133;\n}\n\n.loading-container {\n  padding: 40px 0;\n}\n\n.error-card {\n  text-align: center;\n  padding: 40px 0;\n}\n\n.error-message {\n  margin-bottom: 20px;\n}\n\n.error-message i {\n  font-size: 48px;\n  color: #E6A23C;\n  margin-bottom: 10px;\n}\n\n.error-message p {\n  font-size: 18px;\n  color: #606266;\n}\n\n.detail-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.actions {\n  margin-top: 20px;\n  text-align: right;\n}\n\n@media (max-width: 768px) {\n  .el-descriptions-item {\n    width: 100%;\n  }\n}\n</style>\n"],"mappings":"AAsIA,SAAAA,cAAA;AACA,SAAAC,oBAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,OAAA;MACAC,UAAA;MACAC,WAAA;MACAC,mBAAA;MACAC,mBAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,gBAAA;;IAEA;IACAC,MAAA,CAAAC,gBAAA,sBAAAC,SAAA;EACA;EAEAC,UAAA;IACA;IACAH,MAAA,CAAAI,mBAAA,sBAAAF,SAAA;EACA;EAEAG,QAAA;IACAC,iBAAA;MACA,UAAAX,WAAA;;MAEA;MACA,MAAAY,UAAA,QAAAC,aAAA;MACA,IAAAD,UAAA,IAAAA,UAAA,CAAAE,UAAA;QACAC,OAAA,CAAAC,GAAA,6BAAAJ,UAAA,CAAAE,UAAA;QACA,OAAAF,UAAA,CAAAE,UAAA;MACA;;MAEA;MACA,MAAAA,UAAA,QAAAG,aAAA,MAAAjB,WAAA;MACAe,OAAA,CAAAC,GAAA,0BAAAF,UAAA;MACA,OAAAA,UAAA;IACA;IAEAI,iBAAA;MACA,UAAAlB,WAAA;;MAEA;MACA,MAAAY,UAAA,QAAAC,aAAA;MACA,IAAAD,UAAA,IAAAA,UAAA,CAAAO,UAAA;QACAJ,OAAA,CAAAC,GAAA,6BAAAJ,UAAA,CAAAO,UAAA;QACA,OAAAP,UAAA,CAAAO,UAAA;MACA;;MAEA;MACA,MAAAA,UAAA,QAAAC,aAAA,MAAApB,WAAA;MACAe,OAAA,CAAAC,GAAA,0BAAAG,UAAA;MACA,OAAAA,UAAA;IACA;IACA;IACAE,kBAAA;MACA;MACA,SAAAC,MAAA,CAAAC,KAAA,CAAAC,aAAA;QACAT,OAAA,CAAAC,GAAA,uBAAAM,MAAA,CAAAC,KAAA,CAAAC,aAAA;QACA,YAAAF,MAAA,CAAAC,KAAA,CAAAC,aAAA;MACA;;MAEA;MACA,UAAAxB,WAAA;;MAEA;MACA,MAAAc,UAAA,QAAAG,aAAA,MAAAjB,WAAA;MACAe,OAAA,CAAAC,GAAA,eAAAF,UAAA;MACA,OAAAA,UAAA;IACA;IAEA;IACAW,kBAAA;MACA;MACA,SAAAH,MAAA,CAAAC,KAAA,CAAAE,iBAAA;QACAV,OAAA,CAAAC,GAAA,uBAAAM,MAAA,CAAAC,KAAA,CAAAE,iBAAA;QACA,YAAAH,MAAA,CAAAC,KAAA,CAAAE,iBAAA;MACA;;MAEA;MACA,UAAAzB,WAAA;;MAEA;MACA,MAAAmB,UAAA,QAAAC,aAAA,MAAApB,WAAA;MACAe,OAAA,CAAAC,GAAA,eAAAG,UAAA;MACA,OAAAA,UAAA;IACA;EACA;EAEAO,OAAA;IACA/B,oBAAA;IAEA,MAAAS,iBAAA;MACA,KAAAN,OAAA;MAEA;QACA,MAAA6B,IAAA,QAAAL,MAAA,CAAAM,MAAA,CAAAD,IAAA;QACAZ,OAAA,CAAAC,GAAA,oCAAAW,IAAA;;QAEA;QACA,MAAAE,SAAA,QAAAP,MAAA,CAAAC,KAAA,CAAAM,SAAA;QACA,MAAAC,OAAA,QAAAR,MAAA,CAAAC,KAAA,CAAAO,OAAA;;QAEA;QACA,IAAAF,MAAA;;QAEA;QACA,IAAAC,SAAA,IAAAC,OAAA;UACAF,MAAA,CAAAG,UAAA,GAAAF,SAAA;UACAD,MAAA,CAAAI,QAAA,GAAAF,OAAA;UACAf,OAAA,CAAAC,GAAA,+BAAAY,MAAA;QACA;;QAEA;QACAb,OAAA,CAAAC,GAAA,sCAAAW,IAAA,EAAAC,MAAA;QACA,MAAAK,QAAA,SAAAvC,cAAA,CAAAwC,oBAAA,CAAAP,IAAA,EAAAC,MAAA;QAEAb,OAAA,CAAAC,GAAA,kBAAAiB,QAAA;QAEA,IAAAA,QAAA,CAAApC,IAAA,IAAAoC,QAAA,CAAApC,IAAA,CAAAsC,OAAA;UACA;UACA,KAAAnC,WAAA,GAAAiC,QAAA,CAAApC,IAAA,CAAAA,IAAA;UACAkB,OAAA,CAAAC,GAAA,oCAAAhB,WAAA;;UAEA;UACAe,OAAA,CAAAC,GAAA,0BAAAhB,WAAA,CAAAoC,MAAA;UACArB,OAAA,CAAAC,GAAA,oBAAAqB,IAAA,MAAArC,WAAA,CAAAsC,cAAA;UACAvB,OAAA,CAAAC,GAAA,kBAAAqB,IAAA,MAAArC,WAAA,CAAAuC,YAAA;UACAxB,OAAA,CAAAC,GAAA,sBAAAqB,IAAA;;UAEA;UACA,UAAArC,WAAA,CAAAoC,MAAA;YACA;YACArB,OAAA,CAAAyB,IAAA;YACA,KAAAxC,WAAA,CAAAoC,MAAA;UACA;;UAEA;UACArB,OAAA,CAAAC,GAAA,eAAAhB,WAAA,CAAAoC,MAAA,gBAAAnB,aAAA,MAAAjB,WAAA;QACA;UACA,MAAAyC,QAAA,GAAAR,QAAA,CAAApC,IAAA,GAAAoC,QAAA,CAAApC,IAAA,CAAA6C,OAAA,QAAAC,EAAA;UACA,KAAAC,QAAA,CAAAC,KAAA,CAAAJ,QAAA;UACA,KAAAzC,WAAA;QACA;MACA,SAAA6C,KAAA;QACA9B,OAAA,CAAA8B,KAAA,iCAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,MAAAF,EAAA;QACA,KAAA3C,WAAA;MACA;QACA,KAAAF,OAAA;MACA;IACA;IAEAgD,eAAAC,UAAA;MACA,KAAAA,UAAA;MAEA,MAAAC,IAAA,OAAAX,IAAA,CAAAU,UAAA;MACA,UAAAC,IAAA,CAAAC,WAAA,MAAAC,MAAA,CAAAF,IAAA,CAAAG,QAAA,QAAAC,QAAA,YAAAF,MAAA,CAAAF,IAAA,CAAAK,OAAA,IAAAD,QAAA,YAAAF,MAAA,CAAAF,IAAA,CAAAM,QAAA,IAAAF,QAAA,YAAAF,MAAA,CAAAF,IAAA,CAAAO,UAAA,IAAAH,QAAA;IACA;IAEA;IACAnC,cAAAjB,WAAA;MACA;MACAe,OAAA,CAAAC,GAAA,8BAAAhB,WAAA,CAAAoC,MAAA;;MAEA;MACA,IAAApC,WAAA,CAAAoC,MAAA;QACArB,OAAA,CAAAC,GAAA;QACA,YAAA2B,EAAA;MACA;;MAEA;MACA,IAAAhD,oBAAA,CAAAK,WAAA,CAAAuC,YAAA;QACAxB,OAAA,CAAAC,GAAA;QACA,YAAA2B,EAAA;MACA;;MAEA;MACA,MAAAa,GAAA,OAAAnB,IAAA;MACA,MAAAoB,KAAA,OAAApB,IAAA,CAAArC,WAAA,CAAAsC,cAAA;MACA,MAAAoB,GAAA,OAAArB,IAAA,CAAArC,WAAA,CAAAuC,YAAA;MACA,IAAAiB,GAAA,IAAAC,KAAA,IAAAD,GAAA,IAAAE,GAAA;QACA3C,OAAA,CAAAC,GAAA;QACA,YAAA2B,EAAA;MACA;;MAEA;MACA5B,OAAA,CAAAC,GAAA;MACA,YAAA2B,EAAA;IACA;IAEA;IACAvB,cAAApB,WAAA;MACA;MACA,IAAAA,WAAA,CAAAoC,MAAA;QACA;MACA;;MAEA;MACA,IAAAzC,oBAAA,CAAAK,WAAA,CAAAuC,YAAA;QACA;MACA;;MAEA;MACA,MAAAiB,GAAA,OAAAnB,IAAA;MACA,MAAAoB,KAAA,OAAApB,IAAA,CAAArC,WAAA,CAAAsC,cAAA;MACA,MAAAoB,GAAA,OAAArB,IAAA,CAAArC,WAAA,CAAAuC,YAAA;MACA,IAAAiB,GAAA,IAAAC,KAAA,IAAAD,GAAA,IAAAE,GAAA;QACA;MACA;;MAEA;MACA;IACA;IAEA;IACAC,wBAAA3D,WAAA;MACA,KAAAA,WAAA;MAEA,MAAAwD,GAAA,OAAAnB,IAAA;MACA,MAAAoB,KAAA,OAAApB,IAAA,CAAArC,WAAA,CAAAsC,cAAA;MACA,MAAAoB,GAAA,OAAArB,IAAA,CAAArC,WAAA,CAAAuC,YAAA;;MAEA;MACA,OAAAiB,GAAA,IAAAC,KAAA,IAAAD,GAAA,IAAAE,GAAA;IACA;IAEAE,aAAA;MACA,KAAA3D,mBAAA;IACA;IAEA4D,aAAA;MACA,KAAA3D,mBAAA;IACA;IAEA,MAAA4D,cAAA;MACA,KAAA/D,UAAA;MAEA;QACA;QACA,SAAAC,WAAA,CAAA+D,wBAAA;UACAhD,OAAA,CAAAC,GAAA,kEAAAhB,WAAA,CAAA+D,wBAAA;;UAEA;UACA,MAAAC,eAAA,QAAAhE,WAAA,CAAAiE,gBAAA;;UAEA;UACA,MAAAhC,QAAA,SAAAvC,cAAA,CAAAwE,iBAAA,CAAAF,eAAA;UAEAjD,OAAA,CAAAC,GAAA,uCAAAiB,QAAA;UAEA,IAAAA,QAAA,CAAApC,IAAA,IAAAoC,QAAA,CAAApC,IAAA,CAAAsC,OAAA;YACA;YACA,KAAAlC,mBAAA;;YAEA;YACA,KAAA2C,QAAA,CAAAT,OAAA,MAAAQ,EAAA;;YAEA;YACA,KAAAwB,sBAAA;;YAEA;YACA,KAAAC,QAAA,CACA,yBACA,QACA;cACAC,iBAAA;cACAC,gBAAA;cACAC,IAAA;YACA,CACA,EAAAC,IAAA;cACA;cACA,KAAAC,OAAA,CAAAC,IAAA,sCAAA1E,WAAA,CAAA+D,wBAAA;YACA,GAAAY,KAAA;cACA;cACA,KAAAvE,gBAAA;YACA;UACA;YACA,MAAAqC,QAAA,GAAAR,QAAA,CAAApC,IAAA,GAAAoC,QAAA,CAAApC,IAAA,CAAA6C,OAAA,QAAAC,EAAA;YACA,KAAAC,QAAA,CAAAC,KAAA,CAAAJ,QAAA;YACA;YACA,KAAAxC,mBAAA;UACA;QACA;UACA;UACA,MAAAgC,QAAA,SAAAvC,cAAA,CAAAwE,iBAAA,MAAAlE,WAAA,CAAAiE,gBAAA;UAEAlD,OAAA,CAAAC,GAAA,qBAAAiB,QAAA;UAEA,IAAAA,QAAA,CAAApC,IAAA,IAAAoC,QAAA,CAAApC,IAAA,CAAAsC,OAAA;YACA;YACA,KAAAlC,mBAAA;;YAEA;YACA,KAAA2C,QAAA,CAAAT,OAAA,MAAAQ,EAAA;;YAEA;YACA,KAAAwB,sBAAA;;YAEA;YACA,KAAA/D,gBAAA;UACA;YACA,MAAAqC,QAAA,GAAAR,QAAA,CAAApC,IAAA,GAAAoC,QAAA,CAAApC,IAAA,CAAA6C,OAAA,QAAAC,EAAA;YACA,KAAAC,QAAA,CAAAC,KAAA,CAAAJ,QAAA;YACA;YACA,KAAAxC,mBAAA;UACA;QACA;MACA,SAAA4C,KAAA;QACA9B,OAAA,CAAA8B,KAAA,kCAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,MAAAF,EAAA;QACA;QACA,KAAA1C,mBAAA;MACA;QACA,KAAAF,UAAA;MACA;IACA;IAEA,MAAA6E,cAAA;MACA,KAAA7E,UAAA;MAEA;QACA;QACA,MAAAkC,QAAA,SAAAvC,cAAA,CAAAwE,iBAAA,MAAAlE,WAAA,CAAAiE,gBAAA;UACAY,YAAA;QACA;QAEA9D,OAAA,CAAAC,GAAA,qBAAAiB,QAAA;QAEA,IAAAA,QAAA,CAAApC,IAAA,IAAAoC,QAAA,CAAApC,IAAA,CAAAsC,OAAA;UACA;UACA,KAAAjC,mBAAA;;UAEA;UACA,KAAA0C,QAAA,CAAAT,OAAA,MAAAQ,EAAA;;UAEA;UACA,KAAAvC,gBAAA;QACA;UACA,MAAAqC,QAAA,GAAAR,QAAA,CAAApC,IAAA,GAAAoC,QAAA,CAAApC,IAAA,CAAA6C,OAAA,QAAAC,EAAA;UACA,KAAAC,QAAA,CAAAC,KAAA,CAAAJ,QAAA;UACA,KAAAvC,mBAAA;QACA;MACA,SAAA2C,KAAA;QACA9B,OAAA,CAAA8B,KAAA,gCAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,MAAAF,EAAA;QACA,KAAAzC,mBAAA;MACA;QACA,KAAAH,UAAA;MACA;IACA;IAEA+E,OAAA;MACA;MACA,IAAAzE,MAAA,CAAA0E,OAAA,CAAAC,MAAA;QACA,KAAAP,OAAA,CAAAQ,EAAA;MACA;QACA;QACA,KAAAR,OAAA,CAAAC,IAAA;MACA;IACA;IAEA;IACAnE,UAAA;MACA,UAAAP,WAAA;;MAEA;MACA,MAAAc,UAAA,QAAAG,aAAA,MAAAjB,WAAA;MACA,MAAAmB,UAAA,QAAAC,aAAA,MAAApB,WAAA;;MAEA;MACA,MAAAkF,QAAA,8BAAAlF,WAAA,CAAAiE,gBAAA;MACA,MAAAkB,KAAA;QACArE,UAAA;QACAK,UAAA;QACAiE,SAAA,MAAA/C,IAAA,GAAAgD,OAAA;MACA;MAEAtE,OAAA,CAAAC,GAAA,kCAAAmE,KAAA;MACAG,YAAA,CAAAC,OAAA,CAAAL,QAAA,EAAAM,IAAA,CAAAC,SAAA,CAAAN,KAAA;IACA;IAEAtE,cAAA;MACA,UAAAb,WAAA;;MAEA;MACA,MAAAkF,QAAA,8BAAAlF,WAAA,CAAAiE,gBAAA;MACA,MAAAyB,aAAA,GAAAJ,YAAA,CAAAK,OAAA,CAAAT,QAAA;MAEA,KAAAQ,aAAA;MAEA;QACA,MAAA9E,UAAA,GAAA4E,IAAA,CAAAI,KAAA,CAAAF,aAAA;QACA3E,OAAA,CAAAC,GAAA,2BAAAJ,UAAA;;QAEA;QACA,MAAA4C,GAAA,OAAAnB,IAAA,GAAAgD,OAAA;QACA,MAAAQ,WAAA;QACA,IAAArC,GAAA,GAAA5C,UAAA,CAAAwE,SAAA,GAAAS,WAAA;UACA9E,OAAA,CAAAC,GAAA;UACAsE,YAAA,CAAAQ,UAAA,CAAAZ,QAAA;UACA;QACA;QAEA,OAAAtE,UAAA;MACA,SAAAmF,CAAA;QACAhF,OAAA,CAAA8B,KAAA,+BAAAkD,CAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}