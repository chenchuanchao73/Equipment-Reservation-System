{"ast":null,"code":"import { equipmentApi, recurringReservationApi } from '@/api';\nimport axios from 'axios';\nexport default {\n  name: 'RecurringReservationForm',\n  computed: {\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n  data() {\n    // 表单验证规则\n    const validateTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(this.$t('reservation.requiredField')));\n      } else if (this.form.startTime && this.form.endTime) {\n        const start = new Date(this.form.startTime);\n        const end = new Date(this.form.endTime);\n        if (start >= end) {\n          callback(new Error(this.$t('reservation.invalidTime')));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n    const validateDateRange = (rule, value, callback) => {\n      if (!value || !value[0] || !value[1]) {\n        callback(new Error(this.$t('reservation.requiredField')));\n      } else {\n        callback();\n      }\n    };\n    const validateDaysOfWeek = (rule, value, callback) => {\n      if (this.form.patternType === 'weekly' && (!value || value.length === 0)) {\n        callback(new Error(this.$t('reservation.selectDaysOfWeek')));\n      } else {\n        callback();\n      }\n    };\n    const validateDaysOfMonth = (rule, value, callback) => {\n      if (this.form.patternType === 'monthly' && (!value || value.length === 0)) {\n        callback(new Error(this.$t('reservation.selectDaysOfMonth')));\n      } else {\n        callback();\n      }\n    };\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback();\n      } else {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(value)) {\n          callback(new Error(this.$t('reservation.emailFormat')));\n        } else {\n          callback();\n        }\n      }\n    };\n    return {\n      loading: false,\n      submitting: false,\n      equipment: null,\n      timeConflict: false,\n      successDialogVisible: false,\n      recurringReservationId: null,\n      reservationCode: '',\n      form: {\n        patternType: 'weekly',\n        daysOfWeek: [],\n        daysOfMonth: [],\n        dateRange: [],\n        startTime: '',\n        endTime: '',\n        userName: '',\n        userDepartment: '',\n        userContact: '',\n        userEmail: '',\n        purpose: ''\n      },\n      rules: {\n        patternType: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }],\n        daysOfWeek: [{\n          validator: validateDaysOfWeek,\n          trigger: 'change'\n        }],\n        daysOfMonth: [{\n          validator: validateDaysOfMonth,\n          trigger: 'change'\n        }],\n        dateRange: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }, {\n          validator: validateDateRange,\n          trigger: 'change'\n        }],\n        startTime: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }, {\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        endTime: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }, {\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        userName: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 2,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userDepartment: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 2,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userContact: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 5,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userEmail: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          validator: validateEmail,\n          trigger: 'blur'\n        }],\n        purpose: [{\n          max: 500,\n          message: this.$t('common.lengthLimit', {\n            max: 500\n          }),\n          trigger: 'blur'\n        }]\n      },\n      dateRangePickerOptions: {\n        disabledDate(time) {\n          return time.getTime() < Date.now() - 8.64e7; // 不能选择过去的日期\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchEquipment();\n  },\n  methods: {\n    async fetchEquipment() {\n      this.loading = true;\n      try {\n        const equipmentId = this.$route.params.id;\n        const response = await equipmentApi.getEquipment(equipmentId);\n        this.equipment = response.data;\n        if (this.equipment.status !== 'available') {\n          this.$message.warning(this.$t('equipment.notAvailable'));\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment:', error);\n        this.$message.error(this.$t('common.error'));\n        this.equipment = null;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async checkTimeAvailability() {\n      if (!this.form.dateRange || !this.form.dateRange[0] || !this.form.dateRange[1] || !this.form.startTime || !this.form.endTime) {\n        this.timeConflict = false;\n        return;\n      }\n      const start = new Date(this.form.startTime);\n      const end = new Date(this.form.endTime);\n      if (start >= end) {\n        this.timeConflict = true;\n        return;\n      }\n\n      // 对于循环预约，我们只检查第一天的可用性作为示例\n      try {\n        const equipmentId = this.equipment.id;\n        const startDate = this.formatDate(this.form.dateRange[0]);\n        const endDate = this.formatDate(this.form.dateRange[0]); // 只检查第一天\n\n        const response = await equipmentApi.getAvailability(equipmentId, startDate, endDate);\n\n        // 检查是否有冲突\n        this.timeConflict = response.data.available.includes(false);\n        if (this.timeConflict) {\n          this.$message.warning(this.$t('reservation.timeConflictWarning'));\n        }\n      } catch (error) {\n        console.error('Failed to check availability:', error);\n        this.$message.error(this.$t('common.error'));\n        this.timeConflict = true;\n      }\n    },\n    submitForm() {\n      this.$refs.reservationForm.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        if (this.timeConflict) {\n          this.$message.error(this.$t('reservation.timeConflict'));\n          return false;\n        }\n        this.submitting = true;\n        try {\n          // 准备开始日期和结束日期\n          const startDate = this.formatDate(this.form.dateRange[0]);\n          const endDate = this.formatDate(this.form.dateRange[1]);\n\n          // 准备开始时间和结束时间\n          const startTime = this.formatTime(this.form.startTime);\n          const endTime = this.formatTime(this.form.endTime);\n          const recurringReservationData = {\n            equipment_id: this.equipment.id,\n            pattern_type: this.form.patternType,\n            days_of_week: this.form.patternType === 'weekly' ? this.form.daysOfWeek : undefined,\n            days_of_month: this.form.patternType === 'monthly' ? this.form.daysOfMonth : undefined,\n            start_date: startDate,\n            end_date: endDate,\n            start_time: startTime,\n            end_time: endTime,\n            user_name: this.form.userName,\n            user_department: this.form.userDepartment,\n            user_contact: this.form.userContact,\n            user_email: this.form.userEmail || undefined,\n            purpose: this.form.purpose || undefined,\n            lang: this.$i18n.locale\n          };\n          const response = await recurringReservationApi.createRecurringReservation(recurringReservationData);\n          if (response.data.success) {\n            // 保存循环预约ID\n            this.recurringReservationId = response.data.data.id;\n\n            // 保存预约码\n            this.reservationCode = response.data.data.reservation_code || '';\n            console.log(\"获取的循环预约信息:\", response.data.data);\n            console.log(\"设置的预约码:\", this.reservationCode);\n\n            // 显示成功对话框\n            this.successDialogVisible = true;\n          } else {\n            this.$message.error(response.data.message || this.$t('common.error'));\n          }\n        } catch (error) {\n          console.error('Failed to create recurring reservation:', error);\n          this.$message.error(this.$t('common.error'));\n        } finally {\n          this.submitting = false;\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.reservationForm.resetFields();\n      this.timeConflict = false;\n    },\n    viewEquipment() {\n      this.$router.push(`/equipment/${this.equipment.id}`);\n    },\n    // 返回单次预约表单\n    backToSingleReservation() {\n      this.$router.push(`/equipment/${this.equipment.id}/reserve`);\n    },\n    closeSuccessDialog() {\n      this.successDialogVisible = false;\n      this.resetForm();\n      this.$router.push('/equipment');\n    },\n    // 格式化日期为 YYYY-MM-DD\n    formatDate(date) {\n      if (!date) return '';\n      const d = new Date(date);\n      const year = d.getFullYear();\n      const month = String(d.getMonth() + 1).padStart(2, '0');\n      const day = String(d.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    // 格式化时间为 HH:MM\n    formatTime(time) {\n      if (!time) return '';\n      const d = new Date(time);\n      const hours = String(d.getHours()).padStart(2, '0');\n      const minutes = String(d.getMinutes()).padStart(2, '0');\n      return `${hours}:${minutes}`;\n    },\n    // 获取模式类型文本\n    getPatternTypeText() {\n      const types = {\n        'daily': this.$t('reservation.daily'),\n        'weekly': this.$t('reservation.weekly'),\n        'monthly': this.$t('reservation.monthly')\n      };\n      return types[this.form.patternType] || this.form.patternType;\n    },\n    // 获取星期几文本\n    getWeekdaysText() {\n      if (!this.form.daysOfWeek || this.form.daysOfWeek.length === 0) return '';\n      const weekdays = [this.$t('reservation.sunday'), this.$t('reservation.monday'), this.$t('reservation.tuesday'), this.$t('reservation.wednesday'), this.$t('reservation.thursday'), this.$t('reservation.friday'), this.$t('reservation.saturday')];\n      return this.form.daysOfWeek.map(day => weekdays[day]).join(', ');\n    },\n    // 获取每月几号文本\n    getDaysOfMonthText() {\n      if (!this.form.daysOfMonth || this.form.daysOfMonth.length === 0) return '';\n      return this.form.daysOfMonth.sort((a, b) => a - b).join(', ');\n    },\n    // 获取完整的图片URL\n    getFullImageUrl(url) {\n      if (!url) return '';\n\n      // 如果已经是完整URL，直接返回\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        return url;\n      }\n\n      // 如果是相对路径，添加基础URL\n      if (url.startsWith('/')) {\n        return this.baseUrl + url;\n      }\n\n      // 其他情况，添加基础URL和斜杠\n      return this.baseUrl + '/' + url;\n    }\n  }\n};","map":{"version":3,"names":["equipmentApi","recurringReservationApi","axios","name","computed","baseUrl","defaults","baseURL","data","validateTime","rule","value","callback","Error","$t","form","startTime","endTime","start","Date","end","validateDateRange","validateDaysOfWeek","patternType","length","validateDaysOfMonth","validateEmail","emailRegex","test","loading","submitting","equipment","timeConflict","successDialogVisible","recurringReservationId","reservationCode","daysOfWeek","daysOfMonth","dateRange","userName","userDepartment","userContact","userEmail","purpose","rules","required","message","trigger","validator","min","max","dateRangePickerOptions","disabledDate","time","getTime","now","created","fetchEquipment","methods","equipmentId","$route","params","id","response","getEquipment","status","$message","warning","error","console","checkTimeAvailability","startDate","formatDate","endDate","getAvailability","available","includes","submitForm","$refs","reservationForm","validate","valid","formatTime","recurringReservationData","equipment_id","pattern_type","days_of_week","undefined","days_of_month","start_date","end_date","start_time","end_time","user_name","user_department","user_contact","user_email","lang","$i18n","locale","createRecurringReservation","success","reservation_code","log","resetForm","resetFields","viewEquipment","$router","push","backToSingleReservation","closeSuccessDialog","date","d","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","getPatternTypeText","types","getWeekdaysText","weekdays","map","join","getDaysOfMonthText","sort","a","b","getFullImageUrl","url","startsWith"],"sources":["src/views/reservation/RecurringReservationForm.vue"],"sourcesContent":["<template>\n  <div class=\"recurring-reservation-form\">\n    <div v-if=\"loading\" class=\"loading-container\">\n      <el-skeleton :rows=\"10\" animated />\n    </div>\n\n    <div v-else-if=\"!equipment\" class=\"error-container\">\n      <el-result\n        icon=\"error\"\n        :title=\"$t('error.errorMessage')\"\n        :sub-title=\"$t('equipment.notFound')\"\n      >\n        <template #extra>\n          <el-button type=\"primary\" @click=\"$router.push('/equipment')\">\n            {{ $t('equipment.list') }}\n          </el-button>\n        </template>\n      </el-result>\n    </div>\n\n    <div v-else>\n      <!-- 返回按钮 -->\n      <div class=\"back-link\">\n        <el-button icon=\"el-icon-arrow-left\" @click=\"$router.push(`/equipment/${equipment.id}`)\">\n          {{ $t('common.back') }}\n        </el-button>\n        \n        <!-- 添加返回单次预约按钮 -->\n        <el-button \n          type=\"primary\" \n          icon=\"el-icon-refresh-left\" \n          @click=\"backToSingleReservation\" \n          class=\"back-to-single\">\n          {{ $t('reservation.singleReservation') }}\n        </el-button>\n      </div>\n\n      <h1 class=\"page-title\">{{ $t('reservation.recurringForm') }}</h1>\n\n      <!-- 设备信息 -->\n      <el-card shadow=\"never\" class=\"equipment-card\">\n        <div class=\"equipment-info\">\n          <div class=\"equipment-image-container\">\n            <img\n              :src=\"equipment.image_path ? getFullImageUrl(equipment.image_path) : require('@/assets/upload.png')\"\n              :alt=\"equipment.name\"\n              class=\"equipment-image\"\n            />\n          </div>\n\n          <div class=\"equipment-details\">\n            <h2 class=\"equipment-name\">{{ equipment.name }}</h2>\n            <p class=\"equipment-category\">{{ equipment.category }}</p>\n\n            <div v-if=\"equipment.location\" class=\"equipment-location\">\n              <i class=\"el-icon-location\"></i> {{ equipment.location }}\n            </div>\n\n            <el-tag\n              :type=\"equipment.status === 'available' ? 'success' : 'warning'\"\n              size=\"medium\"\n              style=\"font-weight: bold; padding: 0px 10px; font-size: 14px;\"\n            >\n              {{ equipment.status === 'available' ? $t('equipment.available') : $t('equipment.maintenance') }}\n            </el-tag>\n          </div>\n        </div>\n      </el-card>\n\n      <!-- 预定表单 -->\n      <el-card shadow=\"never\" class=\"form-card\">\n        <el-form\n          ref=\"reservationForm\"\n          :model=\"form\"\n          :rules=\"rules\"\n          label-position=\"top\"\n          size=\"medium\"\n        >\n          <!-- 循环模式选择 -->\n          <el-divider>{{ $t('reservation.recurringPattern') }}</el-divider>\n\n          <el-form-item :label=\"$t('reservation.patternType')\" prop=\"patternType\">\n            <el-radio-group v-model=\"form.patternType\">\n              <el-radio label=\"daily\">{{ $t('reservation.daily') }}</el-radio>\n              <el-radio label=\"weekly\">{{ $t('reservation.weekly') }}</el-radio>\n              <el-radio label=\"monthly\">{{ $t('reservation.monthly') }}</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <!-- 每周几 (仅在每周模式下显示) -->\n          <el-form-item \n            v-if=\"form.patternType === 'weekly'\" \n            :label=\"$t('reservation.daysOfWeek')\" \n            prop=\"daysOfWeek\"\n          >\n            <el-checkbox-group v-model=\"form.daysOfWeek\">\n              <el-checkbox :label=\"0\">{{ $t('reservation.sunday') }}</el-checkbox>\n              <el-checkbox :label=\"1\">{{ $t('reservation.monday') }}</el-checkbox>\n              <el-checkbox :label=\"2\">{{ $t('reservation.tuesday') }}</el-checkbox>\n              <el-checkbox :label=\"3\">{{ $t('reservation.wednesday') }}</el-checkbox>\n              <el-checkbox :label=\"4\">{{ $t('reservation.thursday') }}</el-checkbox>\n              <el-checkbox :label=\"5\">{{ $t('reservation.friday') }}</el-checkbox>\n              <el-checkbox :label=\"6\">{{ $t('reservation.saturday') }}</el-checkbox>\n            </el-checkbox-group>\n          </el-form-item>\n\n          <!-- 每月几号 (仅在每月模式下显示) -->\n          <el-form-item \n            v-if=\"form.patternType === 'monthly'\" \n            :label=\"$t('reservation.daysOfMonth')\" \n            prop=\"daysOfMonth\"\n          >\n            <el-select \n              v-model=\"form.daysOfMonth\" \n              multiple \n              :placeholder=\"$t('reservation.selectDaysOfMonth')\"\n              style=\"width: 100%\"\n            >\n              <el-option \n                v-for=\"day in 31\" \n                :key=\"day\" \n                :label=\"day\" \n                :value=\"day\"\n              ></el-option>\n            </el-select>\n          </el-form-item>\n\n          <!-- 日期范围选择 -->\n          <el-form-item :label=\"$t('reservation.dateRange')\" prop=\"dateRange\">\n            <el-date-picker\n              v-model=\"form.dateRange\"\n              type=\"daterange\"\n              range-separator=\"→\"\n              :start-placeholder=\"$t('reservation.startDate')\"\n              :end-placeholder=\"$t('reservation.endDate')\"\n              style=\"width: 100%\"\n              :picker-options=\"dateRangePickerOptions\"\n              @change=\"checkTimeAvailability\"\n            ></el-date-picker>\n          </el-form-item>\n\n          <!-- 时间选择 -->\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.startTime')\" prop=\"startTime\">\n                <el-time-picker\n                  v-model=\"form.startTime\"\n                  :placeholder=\"$t('reservation.startTime')\"\n                  style=\"width: 100%\"\n                  format=\"HH:mm\"\n                  @change=\"checkTimeAvailability\"\n                ></el-time-picker>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.endTime')\" prop=\"endTime\">\n                <el-time-picker\n                  v-model=\"form.endTime\"\n                  :placeholder=\"$t('reservation.endTime')\"\n                  style=\"width: 100%\"\n                  format=\"HH:mm\"\n                  @change=\"checkTimeAvailability\"\n                ></el-time-picker>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <div v-if=\"timeConflict\" class=\"time-conflict-warning\">\n            <el-alert\n              :title=\"$t('reservation.timeConflict')\"\n              type=\"error\"\n              :closable=\"false\"\n              show-icon\n            ></el-alert>\n          </div>\n\n          <!-- 用户信息 -->\n          <el-divider>{{ $t('common.userInfo') }}</el-divider>\n\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userName')\" prop=\"userName\">\n                <el-input v-model=\"form.userName\"></el-input>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userDepartment')\" prop=\"userDepartment\">\n                <el-input v-model=\"form.userDepartment\"></el-input>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userContact')\" prop=\"userContact\">\n                <el-input v-model=\"form.userContact\"></el-input>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userEmail')\" prop=\"userEmail\">\n                <el-input v-model=\"form.userEmail\" type=\"email\"></el-input>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <el-form-item :label=\"$t('reservation.purpose')\" prop=\"purpose\">\n            <el-input\n              v-model=\"form.purpose\"\n              type=\"textarea\"\n              :rows=\"3\"\n            ></el-input>\n          </el-form-item>\n\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              :loading=\"submitting\"\n              @click=\"submitForm\"\n              :disabled=\"timeConflict\"\n              icon=\"el-icon-plus\"\n            >\n              {{ $t('reservation.createRecurringReservation') }}\n            </el-button>\n            <el-button @click=\"resetForm\" icon=\"el-icon-refresh-left\">{{ $t('common.reset') }}</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n\n      <!-- 预定成功对话框 -->\n      <el-dialog\n        :title=\"$t('reservation.createSuccess')\"\n        :visible.sync=\"successDialogVisible\"\n        width=\"500px\"\n        :close-on-click-modal=\"false\"\n        :close-on-press-escape=\"false\"\n        :show-close=\"false\"\n      >\n        <div class=\"success-content\">\n          <i class=\"el-icon-success success-icon\"></i>\n\n          <p class=\"success-message\">{{ $t('reservation.saveReservationCode') }}</p>\n\n          <!-- 预定码单独显示在最上方 -->\n          <div class=\"reservation-code-container\">\n            <span class=\"reservation-code\">{{ reservationCode || '无预约码' }}</span>\n          </div>\n\n          <div class=\"reservation-summary\">\n            <p><strong>{{ $t('reservation.patternType') }}:</strong> {{ getPatternTypeText() }}</p>\n            <p v-if=\"form.patternType === 'weekly'\">\n              <strong>{{ $t('reservation.daysOfWeek') }}:</strong> {{ getWeekdaysText() }}\n            </p>\n            <p v-if=\"form.patternType === 'monthly'\">\n              <strong>{{ $t('reservation.daysOfMonth') }}:</strong> {{ getDaysOfMonthText() }}\n            </p>\n            <p>\n              <strong>{{ $t('reservation.dateRange') }}:</strong> \n              {{ formatDate(form.dateRange[0]) }} → {{ formatDate(form.dateRange[1]) }}\n            </p>\n            <p>\n              <strong>{{ $t('reservation.timeRange') }}:</strong> \n              {{ formatTime(form.startTime) }} → {{ formatTime(form.endTime) }}\n            </p>\n          </div>\n\n          <p class=\"reservation-tip\">{{ $t('reservation.recurringReservationTip') }}</p>\n\n          <div class=\"dialog-footer\">\n            <el-button @click=\"viewEquipment\">{{ $t('equipment.viewDetail') }}</el-button>\n            <el-button type=\"primary\" @click=\"closeSuccessDialog\">{{ $t('common.confirm') }}</el-button>\n          </div>\n        </div>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { equipmentApi, recurringReservationApi } from '@/api'\nimport axios from 'axios'\n\nexport default {\n  name: 'RecurringReservationForm',\n\n  computed: {\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n\n  data() {\n    // 表单验证规则\n    const validateTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(this.$t('reservation.requiredField')))\n      } else if (this.form.startTime && this.form.endTime) {\n        const start = new Date(this.form.startTime)\n        const end = new Date(this.form.endTime)\n        if (start >= end) {\n          callback(new Error(this.$t('reservation.invalidTime')))\n        } else {\n          callback()\n        }\n      } else {\n        callback()\n      }\n    }\n\n    const validateDateRange = (rule, value, callback) => {\n      if (!value || !value[0] || !value[1]) {\n        callback(new Error(this.$t('reservation.requiredField')))\n      } else {\n        callback()\n      }\n    }\n\n    const validateDaysOfWeek = (rule, value, callback) => {\n      if (this.form.patternType === 'weekly' && (!value || value.length === 0)) {\n        callback(new Error(this.$t('reservation.selectDaysOfWeek')))\n      } else {\n        callback()\n      }\n    }\n\n    const validateDaysOfMonth = (rule, value, callback) => {\n      if (this.form.patternType === 'monthly' && (!value || value.length === 0)) {\n        callback(new Error(this.$t('reservation.selectDaysOfMonth')))\n      } else {\n        callback()\n      }\n    }\n\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback()\n      } else {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        if (!emailRegex.test(value)) {\n          callback(new Error(this.$t('reservation.emailFormat')))\n        } else {\n          callback()\n        }\n      }\n    }\n\n    return {\n      loading: false,\n      submitting: false,\n      equipment: null,\n      timeConflict: false,\n      successDialogVisible: false,\n      recurringReservationId: null,\n      reservationCode: '',\n\n      form: {\n        patternType: 'weekly',\n        daysOfWeek: [],\n        daysOfMonth: [],\n        dateRange: [],\n        startTime: '',\n        endTime: '',\n        userName: '',\n        userDepartment: '',\n        userContact: '',\n        userEmail: '',\n        purpose: ''\n      },\n\n      rules: {\n        patternType: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'change' }\n        ],\n        daysOfWeek: [\n          { validator: validateDaysOfWeek, trigger: 'change' }\n        ],\n        daysOfMonth: [\n          { validator: validateDaysOfMonth, trigger: 'change' }\n        ],\n        dateRange: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'change' },\n          { validator: validateDateRange, trigger: 'change' }\n        ],\n        startTime: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'change' },\n          { validator: validateTime, trigger: 'change' }\n        ],\n        endTime: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'change' },\n          { validator: validateTime, trigger: 'change' }\n        ],\n        userName: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { min: 2, max: 50, message: this.$t('common.lengthLimit', { min: 2, max: 50 }), trigger: 'blur' }\n        ],\n        userDepartment: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { min: 2, max: 50, message: this.$t('common.lengthLimit', { min: 2, max: 50 }), trigger: 'blur' }\n        ],\n        userContact: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { min: 5, max: 50, message: this.$t('common.lengthLimit', { min: 5, max: 50 }), trigger: 'blur' }\n        ],\n        userEmail: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { validator: validateEmail, trigger: 'blur' }\n        ],\n        purpose: [\n          { max: 500, message: this.$t('common.lengthLimit', { max: 500 }), trigger: 'blur' }\n        ]\n      },\n\n      dateRangePickerOptions: {\n        disabledDate(time) {\n          return time.getTime() < Date.now() - 8.64e7 // 不能选择过去的日期\n        }\n      }\n    }\n  },\n\n  created() {\n    this.fetchEquipment()\n  },\n\n  methods: {\n    async fetchEquipment() {\n      this.loading = true\n      try {\n        const equipmentId = this.$route.params.id\n        const response = await equipmentApi.getEquipment(equipmentId)\n        this.equipment = response.data\n\n        if (this.equipment.status !== 'available') {\n          this.$message.warning(this.$t('equipment.notAvailable'))\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment:', error)\n        this.$message.error(this.$t('common.error'))\n        this.equipment = null\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async checkTimeAvailability() {\n      if (!this.form.dateRange || !this.form.dateRange[0] || !this.form.dateRange[1] || !this.form.startTime || !this.form.endTime) {\n        this.timeConflict = false\n        return\n      }\n\n      const start = new Date(this.form.startTime)\n      const end = new Date(this.form.endTime)\n      if (start >= end) {\n        this.timeConflict = true\n        return\n      }\n\n      // 对于循环预约，我们只检查第一天的可用性作为示例\n      try {\n        const equipmentId = this.equipment.id\n        const startDate = this.formatDate(this.form.dateRange[0])\n        const endDate = this.formatDate(this.form.dateRange[0]) // 只检查第一天\n\n        const response = await equipmentApi.getAvailability(equipmentId, startDate, endDate)\n\n        // 检查是否有冲突\n        this.timeConflict = response.data.available.includes(false)\n        \n        if (this.timeConflict) {\n          this.$message.warning(this.$t('reservation.timeConflictWarning'))\n        }\n      } catch (error) {\n        console.error('Failed to check availability:', error)\n        this.$message.error(this.$t('common.error'))\n        this.timeConflict = true\n      }\n    },\n\n    submitForm() {\n      this.$refs.reservationForm.validate(async (valid) => {\n        if (!valid) {\n          return false\n        }\n\n        if (this.timeConflict) {\n          this.$message.error(this.$t('reservation.timeConflict'))\n          return false\n        }\n\n        this.submitting = true\n\n        try {\n          // 准备开始日期和结束日期\n          const startDate = this.formatDate(this.form.dateRange[0])\n          const endDate = this.formatDate(this.form.dateRange[1])\n          \n          // 准备开始时间和结束时间\n          const startTime = this.formatTime(this.form.startTime)\n          const endTime = this.formatTime(this.form.endTime)\n\n          const recurringReservationData = {\n            equipment_id: this.equipment.id,\n            pattern_type: this.form.patternType,\n            days_of_week: this.form.patternType === 'weekly' ? this.form.daysOfWeek : undefined,\n            days_of_month: this.form.patternType === 'monthly' ? this.form.daysOfMonth : undefined,\n            start_date: startDate,\n            end_date: endDate,\n            start_time: startTime,\n            end_time: endTime,\n            user_name: this.form.userName,\n            user_department: this.form.userDepartment,\n            user_contact: this.form.userContact,\n            user_email: this.form.userEmail || undefined,\n            purpose: this.form.purpose || undefined,\n            lang: this.$i18n.locale\n          }\n\n          const response = await recurringReservationApi.createRecurringReservation(recurringReservationData)\n\n          if (response.data.success) {\n            // 保存循环预约ID\n            this.recurringReservationId = response.data.data.id\n            \n            // 保存预约码\n            this.reservationCode = response.data.data.reservation_code || ''\n            \n            console.log(\"获取的循环预约信息:\", response.data.data)\n            console.log(\"设置的预约码:\", this.reservationCode)\n            \n            // 显示成功对话框\n            this.successDialogVisible = true\n          } else {\n            this.$message.error(response.data.message || this.$t('common.error'))\n          }\n        } catch (error) {\n          console.error('Failed to create recurring reservation:', error)\n          this.$message.error(this.$t('common.error'))\n        } finally {\n          this.submitting = false\n        }\n      })\n    },\n\n    resetForm() {\n      this.$refs.reservationForm.resetFields()\n      this.timeConflict = false\n    },\n\n    viewEquipment() {\n      this.$router.push(`/equipment/${this.equipment.id}`)\n    },\n\n    // 返回单次预约表单\n    backToSingleReservation() {\n      this.$router.push(`/equipment/${this.equipment.id}/reserve`)\n    },\n\n    closeSuccessDialog() {\n      this.successDialogVisible = false\n      this.resetForm()\n      this.$router.push('/equipment')\n    },\n\n    // 格式化日期为 YYYY-MM-DD\n    formatDate(date) {\n      if (!date) return ''\n      \n      const d = new Date(date)\n      const year = d.getFullYear()\n      const month = String(d.getMonth() + 1).padStart(2, '0')\n      const day = String(d.getDate()).padStart(2, '0')\n      \n      return `${year}-${month}-${day}`\n    },\n\n    // 格式化时间为 HH:MM\n    formatTime(time) {\n      if (!time) return ''\n      \n      const d = new Date(time)\n      const hours = String(d.getHours()).padStart(2, '0')\n      const minutes = String(d.getMinutes()).padStart(2, '0')\n      \n      return `${hours}:${minutes}`\n    },\n\n    // 获取模式类型文本\n    getPatternTypeText() {\n      const types = {\n        'daily': this.$t('reservation.daily'),\n        'weekly': this.$t('reservation.weekly'),\n        'monthly': this.$t('reservation.monthly')\n      }\n      return types[this.form.patternType] || this.form.patternType\n    },\n\n    // 获取星期几文本\n    getWeekdaysText() {\n      if (!this.form.daysOfWeek || this.form.daysOfWeek.length === 0) return ''\n      \n      const weekdays = [\n        this.$t('reservation.sunday'),\n        this.$t('reservation.monday'),\n        this.$t('reservation.tuesday'),\n        this.$t('reservation.wednesday'),\n        this.$t('reservation.thursday'),\n        this.$t('reservation.friday'),\n        this.$t('reservation.saturday')\n      ]\n      \n      return this.form.daysOfWeek.map(day => weekdays[day]).join(', ')\n    },\n\n    // 获取每月几号文本\n    getDaysOfMonthText() {\n      if (!this.form.daysOfMonth || this.form.daysOfMonth.length === 0) return ''\n      \n      return this.form.daysOfMonth.sort((a, b) => a - b).join(', ')\n    },\n\n    // 获取完整的图片URL\n    getFullImageUrl(url) {\n      if (!url) return '';\n\n      // 如果已经是完整URL，直接返回\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        return url;\n      }\n\n      // 如果是相对路径，添加基础URL\n      if (url.startsWith('/')) {\n        return this.baseUrl + url;\n      }\n\n      // 其他情况，添加基础URL和斜杠\n      return this.baseUrl + '/' + url;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.recurring-reservation-form {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.back-link {\n  margin-bottom: 20px;\n  display: flex;\n  align-items: center;\n}\n\n.back-to-single {\n  margin-left: 10px;\n}\n\n.page-title {\n  margin-bottom: 20px;\n  font-size: 24px;\n  color: #303133;\n}\n\n.equipment-card {\n  margin-bottom: 20px;\n}\n\n.equipment-info {\n  display: flex;\n  align-items: center;\n}\n\n.equipment-image-container {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  background-color: #f5f7fa;\n  border-radius: 4px;\n  margin-right: 20px;\n}\n\n.equipment-image {\n  max-height: 100%;\n  max-width: 100%;\n  object-fit: contain;\n}\n\n.equipment-details {\n  flex: 1;\n}\n\n.equipment-name {\n  margin: 0 0 5px;\n  font-size: 18px;\n  color: #303133;\n}\n\n.equipment-category {\n  margin: 0 0 10px;\n  font-size: 14px;\n  color: #909399;\n}\n\n.equipment-location {\n  margin-bottom: 10px;\n  font-size: 14px;\n  color: #606266;\n}\n\n.form-card {\n  margin-bottom: 20px;\n}\n\n.time-conflict-warning {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 40px 0;\n}\n\n.error-container {\n  padding: 40px 0;\n  text-align: center;\n}\n\n.success-content {\n  text-align: center;\n}\n\n.success-icon {\n  font-size: 72px;\n  color: #67C23A;\n  margin-bottom: 20px;\n}\n\n.success-message {\n  font-size: 18px;\n  color: #303133;\n  margin-bottom: 20px;\n}\n\n.reservation-summary {\n  text-align: left;\n  background-color: #f5f7fa;\n  padding: 15px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n}\n\n.reservation-summary p {\n  margin: 5px 0;\n}\n\n.reservation-tip {\n  color: #909399;\n  margin-bottom: 20px;\n}\n\n.dialog-footer {\n  margin-top: 20px;\n}\n\n@media (max-width: 768px) {\n  .equipment-info {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .equipment-image-container {\n    margin-right: 0;\n    margin-bottom: 20px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}