{"ast":null,"code":"import router from './index';\nimport store from '@/store';\nimport { Message } from 'element-ui';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\n\n// 配置NProgress\nNProgress.configure({\n  showSpinner: false\n});\n\n// 白名单路由（不需要登录即可访问）\nconst whiteList = ['/', '/equipment', '/equipment/:id', '/reservation/query', '/reservation/:code', '/admin/login', '/404'];\n\n// 更新页面标题的函数\nexport const updatePageTitle = () => {\n  // 获取当前路由\n  const currentRoute = router.currentRoute;\n  if (!currentRoute) return;\n  let pageTitle = currentRoute.meta.title || '';\n  let appName = 'HTNIA设备预定系统'; // 默认值\n\n  // 如果标题是i18n键值（包含点号），则使用i18n进行翻译\n  if (pageTitle && pageTitle.includes('.')) {\n    try {\n      const i18nTitle = router.app.$i18n.t(pageTitle);\n      if (i18nTitle !== pageTitle) {\n        // 如果翻译成功（结果不等于原键值）\n        pageTitle = i18nTitle;\n      }\n    } catch (e) {\n      console.error('Failed to translate page title:', e);\n    }\n  }\n\n  // 尝试获取国际化的应用名称\n  try {\n    if (router.app && router.app.$i18n) {\n      appName = router.app.$i18n.t('common.fullAppName');\n    }\n  } catch (e) {\n    console.error('Failed to translate app name:', e);\n  }\n  document.title = pageTitle ? `${pageTitle} - ${appName}` : appName;\n};\n\n// 路由前置守卫\nrouter.beforeEach((to, from, next) => {\n  // 开始进度条\n  NProgress.start();\n\n  // 获取用户登录状态\n  const hasToken = store.getters.isLoggedIn;\n\n  // 判断是否需要登录权限\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n\n  // 如果是登录页面且已登录，直接跳转到首页\n  if (to.path === '/admin/login' && hasToken) {\n    next('/admin/dashboard');\n    NProgress.done();\n    return;\n  }\n\n  // 如果需要登录权限但未登录，跳转到登录页\n  if (requiresAuth && !hasToken) {\n    // 如果已经在登录页，直接放行，避免死循环\n    if (to.path === '/admin/login') {\n      next();\n      NProgress.done();\n      return;\n    }\n    next(`/admin/login?redirect=${to.path}`);\n    NProgress.done();\n    return;\n  }\n\n  // 其他情况直接放行\n  next();\n});\n\n// 路由后置守卫\nrouter.afterEach(() => {\n  // 结束进度条\n  NProgress.done();\n\n  // 设置页面标题 - 在路由完成后设置，确保i18n已初始化\n  setTimeout(() => {\n    updatePageTitle();\n  }, 0);\n});\nexport default router;","map":{"version":3,"names":["router","store","Message","NProgress","configure","showSpinner","whiteList","updatePageTitle","currentRoute","pageTitle","meta","title","appName","includes","i18nTitle","app","$i18n","t","e","console","error","document","beforeEach","to","from","next","start","hasToken","getters","isLoggedIn","requiresAuth","matched","some","record","path","done","afterEach","setTimeout"],"sources":["D:/Equipment-Reservation-System-main/frontend/src/router/permission.js"],"sourcesContent":["import router from './index'\nimport store from '@/store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\n// 配置NProgress\nNProgress.configure({ showSpinner: false })\n\n// 白名单路由（不需要登录即可访问）\nconst whiteList = [\n  '/',\n  '/equipment',\n  '/equipment/:id',\n  '/reservation/query',\n  '/reservation/:code',\n  '/admin/login',\n  '/404'\n]\n\n// 更新页面标题的函数\nexport const updatePageTitle = () => {\n  // 获取当前路由\n  const currentRoute = router.currentRoute\n  if (!currentRoute) return\n\n  let pageTitle = currentRoute.meta.title || ''\n  let appName = 'HTNIA设备预定系统' // 默认值\n\n  // 如果标题是i18n键值（包含点号），则使用i18n进行翻译\n  if (pageTitle && pageTitle.includes('.')) {\n    try {\n      const i18nTitle = router.app.$i18n.t(pageTitle)\n      if (i18nTitle !== pageTitle) { // 如果翻译成功（结果不等于原键值）\n        pageTitle = i18nTitle\n      }\n    } catch (e) {\n      console.error('Failed to translate page title:', e)\n    }\n  }\n\n  // 尝试获取国际化的应用名称\n  try {\n    if (router.app && router.app.$i18n) {\n      appName = router.app.$i18n.t('common.fullAppName')\n    }\n  } catch (e) {\n    console.error('Failed to translate app name:', e)\n  }\n\n  document.title = pageTitle ? `${pageTitle} - ${appName}` : appName\n}\n\n// 路由前置守卫\nrouter.beforeEach((to, from, next) => {\n  // 开始进度条\n  NProgress.start()\n\n  // 获取用户登录状态\n  const hasToken = store.getters.isLoggedIn\n\n  // 判断是否需要登录权限\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth)\n\n  // 如果是登录页面且已登录，直接跳转到首页\n  if (to.path === '/admin/login' && hasToken) {\n    next('/admin/dashboard')\n    NProgress.done()\n    return\n  }\n\n  // 如果需要登录权限但未登录，跳转到登录页\n  if (requiresAuth && !hasToken) {\n    // 如果已经在登录页，直接放行，避免死循环\n    if (to.path === '/admin/login') {\n      next()\n      NProgress.done()\n      return\n    }\n    next(`/admin/login?redirect=${to.path}`)\n    NProgress.done()\n    return\n  }\n\n  // 其他情况直接放行\n  next()\n})\n\n// 路由后置守卫\nrouter.afterEach(() => {\n  // 结束进度条\n  NProgress.done()\n\n  // 设置页面标题 - 在路由完成后设置，确保i18n已初始化\n  setTimeout(() => {\n    updatePageTitle()\n  }, 0)\n})\n\nexport default router\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}