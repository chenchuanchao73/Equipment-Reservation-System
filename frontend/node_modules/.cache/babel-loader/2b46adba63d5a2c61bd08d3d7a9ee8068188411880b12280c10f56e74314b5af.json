{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport axios from 'axios';\nexport default {\n  name: 'RichTextEditor',\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    showTip: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      content: this.value,\n      editorOptions: {\n        modules: {\n          toolbar: {\n            container: [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n              'header': 1\n            }, {\n              'header': 2\n            }], [{\n              'list': 'ordered'\n            }, {\n              'list': 'bullet'\n            }], [{\n              'script': 'sub'\n            }, {\n              'script': 'super'\n            }], [{\n              'indent': '-1'\n            }, {\n              'indent': '+1'\n            }], [{\n              'direction': 'rtl'\n            }], [{\n              'size': ['small', false, 'large', 'huge']\n            }], [{\n              'header': [1, 2, 3, 4, 5, 6, false]\n            }], [{\n              'color': []\n            }, {\n              'background': []\n            }], [{\n              'font': []\n            }], [{\n              'align': []\n            }], ['clean'], ['link', 'image', 'video']],\n            handlers: {\n              'image': this.imageHandler\n            }\n          }\n        },\n        placeholder: this.placeholder,\n        theme: 'snow'\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['getToken'])\n  },\n  watch: {\n    value(newVal) {\n      if (newVal !== this.content) {\n        this.content = newVal;\n      }\n    }\n  },\n  methods: {\n    onChange() {\n      this.$emit('input', this.content);\n      this.$emit('change', this.content);\n    },\n    imageHandler() {\n      const input = document.createElement('input');\n      input.setAttribute('type', 'file');\n      input.setAttribute('accept', 'image/*');\n      input.click();\n      input.onchange = async () => {\n        const file = input.files[0];\n        if (!file) return;\n\n        // 检查文件类型\n        if (!file.type.startsWith('image/')) {\n          this.$message.error(this.$t('admin.imageTypeError'));\n          return;\n        }\n\n        // 检查文件大小（限制为5MB）\n        if (file.size > 5 * 1024 * 1024) {\n          this.$message.error(this.$t('admin.imageSizeError'));\n          return;\n        }\n        try {\n          // 创建FormData\n          const formData = new FormData();\n          formData.append('file', file);\n\n          // 显示上传中提示\n          const loading = this.$loading({\n            lock: true,\n            text: this.$t('common.uploading'),\n            spinner: 'el-icon-loading',\n            background: 'rgba(0, 0, 0, 0.7)'\n          });\n\n          // 发送上传请求\n          const response = await axios.post('/api/upload/editor-image', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              'Authorization': `Bearer ${this.getToken}`\n            }\n          });\n\n          // 关闭上传中提示\n          loading.close();\n\n          // 获取图片URL\n          const url = response.data.url;\n\n          // 获取编辑器实例\n          const quill = this.$refs.quillEditor.quill;\n\n          // 获取当前光标位置\n          const range = quill.getSelection();\n\n          // 在光标位置插入图片\n          quill.insertEmbed(range.index, 'image', url);\n\n          // 将光标移动到图片后面\n          quill.setSelection(range.index + 1);\n\n          // 显示上传成功提示\n          this.$message.success(this.$t('admin.imageUploadSuccess'));\n        } catch (error) {\n          console.error('上传图片失败:', error);\n          this.$message.error(this.$t('admin.imageUploadError'));\n        }\n      };\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}