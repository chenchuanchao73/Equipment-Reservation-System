{"ast":null,"code":"import axios from 'axios';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'SystemLogs',\n  data() {\n    return {\n      logList: [],\n      logTotal: 0,\n      logPage: 1,\n      logPageSize: 10,\n      loading: false,\n      logFilter: {\n        user_type: '',\n        action: '',\n        module: '',\n        status: ''\n      },\n      dateRange: [],\n      logDetailsDialogVisible: false,\n      selectedLog: null,\n      clearLogsDialogVisible: false,\n      clearLogsForm: {\n        days: null,\n        user_type: '',\n        module: '',\n        status: ''\n      },\n      clearingLogs: false,\n      // 响应式布局相关\n      isMobile: window.innerWidth <= 768\n    };\n  },\n  computed: {\n    ...mapGetters(['isSuperAdmin']),\n    // 根据屏幕宽度动态调整分页组件布局\n    paginationLayout() {\n      return this.isMobile ? 'prev, next' : 'prev, pager, next, jumper';\n    }\n  },\n  created() {\n    this.fetchLogs();\n    // 添加窗口大小变化的监听器\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeDestroy() {\n    // 移除窗口大小变化的监听器\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    async fetchLogs() {\n      try {\n        this.loading = true;\n        const params = {\n          skip: (this.logPage - 1) * this.logPageSize,\n          limit: this.logPageSize,\n          user_type: this.logFilter.user_type,\n          action: this.logFilter.action,\n          module: this.logFilter.module,\n          status: this.logFilter.status\n        };\n\n        // 添加日期范围\n        if (this.dateRange && this.dateRange.length === 2) {\n          params.from_date = this.dateRange[0];\n          params.to_date = this.dateRange[1];\n        }\n        const res = await axios.get('/api/system/logs', {\n          params\n        });\n        this.logList = res.data.items;\n        this.logTotal = res.data.total;\n      } catch (e) {\n        this.$message.error('获取日志失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    clearLogFilter() {\n      this.logFilter = {\n        user_type: '',\n        action: '',\n        module: '',\n        status: ''\n      };\n      this.dateRange = [];\n      this.logPage = 1;\n      this.fetchLogs();\n    },\n    formatDate(val) {\n      if (!val) return '';\n      // 将日期字符串拆分并手动构建Date对象，避免自动时区转换\n      try {\n        // 假设输入格式为 \"YYYY-MM-DD HH:MM:SS\" 或 ISO格式\n        let dateTimeStr = val;\n        // 如果是ISO格式带T和Z，则去掉\n        if (typeof val === 'string' && val.includes('T')) {\n          dateTimeStr = val.replace('T', ' ').replace('Z', '');\n        }\n\n        // 拆分日期和时间\n        const [datePart, timePart] = dateTimeStr.split(' ');\n        const [year, month, day] = datePart.split('-').map(Number);\n        const [hour, minute, second] = (timePart || '00:00:00').split(':').map(Number);\n\n        // 构建日期字符串\n        return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')} ${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\n      } catch (e) {\n        console.error('日期格式化错误:', e);\n      }\n\n      // 如果解析失败，回退到简单方法\n      const d = new Date(val);\n      return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')} ${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;\n    },\n    showLogDetails(log) {\n      this.selectedLog = log;\n      this.logDetailsDialogVisible = true;\n    },\n    formatDetails(details) {\n      if (!details) return '';\n      try {\n        // 如果是JSON字符串，解析并格式化\n        const obj = typeof details === 'string' ? JSON.parse(details) : details;\n        return JSON.stringify(obj, null, 2);\n      } catch (e) {\n        return details;\n      }\n    },\n    getActionText(action) {\n      const actionMap = {\n        'view': '查看',\n        'create': '创建',\n        'update': '更新',\n        'delete': '删除',\n        'login': '登录',\n        'logout': '登出',\n        'reserve': '预约',\n        'cancel': '取消预约'\n      };\n      return actionMap[action] || action;\n    },\n    getModuleText(module) {\n      const moduleMap = {\n        'equipment': '设备',\n        'reservation': '预约',\n        'admin': '管理员',\n        'system': '系统'\n      };\n      return moduleMap[module] || module;\n    },\n    // 处理窗口大小变化\n    handleResize() {\n      this.isMobile = window.innerWidth <= 768;\n    },\n    showClearLogsDialog() {\n      this.clearLogsDialogVisible = true;\n    },\n    async clearLogs() {\n      try {\n        this.clearingLogs = true;\n\n        // 构建查询参数\n        const params = {};\n        if (this.clearLogsForm.days) {\n          params.days = this.clearLogsForm.days;\n        }\n        if (this.clearLogsForm.user_type) {\n          params.user_type = this.clearLogsForm.user_type;\n        }\n        if (this.clearLogsForm.module) {\n          params.module = this.clearLogsForm.module;\n        }\n        if (this.clearLogsForm.status) {\n          params.status = this.clearLogsForm.status;\n        }\n\n        // 发送请求\n        const res = await axios.delete('/api/system/logs', {\n          params\n        });\n\n        // 显示成功消息\n        this.$message.success(res.data.message);\n\n        // 关闭对话框\n        this.clearLogsDialogVisible = false;\n\n        // 重新获取日志列表\n        this.fetchLogs();\n      } catch (e) {\n        this.$message.error('清理日志失败: ' + (e.response?.data?.detail || e.message));\n      } finally {\n        this.clearingLogs = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","mapGetters","name","data","logList","logTotal","logPage","logPageSize","loading","logFilter","user_type","action","module","status","dateRange","logDetailsDialogVisible","selectedLog","clearLogsDialogVisible","clearLogsForm","days","clearingLogs","isMobile","window","innerWidth","computed","paginationLayout","created","fetchLogs","addEventListener","handleResize","beforeDestroy","removeEventListener","methods","params","skip","limit","length","from_date","to_date","res","get","items","total","e","$message","error","clearLogFilter","formatDate","val","dateTimeStr","includes","replace","datePart","timePart","split","year","month","day","map","Number","hour","minute","second","String","padStart","console","d","Date","getFullYear","getMonth","getDate","getHours","getMinutes","showLogDetails","log","formatDetails","details","obj","JSON","parse","stringify","getActionText","actionMap","getModuleText","moduleMap","showClearLogsDialog","clearLogs","delete","success","message","response","detail"],"sources":["src/views/admin/SystemLogs.vue"],"sourcesContent":["<template>\n  <div class=\"system-logs\">\n    <el-form :inline=\"true\" size=\"small\" style=\"margin-bottom:10px;\">\n      <el-form-item label=\"用户类型\">\n        <el-select v-model=\"logFilter.user_type\" clearable placeholder=\"全部\">\n          <el-option label=\"管理员\" value=\"admin\"/>\n          <el-option label=\"普通用户\" value=\"user\"/>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"操作类型\">\n        <el-select v-model=\"logFilter.action\" clearable placeholder=\"全部\">\n          <el-option label=\"查看\" value=\"view\"/>\n          <el-option label=\"创建\" value=\"create\"/>\n          <el-option label=\"更新\" value=\"update\"/>\n          <el-option label=\"删除\" value=\"delete\"/>\n          <el-option label=\"登录\" value=\"login\"/>\n          <el-option label=\"登出\" value=\"logout\"/>\n          <el-option label=\"预约\" value=\"reserve\"/>\n          <el-option label=\"取消预约\" value=\"cancel\"/>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"模块\">\n        <el-select v-model=\"logFilter.module\" clearable placeholder=\"全部\">\n          <el-option label=\"设备\" value=\"equipment\"/>\n          <el-option label=\"预约\" value=\"reservation\"/>\n          <el-option label=\"管理员\" value=\"admin\"/>\n          <el-option label=\"系统\" value=\"system\"/>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"状态\">\n        <el-select v-model=\"logFilter.status\" clearable placeholder=\"全部\">\n          <el-option label=\"成功\" value=\"success\"/>\n          <el-option label=\"失败\" value=\"failed\"/>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"日期范围\">\n        <el-date-picker\n          v-model=\"dateRange\"\n          type=\"daterange\"\n          range-separator=\"至\"\n          start-placeholder=\"开始日期\"\n          end-placeholder=\"结束日期\"\n          format=\"yyyy-MM-dd\"\n          value-format=\"yyyy-MM-dd\"\n        ></el-date-picker>\n      </el-form-item>\n      <el-form-item>\n        <el-button @click=\"fetchLogs\" type=\"primary\">查询</el-button>\n        <el-button @click=\"clearLogFilter\">重置</el-button>\n        <el-button type=\"danger\" @click=\"showClearLogsDialog\" v-if=\"isSuperAdmin\">清理日志</el-button>\n      </el-form-item>\n    </el-form>\n    <el-table :data=\"logList\" border style=\"width: 100%\" v-loading=\"loading\">\n      <el-table-column prop=\"user_type\" label=\"用户类型\" width=\"100\">\n        <template slot-scope=\"scope\">\n          {{ scope.row.user_type === 'admin' ? '管理员' : '普通用户' }}\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"user_name\" label=\"用户名/联系方式\" width=\"150\"/>\n      <el-table-column prop=\"action\" label=\"操作类型\" width=\"100\">\n        <template slot-scope=\"scope\">\n          {{ getActionText(scope.row.action) }}\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"module\" label=\"模块\" width=\"100\">\n        <template slot-scope=\"scope\">\n          {{ getModuleText(scope.row.module) }}\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"description\" label=\"操作描述\" min-width=\"200\"/>\n      <el-table-column prop=\"status\" label=\"状态\" width=\"80\">\n        <template slot-scope=\"scope\">\n          <el-tag :type=\"scope.row.status === 'success' ? 'success' : 'danger'\">\n            {{ scope.row.status === 'success' ? '成功' : '失败' }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"created_at\" label=\"时间\" width=\"150\">\n        <template slot-scope=\"scope\">\n          {{ formatDate(scope.row.created_at) }}\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" width=\"120\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" @click=\"showLogDetails(scope.row)\">查看详情</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-pagination\n      style=\"margin-top:10px;text-align:right\"\n      background\n      :layout=\"paginationLayout\"\n      :total=\"logTotal\"\n      :page-size=\"logPageSize\"\n      :current-page.sync=\"logPage\"\n      @current-change=\"fetchLogs\"\n    />\n    <el-dialog\n      title=\"日志详情\"\n      :visible.sync=\"logDetailsDialogVisible\"\n      width=\"60%\">\n      <div v-if=\"selectedLog\">\n        <el-descriptions :column=\"1\" border>\n          <el-descriptions-item label=\"用户类型\">{{ selectedLog.user_type === 'admin' ? '管理员' : '普通用户' }}</el-descriptions-item>\n          <el-descriptions-item label=\"用户ID\" v-if=\"selectedLog.user_id\">{{ selectedLog.user_id }}</el-descriptions-item>\n          <el-descriptions-item label=\"用户名/联系方式\" v-if=\"selectedLog.user_name\">{{ selectedLog.user_name }}</el-descriptions-item>\n          <el-descriptions-item label=\"操作类型\">{{ getActionText(selectedLog.action) }}</el-descriptions-item>\n          <el-descriptions-item label=\"模块\">{{ getModuleText(selectedLog.module) }}</el-descriptions-item>\n          <el-descriptions-item label=\"操作描述\">{{ selectedLog.description }}</el-descriptions-item>\n          <el-descriptions-item label=\"IP地址\" v-if=\"selectedLog.ip_address\">{{ selectedLog.ip_address }}</el-descriptions-item>\n          <el-descriptions-item label=\"状态\">\n            <el-tag :type=\"selectedLog.status === 'success' ? 'success' : 'danger'\">\n              {{ selectedLog.status === 'success' ? '成功' : '失败' }}\n            </el-tag>\n          </el-descriptions-item>\n          <el-descriptions-item label=\"错误信息\" v-if=\"selectedLog.error_message\">{{ selectedLog.error_message }}</el-descriptions-item>\n          <el-descriptions-item label=\"操作对象ID\" v-if=\"selectedLog.target_id\">{{ selectedLog.target_id }}</el-descriptions-item>\n          <el-descriptions-item label=\"操作对象类型\" v-if=\"selectedLog.target_type\">{{ selectedLog.target_type }}</el-descriptions-item>\n          <el-descriptions-item label=\"时间\">{{ formatDate(selectedLog.created_at) }}</el-descriptions-item>\n          <el-descriptions-item label=\"详细信息\" v-if=\"selectedLog.details\">\n            <pre>{{ formatDetails(selectedLog.details) }}</pre>\n          </el-descriptions-item>\n        </el-descriptions>\n      </div>\n    </el-dialog>\n    <el-dialog\n      title=\"清理系统日志\"\n      :visible.sync=\"clearLogsDialogVisible\"\n      width=\"40%\">\n      <el-form :model=\"clearLogsForm\" label-width=\"120px\">\n        <el-form-item label=\"清理时间范围\">\n          <el-select v-model=\"clearLogsForm.days\" placeholder=\"请选择\">\n            <el-option label=\"所有日志\" :value=\"null\"></el-option>\n            <el-option label=\"7天前的日志\" :value=\"7\"></el-option>\n            <el-option label=\"30天前的日志\" :value=\"30\"></el-option>\n            <el-option label=\"90天前的日志\" :value=\"90\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"用户类型\">\n          <el-select v-model=\"clearLogsForm.user_type\" clearable placeholder=\"全部\">\n            <el-option label=\"管理员\" value=\"admin\"></el-option>\n            <el-option label=\"普通用户\" value=\"user\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"模块\">\n          <el-select v-model=\"clearLogsForm.module\" clearable placeholder=\"全部\">\n            <el-option label=\"设备\" value=\"equipment\"></el-option>\n            <el-option label=\"预约\" value=\"reservation\"></el-option>\n            <el-option label=\"管理员\" value=\"admin\"></el-option>\n            <el-option label=\"系统\" value=\"system\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-select v-model=\"clearLogsForm.status\" clearable placeholder=\"全部\">\n            <el-option label=\"成功\" value=\"success\"></el-option>\n            <el-option label=\"失败\" value=\"failed\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"clearLogsDialogVisible = false\">取消</el-button>\n        <el-button type=\"danger\" @click=\"clearLogs\" :loading=\"clearingLogs\">确定清理</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'SystemLogs',\n  data() {\n    return {\n      logList: [],\n      logTotal: 0,\n      logPage: 1,\n      logPageSize: 10,\n      loading: false,\n      logFilter: {\n        user_type: '',\n        action: '',\n        module: '',\n        status: ''\n      },\n      dateRange: [],\n      logDetailsDialogVisible: false,\n      selectedLog: null,\n      clearLogsDialogVisible: false,\n      clearLogsForm: {\n        days: null,\n        user_type: '',\n        module: '',\n        status: ''\n      },\n      clearingLogs: false,\n      // 响应式布局相关\n      isMobile: window.innerWidth <= 768\n    }\n  },\n\n  computed: {\n    ...mapGetters(['isSuperAdmin']),\n    // 根据屏幕宽度动态调整分页组件布局\n    paginationLayout() {\n      return this.isMobile\n        ? 'prev, next'\n        : 'prev, pager, next, jumper';\n    }\n  },\n  created() {\n    this.fetchLogs()\n    // 添加窗口大小变化的监听器\n    window.addEventListener('resize', this.handleResize)\n  },\n\n  beforeDestroy() {\n    // 移除窗口大小变化的监听器\n    window.removeEventListener('resize', this.handleResize)\n  },\n  methods: {\n    async fetchLogs() {\n      try {\n        this.loading = true\n        const params = {\n          skip: (this.logPage - 1) * this.logPageSize,\n          limit: this.logPageSize,\n          user_type: this.logFilter.user_type,\n          action: this.logFilter.action,\n          module: this.logFilter.module,\n          status: this.logFilter.status\n        }\n        \n        // 添加日期范围\n        if (this.dateRange && this.dateRange.length === 2) {\n          params.from_date = this.dateRange[0]\n          params.to_date = this.dateRange[1]\n        }\n        \n        const res = await axios.get('/api/system/logs', { params })\n        this.logList = res.data.items\n        this.logTotal = res.data.total\n      } catch (e) {\n        this.$message.error('获取日志失败')\n      } finally {\n        this.loading = false\n      }\n    },\n    clearLogFilter() {\n      this.logFilter = { user_type: '', action: '', module: '', status: '' }\n      this.dateRange = []\n      this.logPage = 1\n      this.fetchLogs()\n    },\n    formatDate(val) {\n      if (!val) return ''\n      // 将日期字符串拆分并手动构建Date对象，避免自动时区转换\n      try {\n        // 假设输入格式为 \"YYYY-MM-DD HH:MM:SS\" 或 ISO格式\n        let dateTimeStr = val;\n        // 如果是ISO格式带T和Z，则去掉\n        if (typeof val === 'string' && val.includes('T')) {\n          dateTimeStr = val.replace('T', ' ').replace('Z', '');\n        }\n        \n        // 拆分日期和时间\n        const [datePart, timePart] = dateTimeStr.split(' ');\n        const [year, month, day] = datePart.split('-').map(Number);\n        const [hour, minute, second] = (timePart || '00:00:00').split(':').map(Number);\n        \n        // 构建日期字符串\n        return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')} ${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\n      } catch (e) {\n        console.error('日期格式化错误:', e);\n      }\n\n      // 如果解析失败，回退到简单方法\n      const d = new Date(val);\n      return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')} ${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;\n    },\n    showLogDetails(log) {\n      this.selectedLog = log;\n      this.logDetailsDialogVisible = true;\n    },\n    formatDetails(details) {\n      if (!details) return '';\n      try {\n        // 如果是JSON字符串，解析并格式化\n        const obj = typeof details === 'string' ? JSON.parse(details) : details;\n        return JSON.stringify(obj, null, 2);\n      } catch (e) {\n        return details;\n      }\n    },\n    getActionText(action) {\n      const actionMap = {\n        'view': '查看',\n        'create': '创建',\n        'update': '更新',\n        'delete': '删除',\n        'login': '登录',\n        'logout': '登出',\n        'reserve': '预约',\n        'cancel': '取消预约'\n      };\n      return actionMap[action] || action;\n    },\n    getModuleText(module) {\n      const moduleMap = {\n        'equipment': '设备',\n        'reservation': '预约',\n        'admin': '管理员',\n        'system': '系统'\n      };\n      return moduleMap[module] || module;\n    },\n    // 处理窗口大小变化\n    handleResize() {\n      this.isMobile = window.innerWidth <= 768;\n    },\n    showClearLogsDialog() {\n      this.clearLogsDialogVisible = true\n    },\n    async clearLogs() {\n      try {\n        this.clearingLogs = true\n        \n        // 构建查询参数\n        const params = {}\n        if (this.clearLogsForm.days) {\n          params.days = this.clearLogsForm.days\n        }\n        if (this.clearLogsForm.user_type) {\n          params.user_type = this.clearLogsForm.user_type\n        }\n        if (this.clearLogsForm.module) {\n          params.module = this.clearLogsForm.module\n        }\n        if (this.clearLogsForm.status) {\n          params.status = this.clearLogsForm.status\n        }\n        \n        // 发送请求\n        const res = await axios.delete('/api/system/logs', { params })\n        \n        // 显示成功消息\n        this.$message.success(res.data.message)\n        \n        // 关闭对话框\n        this.clearLogsDialogVisible = false\n        \n        // 重新获取日志列表\n        this.fetchLogs()\n      } catch (e) {\n        this.$message.error('清理日志失败: ' + (e.response?.data?.detail || e.message))\n      } finally {\n        this.clearingLogs = false\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.system-logs {\n  padding: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}