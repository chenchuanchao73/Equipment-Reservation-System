{"ast":null,"code":"import { reservationApi } from '@/api';\nimport { formatDate } from '@/utils/date';\nexport default {\n  name: 'ReservationDetail',\n  props: {\n    isAdmin: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      loading: true,\n      reservation: null,\n      cancelDialogVisible: false,\n      cancelling: false,\n      returnDialogVisible: false,\n      returning: false\n    };\n  },\n  computed: {\n    // 是否可以取消预定\n    canCancel() {\n      if (!this.reservation) return false;\n\n      // 只有确认状态的预定可以取消\n      return this.reservation.status === 'confirmed';\n    },\n    // 是否可以提前归还\n    canReturn() {\n      if (!this.reservation) return false;\n\n      // 只有使用中状态的预定可以提前归还\n      return this.reservation.status === 'in_use';\n    }\n  },\n  created() {\n    this.fetchReservation();\n  },\n  methods: {\n    // 获取预定详情\n    async fetchReservation() {\n      this.loading = true;\n      try {\n        // 检查是否是通过预约序号查看\n        const reservationNumber = this.$route.params.number;\n        const code = this.$route.params.code;\n        let response;\n        if (reservationNumber) {\n          console.log('通过预约序号查看预约详情:', reservationNumber);\n\n          // 从URL中获取预约码（如果有）\n          const codeFromQuery = this.$route.query.code;\n\n          // 如果URL中有预约码，使用预约码和预约序号查询\n          if (codeFromQuery) {\n            console.log('使用预约码和预约序号查询:', codeFromQuery, reservationNumber);\n\n            // 直接使用预约序号作为参数，不要包装在对象中\n            console.log('直接使用预约序号作为参数:', reservationNumber);\n\n            // 使用预约码和预约序号查询\n            response = await reservationApi.getReservationByCode(codeFromQuery, reservationNumber);\n          } else {\n            // 如果URL中没有预约码，直接使用预约序号查询\n            console.log('直接使用预约序号查询:', reservationNumber);\n\n            // 从localStorage中获取预约码（如果有）\n            const savedCode = localStorage.getItem('current_reservation_code');\n            if (savedCode) {\n              console.log('从localStorage中获取到预约码:', savedCode);\n\n              // 直接使用预约序号作为参数，不要包装在对象中\n              console.log('使用保存的预约码和预约序号查询:', savedCode, reservationNumber);\n\n              // 使用预约码和预约序号查询\n              response = await reservationApi.getReservationByCode(savedCode, reservationNumber);\n            } else {\n              // 如果没有预约码，直接使用预约序号查询\n              response = await reservationApi.getReservationByCode(reservationNumber);\n            }\n          }\n        } else if (this.isAdmin) {\n          // 管理员查询\n          response = await reservationApi.getReservation(code);\n        } else {\n          // 用户查询\n          response = await reservationApi.getReservationByCode(code);\n        }\n        if (response.data.success) {\n          this.reservation = response.data.data;\n          console.log('获取到预约详情:', this.reservation);\n        } else {\n          this.$message.error(response.data.message || this.$t('reservation.notFound'));\n          this.reservation = null;\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservation:', error);\n        this.$message.error(this.$t('common.error'));\n        this.reservation = null;\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 返回上一页\n    goBack() {\n      console.log('ReservationDetail.goBack() - 当前路由参数:', this.$route.query);\n\n      // 直接返回到个人预约管理页面\n      console.log('ReservationDetail.goBack() - 直接返回个人预约管理页面');\n\n      // 使用Vue Router的push方法\n      this.$router.push('/reservation/query');\n    },\n    // 格式化日期时间\n    formatDateTime(datetime) {\n      return formatDate(datetime, 'YYYY-MM-DD HH:mm:ss', false); // 设置toBeijingTime为false，不进行时区转换\n    },\n    // 获取状态类名\n    getStatusClass(status) {\n      const statusMap = {\n        confirmed: 'status-confirmed',\n        cancelled: 'status-cancelled',\n        completed: 'status-completed',\n        in_use: 'status-in-use',\n        expired: 'status-expired'\n      };\n      return statusMap[status] || 'status-unknown';\n    },\n    // 获取状态图标\n    getStatusIcon(status) {\n      const iconMap = {\n        confirmed: 'el-icon-check',\n        cancelled: 'el-icon-close',\n        completed: 'el-icon-success',\n        in_use: 'el-icon-time',\n        expired: 'el-icon-warning'\n      };\n      return iconMap[status] || 'el-icon-question';\n    },\n    // 获取状态文本\n    getStatusText(status) {\n      const statusMap = {\n        confirmed: this.$t('reservation.statusConfirmed'),\n        cancelled: this.$t('reservation.statusCancelled'),\n        completed: this.$t('reservation.statusCompleted'),\n        in_use: this.$t('reservation.statusInUse'),\n        expired: this.$t('reservation.statusExpired')\n      };\n      return statusMap[status] || this.$t('reservation.statusUnknown');\n    },\n    // 显示取消对话框\n    showCancelDialog() {\n      this.cancelDialogVisible = true;\n    },\n    // 显示提前归还对话框\n    showReturnDialog() {\n      this.returnDialogVisible = true;\n    },\n    // 取消预定\n    async cancelReservation() {\n      this.cancelling = true;\n      try {\n        const response = await reservationApi.cancelReservation(this.reservation.reservation_code, {\n          reservation_number: this.reservation.reservation_number\n        });\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.cancelSuccess'));\n          this.cancelDialogVisible = false;\n          // 重新获取预定信息\n          await this.fetchReservation();\n        } else {\n          this.$message.error(response.data.message || this.$t('reservation.cancelFailed'));\n        }\n      } catch (error) {\n        console.error('Failed to cancel reservation:', error);\n        this.$message.error(this.$t('reservation.cancelFailed'));\n      } finally {\n        this.cancelling = false;\n      }\n    },\n    // 提前归还设备\n    async returnEquipment() {\n      this.returning = true;\n      try {\n        // 这里应该调用提前归还API，但目前后端可能没有实现\n        // 暂时使用取消预约API代替\n        const response = await reservationApi.cancelReservation(this.reservation.reservation_code, {\n          reservation_number: this.reservation.reservation_number,\n          is_early_return: true\n        });\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.returnSuccess'));\n          this.returnDialogVisible = false;\n          // 重新获取预定信息\n          await this.fetchReservation();\n        } else {\n          this.$message.error(response.data.message || this.$t('reservation.returnFailed'));\n        }\n      } catch (error) {\n        console.error('Failed to return equipment:', error);\n        this.$message.error(this.$t('reservation.returnFailed'));\n      } finally {\n        this.returning = false;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}