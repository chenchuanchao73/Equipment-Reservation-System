{"ast":null,"code":"import router from './index';\nimport store from '@/store';\nimport { Message } from 'element-ui';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\n\n// 配置NProgress\nNProgress.configure({\n  showSpinner: false\n});\n\n// 白名单路由（不需要登录即可访问）\nconst whiteList = ['/', '/equipment', '/equipment/:id', '/reservation/query', '/reservation/:code', '/admin/login', '/404'];\n\n// 路由前置守卫\nrouter.beforeEach((to, from, next) => {\n  // 开始进度条\n  NProgress.start();\n\n  // 获取用户登录状态\n  const hasToken = store.getters.isLoggedIn;\n\n  // 判断是否需要登录权限\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n\n  // 如果是登录页面且已登录，直接跳转到首页\n  if (to.path === '/admin/login' && hasToken) {\n    next('/admin/dashboard');\n    NProgress.done();\n    return;\n  }\n\n  // 如果需要登录权限但未登录，跳转到登录页\n  if (requiresAuth && !hasToken) {\n    // 如果已经在登录页，直接放行，避免死循环\n    if (to.path === '/admin/login') {\n      next();\n      NProgress.done();\n      return;\n    }\n    next(`/admin/login?redirect=${to.path}`);\n    NProgress.done();\n    return;\n  }\n\n  // 其他情况直接放行\n  next();\n});\n\n// 路由后置守卫\nrouter.afterEach(to => {\n  // 结束进度条\n  NProgress.done();\n\n  // 设置页面标题 - 在路由完成后设置，确保i18n已初始化\n  setTimeout(() => {\n    let pageTitle = to.meta.title || '';\n    let appName = 'HTNIA设备预定系统'; // 默认值\n\n    // 如果标题是i18n键值（包含点号），则使用i18n进行翻译\n    if (pageTitle && pageTitle.includes('.')) {\n      try {\n        const i18nTitle = router.app.$i18n.t(pageTitle);\n        if (i18nTitle !== pageTitle) {\n          // 如果翻译成功（结果不等于原键值）\n          pageTitle = i18nTitle;\n        }\n      } catch (e) {\n        console.error('Failed to translate page title:', e);\n      }\n    }\n\n    // 尝试获取国际化的应用名称\n    try {\n      if (router.app && router.app.$i18n) {\n        appName = router.app.$i18n.t('common.fullAppName');\n      }\n    } catch (e) {\n      console.error('Failed to translate app name:', e);\n    }\n    document.title = pageTitle ? `${pageTitle} - ${appName}` : appName;\n  }, 0);\n});\nexport default router;","map":{"version":3,"names":["router","store","Message","NProgress","configure","showSpinner","whiteList","beforeEach","to","from","next","start","hasToken","getters","isLoggedIn","requiresAuth","matched","some","record","meta","path","done","afterEach","setTimeout","pageTitle","title","appName","includes","i18nTitle","app","$i18n","t","e","console","error","document"],"sources":["D:/Equipment-Reservation-System-main/frontend/src/router/permission.js"],"sourcesContent":["import router from './index'\nimport store from '@/store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\n// 配置NProgress\nNProgress.configure({ showSpinner: false })\n\n// 白名单路由（不需要登录即可访问）\nconst whiteList = [\n  '/',\n  '/equipment',\n  '/equipment/:id',\n  '/reservation/query',\n  '/reservation/:code',\n  '/admin/login',\n  '/404'\n]\n\n// 路由前置守卫\nrouter.beforeEach((to, from, next) => {\n  // 开始进度条\n  NProgress.start()\n\n  // 获取用户登录状态\n  const hasToken = store.getters.isLoggedIn\n\n  // 判断是否需要登录权限\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth)\n\n  // 如果是登录页面且已登录，直接跳转到首页\n  if (to.path === '/admin/login' && hasToken) {\n    next('/admin/dashboard')\n    NProgress.done()\n    return\n  }\n\n  // 如果需要登录权限但未登录，跳转到登录页\n  if (requiresAuth && !hasToken) {\n    // 如果已经在登录页，直接放行，避免死循环\n    if (to.path === '/admin/login') {\n      next()\n      NProgress.done()\n      return\n    }\n    next(`/admin/login?redirect=${to.path}`)\n    NProgress.done()\n    return\n  }\n\n  // 其他情况直接放行\n  next()\n})\n\n// 路由后置守卫\nrouter.afterEach((to) => {\n  // 结束进度条\n  NProgress.done()\n\n  // 设置页面标题 - 在路由完成后设置，确保i18n已初始化\n  setTimeout(() => {\n    let pageTitle = to.meta.title || ''\n    let appName = 'HTNIA设备预定系统' // 默认值\n\n    // 如果标题是i18n键值（包含点号），则使用i18n进行翻译\n    if (pageTitle && pageTitle.includes('.')) {\n      try {\n        const i18nTitle = router.app.$i18n.t(pageTitle)\n        if (i18nTitle !== pageTitle) { // 如果翻译成功（结果不等于原键值）\n          pageTitle = i18nTitle\n        }\n      } catch (e) {\n        console.error('Failed to translate page title:', e)\n      }\n    }\n\n    // 尝试获取国际化的应用名称\n    try {\n      if (router.app && router.app.$i18n) {\n        appName = router.app.$i18n.t('common.fullAppName')\n      }\n    } catch (e) {\n      console.error('Failed to translate app name:', e)\n    }\n\n    document.title = pageTitle ? `${pageTitle} - ${appName}` : appName\n  }, 0)\n})\n\nexport default router\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,SAAS;AAC5B,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAO,yBAAyB;;AAEhC;AACAA,SAAS,CAACC,SAAS,CAAC;EAAEC,WAAW,EAAE;AAAM,CAAC,CAAC;;AAE3C;AACA,MAAMC,SAAS,GAAG,CAChB,GAAG,EACH,YAAY,EACZ,gBAAgB,EAChB,oBAAoB,EACpB,oBAAoB,EACpB,cAAc,EACd,MAAM,CACP;;AAED;AACAN,MAAM,CAACO,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACAP,SAAS,CAACQ,KAAK,CAAC,CAAC;;EAEjB;EACA,MAAMC,QAAQ,GAAGX,KAAK,CAACY,OAAO,CAACC,UAAU;;EAEzC;EACA,MAAMC,YAAY,GAAGP,EAAE,CAACQ,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC;;EAExE;EACA,IAAIP,EAAE,CAACY,IAAI,KAAK,cAAc,IAAIR,QAAQ,EAAE;IAC1CF,IAAI,CAAC,kBAAkB,CAAC;IACxBP,SAAS,CAACkB,IAAI,CAAC,CAAC;IAChB;EACF;;EAEA;EACA,IAAIN,YAAY,IAAI,CAACH,QAAQ,EAAE;IAC7B;IACA,IAAIJ,EAAE,CAACY,IAAI,KAAK,cAAc,EAAE;MAC9BV,IAAI,CAAC,CAAC;MACNP,SAAS,CAACkB,IAAI,CAAC,CAAC;MAChB;IACF;IACAX,IAAI,CAAC,yBAAyBF,EAAE,CAACY,IAAI,EAAE,CAAC;IACxCjB,SAAS,CAACkB,IAAI,CAAC,CAAC;IAChB;EACF;;EAEA;EACAX,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;;AAEF;AACAV,MAAM,CAACsB,SAAS,CAAEd,EAAE,IAAK;EACvB;EACAL,SAAS,CAACkB,IAAI,CAAC,CAAC;;EAEhB;EACAE,UAAU,CAAC,MAAM;IACf,IAAIC,SAAS,GAAGhB,EAAE,CAACW,IAAI,CAACM,KAAK,IAAI,EAAE;IACnC,IAAIC,OAAO,GAAG,aAAa,EAAC;;IAE5B;IACA,IAAIF,SAAS,IAAIA,SAAS,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACxC,IAAI;QACF,MAAMC,SAAS,GAAG5B,MAAM,CAAC6B,GAAG,CAACC,KAAK,CAACC,CAAC,CAACP,SAAS,CAAC;QAC/C,IAAII,SAAS,KAAKJ,SAAS,EAAE;UAAE;UAC7BA,SAAS,GAAGI,SAAS;QACvB;MACF,CAAC,CAAC,OAAOI,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,CAAC,CAAC;MACrD;IACF;;IAEA;IACA,IAAI;MACF,IAAIhC,MAAM,CAAC6B,GAAG,IAAI7B,MAAM,CAAC6B,GAAG,CAACC,KAAK,EAAE;QAClCJ,OAAO,GAAG1B,MAAM,CAAC6B,GAAG,CAACC,KAAK,CAACC,CAAC,CAAC,oBAAoB,CAAC;MACpD;IACF,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,CAAC,CAAC;IACnD;IAEAG,QAAQ,CAACV,KAAK,GAAGD,SAAS,GAAG,GAAGA,SAAS,MAAME,OAAO,EAAE,GAAGA,OAAO;EACpE,CAAC,EAAE,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,eAAe1B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}