{"ast":null,"code":"import { reservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'AdminReservation',\n  data() {\n    return {\n      loading: false,\n      reservations: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 10,\n      filter: {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      }\n    };\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true;\n      try {\n        const params = {\n          page: this.currentPage,\n          limit: this.pageSize,\n          code: this.filter.code || undefined,\n          user_name: this.filter.userName || undefined\n        };\n\n        // 处理不同的状态筛选\n        if (this.filter.status) {\n          if (this.filter.status === 'in_use' || this.filter.status === 'expired' || this.filter.status === 'confirmed') {\n            // 这些状态需要特殊处理，因为后端没有这些细分状态\n            // 我们获取所有已确认的预约，然后在前端筛选\n            params.status = 'confirmed';\n          } else {\n            // 其他状态直接传递给后端\n            params.status = this.filter.status;\n          }\n        }\n        const response = await reservationApi.getReservations(params);\n        let reservations = response.data.items;\n\n        // 如果选择了特殊状态，需要在前端进行筛选\n        if (this.filter.status === 'in_use') {\n          // 筛选出“使用中”的预约\n          const now = new Date();\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            return now >= start && now <= end;\n          });\n        } else if (this.filter.status === 'expired') {\n          // 筛选出“已过期”的预约\n          reservations = reservations.filter(reservation => {\n            return isReservationExpired(reservation.end_datetime);\n          });\n        } else if (this.filter.status === 'confirmed') {\n          // 筛选出真正的“已确认”预约（未开始的预约）\n          const now = new Date();\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime);\n            // 未开始且未过期\n            return start > now && !isReservationExpired(reservation.end_datetime);\n          });\n        }\n        this.reservations = reservations;\n\n        // 如果是特殊状态，总数需要重新计算\n        if (this.filter.status === 'in_use' || this.filter.status === 'expired') {\n          this.total = reservations.length;\n        } else {\n          this.total = response.data.total;\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservations:', error);\n        this.$message.error(this.$t('error.serverError'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return '';\n      const date = new Date(cellValue);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning';\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return 'primary';\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success';\n    },\n    getStatusText(reservation) {\n      // 如果预约已取消，显示“已取消”\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled');\n      }\n\n      // 如果预约已过期，显示“已过期”\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.expired');\n      }\n\n      // 如果预约正在进行中，显示“使用中”\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return this.$t('reservation.inUse');\n      }\n\n      // 如果预约已确认且未开始，显示“已确认”\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return this.$t('reservation.confirmed');\n    },\n    handleFilterChange() {\n      this.currentPage = 1;\n      this.fetchData();\n    },\n    resetFilter() {\n      this.filter = {\n        code: '',\n        userName: '',\n        status: ''\n      };\n      this.handleFilterChange();\n    },\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.fetchData();\n    },\n    viewReservation(reservation) {\n      this.$router.push(`/admin/reservation/${reservation.reservation_code}`);\n    }\n  }\n};","map":{"version":3,"names":["reservationApi","isReservationExpired","name","data","loading","reservations","total","currentPage","pageSize","filter","code","userName","status","dateRange","created","fetchData","methods","params","page","limit","undefined","user_name","response","getReservations","items","now","Date","reservation","start","start_datetime","end","end_datetime","length","error","console","$message","$t","formatDateTime","row","column","cellValue","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getStatusType","getStatusText","handleFilterChange","resetFilter","handlePageChange","viewReservation","$router","push","reservation_code"],"sources":["src/views/admin/AdminReservation.vue"],"sourcesContent":["<template>\n  <div class=\"admin-reservation\">\n    <div class=\"page-header\">\n      <h1 class=\"page-title\">{{ $t('admin.reservation') }}</h1>\n    </div>\n\n    <!-- 筛选卡片 -->\n    <el-card shadow=\"hover\" class=\"filter-card\">\n      <el-form :inline=\"true\" :model=\"filter\" class=\"filter-form\">\n        <el-form-item :label=\"$t('reservation.code')\">\n          <el-input\n            v-model=\"filter.code\"\n            :placeholder=\"$t('reservation.queryPlaceholder')\"\n            clearable\n            @keyup.enter.native=\"handleFilterChange\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.userName')\">\n          <el-input\n            v-model=\"filter.userName\"\n            :placeholder=\"$t('reservation.userName')\"\n            clearable\n            @keyup.enter.native=\"handleFilterChange\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.status')\">\n          <el-select\n            v-model=\"filter.status\"\n            :placeholder=\"$t('equipment.allStatus')\"\n            clearable\n            @change=\"handleFilterChange\"\n          >\n            <el-option\n              :label=\"$t('reservation.confirmed')\"\n              value=\"confirmed\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.inUse')\"\n              value=\"in_use\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.expired')\"\n              value=\"expired\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.cancelled')\"\n              value=\"cancelled\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.dateRange')\">\n          <el-date-picker\n            v-model=\"filter.dateRange\"\n            type=\"daterange\"\n            range-separator=\"至\"\n            :start-placeholder=\"$t('reservation.startDate')\"\n            :end-placeholder=\"$t('reservation.endDate')\"\n            value-format=\"yyyy-MM-dd\"\n            @change=\"handleFilterChange\"\n          >\n          </el-date-picker>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilterChange\">\n            {{ $t('common.search') }}\n          </el-button>\n          <el-button @click=\"resetFilter\" icon=\"el-icon-refresh-left\">\n            {{ $t('common.reset') }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <!-- 预定列表 -->\n    <el-card shadow=\"hover\" class=\"reservation-list\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n\n      <div v-else-if=\"reservations.length === 0\" class=\"empty-data\">\n        <el-empty :description=\"$t('common.noData')\"></el-empty>\n      </div>\n\n      <el-table\n        v-else\n        :data=\"reservations\"\n        style=\"width: 100%\"\n        :default-sort=\"{ prop: 'created_at', order: 'descending' }\"\n        header-align=\"center\"\n        cell-class-name=\"text-center\"\n        border\n        stripe\n      >\n        <el-table-column\n          prop=\"reservation_code\"\n          :label=\"$t('reservation.code')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <span style=\"color: #F56C6C; font-weight: bold;\">{{ scope.row.reservation_code }}</span>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n          prop=\"equipment_name\"\n          :label=\"$t('reservation.equipmentName')\"\n          min-width=\"120\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_name\"\n          :label=\"$t('reservation.userName')\"\n          min-width=\"100\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_department\"\n          :label=\"$t('reservation.userDepartment')\"\n          min-width=\"100\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_contact\"\n          :label=\"$t('reservation.userContact')\"\n          min-width=\"120\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"start_datetime\"\n          :label=\"$t('reservation.startTime')\"\n          min-width=\"150\"\n          :formatter=\"formatDateTime\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"end_datetime\"\n          :label=\"$t('reservation.endTime')\"\n          min-width=\"150\"\n          :formatter=\"formatDateTime\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"status\"\n          :label=\"$t('reservation.status')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <el-tag\n              :type=\"getStatusType(scope.row)\"\n              size=\"medium\"\n              style=\"font-weight: bold; padding: 0px 10px; font-size: 14px;\"\n            >\n              {{ getStatusText(scope.row) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n          :label=\"$t('common.operation')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <el-button\n              type=\"text\"\n              size=\"small\"\n              @click=\"viewReservation(scope.row)\"\n            >\n              {{ $t('admin.viewReservation') }}\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页 -->\n      <div class=\"pagination-container\" v-if=\"reservations.length > 0\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"total\"\n          :page-size=\"pageSize\"\n          :current-page.sync=\"currentPage\"\n          @current-change=\"handlePageChange\"\n        ></el-pagination>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { reservationApi } from '@/api'\nimport { isReservationExpired } from '@/utils/date'\n\nexport default {\n  name: 'AdminReservation',\n\n  data() {\n    return {\n      loading: false,\n      reservations: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 10,\n      filter: {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      }\n    }\n  },\n\n  created() {\n    this.fetchData()\n  },\n\n  methods: {\n    async fetchData() {\n      this.loading = true\n\n      try {\n        const params = {\n          page: this.currentPage,\n          limit: this.pageSize,\n          code: this.filter.code || undefined,\n          user_name: this.filter.userName || undefined\n        }\n\n        // 处理不同的状态筛选\n        if (this.filter.status) {\n          if (this.filter.status === 'in_use' || this.filter.status === 'expired' || this.filter.status === 'confirmed') {\n            // 这些状态需要特殊处理，因为后端没有这些细分状态\n            // 我们获取所有已确认的预约，然后在前端筛选\n            params.status = 'confirmed'\n          } else {\n            // 其他状态直接传递给后端\n            params.status = this.filter.status\n          }\n        }\n\n        const response = await reservationApi.getReservations(params)\n        let reservations = response.data.items\n\n        // 如果选择了特殊状态，需要在前端进行筛选\n        if (this.filter.status === 'in_use') {\n          // 筛选出“使用中”的预约\n          const now = new Date()\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime)\n            const end = new Date(reservation.end_datetime)\n            return now >= start && now <= end\n          })\n        } else if (this.filter.status === 'expired') {\n          // 筛选出“已过期”的预约\n          reservations = reservations.filter(reservation => {\n            return isReservationExpired(reservation.end_datetime)\n          })\n        } else if (this.filter.status === 'confirmed') {\n          // 筛选出真正的“已确认”预约（未开始的预约）\n          const now = new Date()\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime)\n            // 未开始且未过期\n            return start > now && !isReservationExpired(reservation.end_datetime)\n          })\n        }\n\n        this.reservations = reservations\n\n        // 如果是特殊状态，总数需要重新计算\n        if (this.filter.status === 'in_use' || this.filter.status === 'expired') {\n          this.total = reservations.length\n        } else {\n          this.total = response.data.total\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservations:', error)\n        this.$message.error(this.$t('error.serverError'))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return ''\n\n      const date = new Date(cellValue)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    },\n\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger'\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning'\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return 'primary'\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success'\n    },\n\n    getStatusText(reservation) {\n      // 如果预约已取消，显示“已取消”\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled')\n      }\n\n      // 如果预约已过期，显示“已过期”\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.expired')\n      }\n\n      // 如果预约正在进行中，显示“使用中”\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return this.$t('reservation.inUse')\n      }\n\n      // 如果预约已确认且未开始，显示“已确认”\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return this.$t('reservation.confirmed')\n    },\n\n    handleFilterChange() {\n      this.currentPage = 1\n      this.fetchData()\n    },\n\n    resetFilter() {\n      this.filter = {\n        code: '',\n        userName: '',\n        status: ''\n      }\n      this.handleFilterChange()\n    },\n\n    handlePageChange(page) {\n      this.currentPage = page\n      this.fetchData()\n    },\n\n    viewReservation(reservation) {\n      this.$router.push(`/admin/reservation/${reservation.reservation_code}`)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.admin-reservation {\n  padding: 20px;\n}\n\n.page-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding: 15px 20px;\n  background-color: #FFFFFF;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  color: #303133;\n}\n\n.filter-card {\n  margin-bottom: 20px;\n}\n\n.reservation-list {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 40px 0;\n}\n\n.empty-data {\n  padding: 40px 0;\n  text-align: center;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n.text-center {\n  text-align: center !important;\n}\n\n@media (max-width: 768px) {\n  .filter-form .el-form-item {\n    margin-right: 0;\n    margin-bottom: 10px;\n  }\n}\n</style>\n"],"mappings":"AAiMA,SAAAA,cAAA;AACA,SAAAC,oBAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,OAAA;MACAC,YAAA;MACAC,KAAA;MACAC,WAAA;MACAC,QAAA;MACAC,MAAA;QACAC,IAAA;QACAC,QAAA;QACAC,MAAA;QACAC,SAAA;MACA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,SAAA;EACA;EAEAC,OAAA;IACA,MAAAD,UAAA;MACA,KAAAX,OAAA;MAEA;QACA,MAAAa,MAAA;UACAC,IAAA,OAAAX,WAAA;UACAY,KAAA,OAAAX,QAAA;UACAE,IAAA,OAAAD,MAAA,CAAAC,IAAA,IAAAU,SAAA;UACAC,SAAA,OAAAZ,MAAA,CAAAE,QAAA,IAAAS;QACA;;QAEA;QACA,SAAAX,MAAA,CAAAG,MAAA;UACA,SAAAH,MAAA,CAAAG,MAAA,sBAAAH,MAAA,CAAAG,MAAA,uBAAAH,MAAA,CAAAG,MAAA;YACA;YACA;YACAK,MAAA,CAAAL,MAAA;UACA;YACA;YACAK,MAAA,CAAAL,MAAA,QAAAH,MAAA,CAAAG,MAAA;UACA;QACA;QAEA,MAAAU,QAAA,SAAAtB,cAAA,CAAAuB,eAAA,CAAAN,MAAA;QACA,IAAAZ,YAAA,GAAAiB,QAAA,CAAAnB,IAAA,CAAAqB,KAAA;;QAEA;QACA,SAAAf,MAAA,CAAAG,MAAA;UACA;UACA,MAAAa,GAAA,OAAAC,IAAA;UACArB,YAAA,GAAAA,YAAA,CAAAI,MAAA,CAAAkB,WAAA;YACA,MAAAC,KAAA,OAAAF,IAAA,CAAAC,WAAA,CAAAE,cAAA;YACA,MAAAC,GAAA,OAAAJ,IAAA,CAAAC,WAAA,CAAAI,YAAA;YACA,OAAAN,GAAA,IAAAG,KAAA,IAAAH,GAAA,IAAAK,GAAA;UACA;QACA,gBAAArB,MAAA,CAAAG,MAAA;UACA;UACAP,YAAA,GAAAA,YAAA,CAAAI,MAAA,CAAAkB,WAAA;YACA,OAAA1B,oBAAA,CAAA0B,WAAA,CAAAI,YAAA;UACA;QACA,gBAAAtB,MAAA,CAAAG,MAAA;UACA;UACA,MAAAa,GAAA,OAAAC,IAAA;UACArB,YAAA,GAAAA,YAAA,CAAAI,MAAA,CAAAkB,WAAA;YACA,MAAAC,KAAA,OAAAF,IAAA,CAAAC,WAAA,CAAAE,cAAA;YACA;YACA,OAAAD,KAAA,GAAAH,GAAA,KAAAxB,oBAAA,CAAA0B,WAAA,CAAAI,YAAA;UACA;QACA;QAEA,KAAA1B,YAAA,GAAAA,YAAA;;QAEA;QACA,SAAAI,MAAA,CAAAG,MAAA,sBAAAH,MAAA,CAAAG,MAAA;UACA,KAAAN,KAAA,GAAAD,YAAA,CAAA2B,MAAA;QACA;UACA,KAAA1B,KAAA,GAAAgB,QAAA,CAAAnB,IAAA,CAAAG,KAAA;QACA;MACA,SAAA2B,KAAA;QACAC,OAAA,CAAAD,KAAA,kCAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA,MAAAG,EAAA;MACA;QACA,KAAAhC,OAAA;MACA;IACA;IAEAiC,eAAAC,GAAA,EAAAC,MAAA,EAAAC,SAAA;MACA,KAAAA,SAAA;MAEA,MAAAC,IAAA,OAAAf,IAAA,CAAAc,SAAA;MACA,UAAAC,IAAA,CAAAC,WAAA,MAAAC,MAAA,CAAAF,IAAA,CAAAG,QAAA,QAAAC,QAAA,YAAAF,MAAA,CAAAF,IAAA,CAAAK,OAAA,IAAAD,QAAA,YAAAF,MAAA,CAAAF,IAAA,CAAAM,QAAA,IAAAF,QAAA,YAAAF,MAAA,CAAAF,IAAA,CAAAO,UAAA,IAAAH,QAAA;IACA;IAEAI,cAAAtB,WAAA;MACA;MACA,IAAAA,WAAA,CAAAf,MAAA;QACA;MACA;;MAEA;MACA,IAAAX,oBAAA,CAAA0B,WAAA,CAAAI,YAAA;QACA;MACA;;MAEA;MACA,MAAAN,GAAA,OAAAC,IAAA;MACA,MAAAE,KAAA,OAAAF,IAAA,CAAAC,WAAA,CAAAE,cAAA;MACA,MAAAC,GAAA,OAAAJ,IAAA,CAAAC,WAAA,CAAAI,YAAA;MACA,IAAAN,GAAA,IAAAG,KAAA,IAAAH,GAAA,IAAAK,GAAA;QACA;MACA;;MAEA;MACA;MACA;IACA;IAEAoB,cAAAvB,WAAA;MACA;MACA,IAAAA,WAAA,CAAAf,MAAA;QACA,YAAAwB,EAAA;MACA;;MAEA;MACA,IAAAnC,oBAAA,CAAA0B,WAAA,CAAAI,YAAA;QACA,YAAAK,EAAA;MACA;;MAEA;MACA,MAAAX,GAAA,OAAAC,IAAA;MACA,MAAAE,KAAA,OAAAF,IAAA,CAAAC,WAAA,CAAAE,cAAA;MACA,MAAAC,GAAA,OAAAJ,IAAA,CAAAC,WAAA,CAAAI,YAAA;MACA,IAAAN,GAAA,IAAAG,KAAA,IAAAH,GAAA,IAAAK,GAAA;QACA,YAAAM,EAAA;MACA;;MAEA;MACA;MACA,YAAAA,EAAA;IACA;IAEAe,mBAAA;MACA,KAAA5C,WAAA;MACA,KAAAQ,SAAA;IACA;IAEAqC,YAAA;MACA,KAAA3C,MAAA;QACAC,IAAA;QACAC,QAAA;QACAC,MAAA;MACA;MACA,KAAAuC,kBAAA;IACA;IAEAE,iBAAAnC,IAAA;MACA,KAAAX,WAAA,GAAAW,IAAA;MACA,KAAAH,SAAA;IACA;IAEAuC,gBAAA3B,WAAA;MACA,KAAA4B,OAAA,CAAAC,IAAA,uBAAA7B,WAAA,CAAA8B,gBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}