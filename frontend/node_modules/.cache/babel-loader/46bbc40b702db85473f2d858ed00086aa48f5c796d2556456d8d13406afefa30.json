{"ast":null,"code":"import { getDbTables, getDbTableColumns, getDbTableRows } from '@/api/dbAdmin';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'DatabaseViewer',\n  data() {\n    return {\n      tables: [],\n      selectedTable: '',\n      columns: [],\n      rows: [],\n      total: 0,\n      page: 1,\n      pageSize: 20,\n      loading: false,\n      inited: false\n    };\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    }),\n    isSuperAdmin() {\n      return this.user && this.user.role === 'superadmin';\n    }\n  },\n  methods: {\n    async initIfNeeded() {\n      if (!this.inited && this.isSuperAdmin) {\n        this.inited = true;\n        await this.fetchTables();\n      }\n    },\n    async fetchTables() {\n      try {\n        const res = await getDbTables();\n        this.tables = res.data.tables || [];\n        if (this.tables.length > 0) {\n          this.handleTableSelect(this.tables[0]);\n        }\n      } catch (e) {\n        this.$message.error('获取表名失败');\n      }\n    },\n    async handleTableSelect(table) {\n      this.selectedTable = table;\n      this.page = 1;\n      await this.fetchTableColumns();\n      await this.fetchTableRows();\n    },\n    async fetchTableColumns() {\n      try {\n        const res = await getDbTableColumns(this.selectedTable);\n        // 兼容不同数据库字段名\n        this.columns = (res.data.columns || []).map(col => ({\n          name: col.name || col.column_name,\n          type: col.type || col.type_name,\n          nullable: col.nullable !== undefined ? col.nullable : col.nullable_,\n          default: col.default\n        }));\n      } catch (e) {\n        this.columns = [];\n        this.$message.error('获取字段信息失败');\n      }\n    },\n    async fetchTableRows() {\n      this.loading = true;\n      try {\n        const res = await getDbTableRows(this.selectedTable, {\n          skip: (this.page - 1) * this.pageSize,\n          limit: this.pageSize\n        });\n        this.rows = res.data.rows || [];\n        // 估算总数（如有需要可扩展后端返回总数）\n        this.total = this.rows.length < this.pageSize && this.page === 1 ? this.rows.length : this.page * this.pageSize + (this.rows.length === this.pageSize ? 1 : 0);\n      } catch (e) {\n        this.rows = [];\n        this.$message.error('获取表数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    handlePageChange(page) {\n      this.page = page;\n      this.fetchTableRows();\n    },\n    refreshTable() {\n      this.fetchTableColumns();\n      this.fetchTableRows();\n    }\n  }\n};","map":{"version":3,"names":["getDbTables","getDbTableColumns","getDbTableRows","mapState","name","data","tables","selectedTable","columns","rows","total","page","pageSize","loading","inited","computed","user","state","isSuperAdmin","role","methods","initIfNeeded","fetchTables","res","length","handleTableSelect","e","$message","error","table","fetchTableColumns","fetchTableRows","map","col","column_name","type","type_name","nullable","undefined","nullable_","default","skip","limit","handlePageChange","refreshTable"],"sources":["src/views/admin/DatabaseViewer.vue"],"sourcesContent":["<template>\r\n  <div class=\"db-viewer\" v-if=\"isSuperAdmin\">\r\n    <el-row>\r\n      <el-col :span=\"4\" class=\"db-tables-list\">\r\n        <el-card shadow=\"never\" style=\"height: 100%\">\r\n          <div slot=\"header\"><b>数据库表</b></div>\r\n          <el-scrollbar style=\"height: 70vh\">\r\n            <el-menu :default-active=\"selectedTable\" @select=\"handleTableSelect\">\r\n              <el-menu-item v-for=\"table in tables\" :key=\"table\" :index=\"table\">\r\n                {{ table }}\r\n              </el-menu-item>\r\n            </el-menu>\r\n          </el-scrollbar>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"20\" class=\"db-table-content\">\r\n        <el-card shadow=\"never\" style=\"min-height: 70vh\">\r\n          <div slot=\"header\" class=\"db-table-header\">\r\n            <span v-if=\"selectedTable\"><b>{{ selectedTable }}</b>（共 {{ total }} 条）</span>\r\n            <el-button v-if=\"selectedTable\" size=\"mini\" icon=\"el-icon-refresh\" @click=\"refreshTable\" style=\"float: right;\">刷新</el-button>\r\n          </div>\r\n          <div v-if=\"selectedTable\">\r\n            <el-table :data=\"rows\" border size=\"small\" style=\"width: 100%\">\r\n              <el-table-column v-for=\"col in columns\" :key=\"col.name\" :prop=\"col.name\" :label=\"col.name\" :min-width=\"100\" />\r\n            </el-table>\r\n            <el-pagination\r\n              v-if=\"total > pageSize\"\r\n              background\r\n              layout=\"prev, pager, next, jumper\"\r\n              :current-page=\"page\"\r\n              :page-size=\"pageSize\"\r\n              :total=\"total\"\r\n              @current-change=\"handlePageChange\"\r\n              style=\"margin-top: 16px; text-align: right;\"\r\n            />\r\n            <div class=\"db-table-columns-info\" style=\"margin-top: 16px;\">\r\n              <b>字段信息：</b>\r\n              <el-table :data=\"columns\" border size=\"mini\" style=\"width: 100%; margin-top: 8px;\">\r\n                <el-table-column prop=\"name\" label=\"字段名\" width=\"120\" />\r\n                <el-table-column prop=\"type\" label=\"类型\" width=\"120\" />\r\n                <el-table-column prop=\"nullable\" label=\"可空\" width=\"80\">\r\n                  <template slot-scope=\"scope\">\r\n                    <el-tag :type=\"scope.row.nullable ? 'info' : 'success'\">{{ scope.row.nullable ? '是' : '否' }}</el-tag>\r\n                  </template>\r\n                </el-table-column>\r\n                <el-table-column prop=\"default\" label=\"默认值\" />\r\n              </el-table>\r\n            </div>\r\n          </div>\r\n          <div v-else style=\"text-align:center; color:#888; padding: 60px 0;\">请选择左侧表名</div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n  <div v-else style=\"text-align:center; color:#888; padding: 60px 0;\">无权限，仅超级管理员可访问</div>\r\n</template>\r\n\r\n<script>\r\nimport { getDbTables, getDbTableColumns, getDbTableRows } from '@/api/dbAdmin'\r\nimport { mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'DatabaseViewer',\r\n  data() {\r\n    return {\r\n      tables: [],\r\n      selectedTable: '',\r\n      columns: [],\r\n      rows: [],\r\n      total: 0,\r\n      page: 1,\r\n      pageSize: 20,\r\n      loading: false,\r\n      inited: false,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      user: state => state.user,\r\n    }),\r\n    isSuperAdmin() {\r\n      return this.user && this.user.role === 'superadmin'\r\n    },\r\n  },\r\n  \r\n  methods: {\r\n    async initIfNeeded() {\r\n      if (!this.inited && this.isSuperAdmin) {\r\n        this.inited = true\r\n        await this.fetchTables()\r\n      }\r\n    },\r\n    async fetchTables() {\r\n      try {\r\n        const res = await getDbTables()\r\n        this.tables = res.data.tables || []\r\n        if (this.tables.length > 0) {\r\n          this.handleTableSelect(this.tables[0])\r\n        }\r\n      } catch (e) {\r\n        this.$message.error('获取表名失败')\r\n      }\r\n    },\r\n    async handleTableSelect(table) {\r\n      this.selectedTable = table\r\n      this.page = 1\r\n      await this.fetchTableColumns()\r\n      await this.fetchTableRows()\r\n    },\r\n    async fetchTableColumns() {\r\n      try {\r\n        const res = await getDbTableColumns(this.selectedTable)\r\n        // 兼容不同数据库字段名\r\n        this.columns = (res.data.columns || []).map(col => ({\r\n          name: col.name || col.column_name,\r\n          type: col.type || col.type_name,\r\n          nullable: col.nullable !== undefined ? col.nullable : col.nullable_,\r\n          default: col.default,\r\n        }))\r\n      } catch (e) {\r\n        this.columns = []\r\n        this.$message.error('获取字段信息失败')\r\n      }\r\n    },\r\n    async fetchTableRows() {\r\n      this.loading = true\r\n      try {\r\n        const res = await getDbTableRows(this.selectedTable, {\r\n          skip: (this.page - 1) * this.pageSize,\r\n          limit: this.pageSize,\r\n        })\r\n        this.rows = res.data.rows || []\r\n        // 估算总数（如有需要可扩展后端返回总数）\r\n        this.total = (this.rows.length < this.pageSize && this.page === 1) ? this.rows.length : this.page * this.pageSize + (this.rows.length === this.pageSize ? 1 : 0)\r\n      } catch (e) {\r\n        this.rows = []\r\n        this.$message.error('获取表数据失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    handlePageChange(page) {\r\n      this.page = page\r\n      this.fetchTableRows()\r\n    },\r\n    refreshTable() {\r\n      this.fetchTableColumns()\r\n      this.fetchTableRows()\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.db-viewer {\r\n  padding: 24px;\r\n}\r\n.db-tables-list {\r\n  border-right: 1px solid #eee;\r\n  min-height: 70vh;\r\n}\r\n.db-table-content {\r\n  padding-left: 24px;\r\n}\r\n.db-table-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n</style> "],"mappings":"AA0DA,SAAAA,WAAA,EAAAC,iBAAA,EAAAC,cAAA;AACA,SAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,aAAA;MACAC,OAAA;MACAC,IAAA;MACAC,KAAA;MACAC,IAAA;MACAC,QAAA;MACAC,OAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAZ,QAAA;MACAa,IAAA,EAAAC,KAAA,IAAAA,KAAA,CAAAD;IACA;IACAE,aAAA;MACA,YAAAF,IAAA,SAAAA,IAAA,CAAAG,IAAA;IACA;EACA;EAEAC,OAAA;IACA,MAAAC,aAAA;MACA,UAAAP,MAAA,SAAAI,YAAA;QACA,KAAAJ,MAAA;QACA,WAAAQ,WAAA;MACA;IACA;IACA,MAAAA,YAAA;MACA;QACA,MAAAC,GAAA,SAAAvB,WAAA;QACA,KAAAM,MAAA,GAAAiB,GAAA,CAAAlB,IAAA,CAAAC,MAAA;QACA,SAAAA,MAAA,CAAAkB,MAAA;UACA,KAAAC,iBAAA,MAAAnB,MAAA;QACA;MACA,SAAAoB,CAAA;QACA,KAAAC,QAAA,CAAAC,KAAA;MACA;IACA;IACA,MAAAH,kBAAAI,KAAA;MACA,KAAAtB,aAAA,GAAAsB,KAAA;MACA,KAAAlB,IAAA;MACA,WAAAmB,iBAAA;MACA,WAAAC,cAAA;IACA;IACA,MAAAD,kBAAA;MACA;QACA,MAAAP,GAAA,SAAAtB,iBAAA,MAAAM,aAAA;QACA;QACA,KAAAC,OAAA,IAAAe,GAAA,CAAAlB,IAAA,CAAAG,OAAA,QAAAwB,GAAA,CAAAC,GAAA;UACA7B,IAAA,EAAA6B,GAAA,CAAA7B,IAAA,IAAA6B,GAAA,CAAAC,WAAA;UACAC,IAAA,EAAAF,GAAA,CAAAE,IAAA,IAAAF,GAAA,CAAAG,SAAA;UACAC,QAAA,EAAAJ,GAAA,CAAAI,QAAA,KAAAC,SAAA,GAAAL,GAAA,CAAAI,QAAA,GAAAJ,GAAA,CAAAM,SAAA;UACAC,OAAA,EAAAP,GAAA,CAAAO;QACA;MACA,SAAAd,CAAA;QACA,KAAAlB,OAAA;QACA,KAAAmB,QAAA,CAAAC,KAAA;MACA;IACA;IACA,MAAAG,eAAA;MACA,KAAAlB,OAAA;MACA;QACA,MAAAU,GAAA,SAAArB,cAAA,MAAAK,aAAA;UACAkC,IAAA,QAAA9B,IAAA,aAAAC,QAAA;UACA8B,KAAA,OAAA9B;QACA;QACA,KAAAH,IAAA,GAAAc,GAAA,CAAAlB,IAAA,CAAAI,IAAA;QACA;QACA,KAAAC,KAAA,QAAAD,IAAA,CAAAe,MAAA,QAAAZ,QAAA,SAAAD,IAAA,cAAAF,IAAA,CAAAe,MAAA,QAAAb,IAAA,QAAAC,QAAA,SAAAH,IAAA,CAAAe,MAAA,UAAAZ,QAAA;MACA,SAAAc,CAAA;QACA,KAAAjB,IAAA;QACA,KAAAkB,QAAA,CAAAC,KAAA;MACA;QACA,KAAAf,OAAA;MACA;IACA;IACA8B,iBAAAhC,IAAA;MACA,KAAAA,IAAA,GAAAA,IAAA;MACA,KAAAoB,cAAA;IACA;IACAa,aAAA;MACA,KAAAd,iBAAA;MACA,KAAAC,cAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}