{"ast":null,"code":"import router from './index';\nimport store from '@/store';\nimport { Message } from 'element-ui';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\n\n// 配置NProgress\nNProgress.configure({\n  showSpinner: false\n});\n\n// 白名单路由（不需要登录即可访问）\nconst whiteList = ['/', '/equipment', '/equipment/:id', '/reservation/query', '/reservation/:code', '/admin/login', '/404'];\n\n// 路由前置守卫\nrouter.beforeEach(async (to, from, next) => {\n  // 开始进度条\n  NProgress.start();\n\n  // 设置页面标题\n  document.title = to.meta.title ? `${to.meta.title} - HTNIA设备预定系统` : 'HTNIA设备预定系统';\n\n  // 获取用户登录状态\n  const hasToken = store.getters.getToken;\n\n  // 判断是否需要登录权限\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  if (hasToken) {\n    if (to.path === '/admin/login') {\n      // 已登录，跳转到管理控制台\n      next({\n        path: '/admin/dashboard'\n      });\n      NProgress.done();\n    } else {\n      // 已登录，获取用户信息\n      const hasUserInfo = store.getters.currentUser && store.getters.currentUser.id;\n      if (hasUserInfo) {\n        next();\n      } else {\n        try {\n          // 获取用户信息\n          await store.dispatch('getUserInfo');\n          next();\n        } catch (error) {\n          // 获取用户信息失败，清除token并重新登录\n          await store.dispatch('logout');\n          Message.error('登录已过期，请重新登录');\n          next(`/admin/login?redirect=${to.path}`);\n          NProgress.done();\n        }\n      }\n    }\n  } else {\n    // 未登录\n    if (requiresAuth) {\n      // 需要登录权限，跳转到登录页\n      next(`/admin/login?redirect=${to.path}`);\n      NProgress.done();\n    } else {\n      // 不需要登录权限，直接访问\n      next();\n    }\n  }\n});\n\n// 路由后置守卫\nrouter.afterEach(() => {\n  // 结束进度条\n  NProgress.done();\n});\nexport default router;","map":{"version":3,"names":["router","store","Message","NProgress","configure","showSpinner","whiteList","beforeEach","to","from","next","start","document","title","meta","hasToken","getters","getToken","requiresAuth","matched","some","record","path","done","hasUserInfo","currentUser","id","dispatch","error","afterEach"],"sources":["D:/Python Projects/equipment-reservation-system/frontend/src/router/permission.js"],"sourcesContent":["import router from './index'\nimport store from '@/store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\n// 配置NProgress\nNProgress.configure({ showSpinner: false })\n\n// 白名单路由（不需要登录即可访问）\nconst whiteList = [\n  '/',\n  '/equipment',\n  '/equipment/:id',\n  '/reservation/query',\n  '/reservation/:code',\n  '/admin/login',\n  '/404'\n]\n\n// 路由前置守卫\nrouter.beforeEach(async (to, from, next) => {\n  // 开始进度条\n  NProgress.start()\n  \n  // 设置页面标题\n  document.title = to.meta.title ? `${to.meta.title} - HTNIA设备预定系统` : 'HTNIA设备预定系统'\n  \n  // 获取用户登录状态\n  const hasToken = store.getters.getToken\n  \n  // 判断是否需要登录权限\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth)\n  \n  if (hasToken) {\n    if (to.path === '/admin/login') {\n      // 已登录，跳转到管理控制台\n      next({ path: '/admin/dashboard' })\n      NProgress.done()\n    } else {\n      // 已登录，获取用户信息\n      const hasUserInfo = store.getters.currentUser && store.getters.currentUser.id\n      \n      if (hasUserInfo) {\n        next()\n      } else {\n        try {\n          // 获取用户信息\n          await store.dispatch('getUserInfo')\n          next()\n        } catch (error) {\n          // 获取用户信息失败，清除token并重新登录\n          await store.dispatch('logout')\n          Message.error('登录已过期，请重新登录')\n          next(`/admin/login?redirect=${to.path}`)\n          NProgress.done()\n        }\n      }\n    }\n  } else {\n    // 未登录\n    if (requiresAuth) {\n      // 需要登录权限，跳转到登录页\n      next(`/admin/login?redirect=${to.path}`)\n      NProgress.done()\n    } else {\n      // 不需要登录权限，直接访问\n      next()\n    }\n  }\n})\n\n// 路由后置守卫\nrouter.afterEach(() => {\n  // 结束进度条\n  NProgress.done()\n})\n\nexport default router\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,SAAS;AAC5B,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAO,yBAAyB;;AAEhC;AACAA,SAAS,CAACC,SAAS,CAAC;EAAEC,WAAW,EAAE;AAAM,CAAC,CAAC;;AAE3C;AACA,MAAMC,SAAS,GAAG,CAChB,GAAG,EACH,YAAY,EACZ,gBAAgB,EAChB,oBAAoB,EACpB,oBAAoB,EACpB,cAAc,EACd,MAAM,CACP;;AAED;AACAN,MAAM,CAACO,UAAU,CAAC,OAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC1C;EACAP,SAAS,CAACQ,KAAK,CAAC,CAAC;;EAEjB;EACAC,QAAQ,CAACC,KAAK,GAAGL,EAAE,CAACM,IAAI,CAACD,KAAK,GAAG,GAAGL,EAAE,CAACM,IAAI,CAACD,KAAK,gBAAgB,GAAG,aAAa;;EAEjF;EACA,MAAME,QAAQ,GAAGd,KAAK,CAACe,OAAO,CAACC,QAAQ;;EAEvC;EACA,MAAMC,YAAY,GAAGV,EAAE,CAACW,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACP,IAAI,CAACI,YAAY,CAAC;EAExE,IAAIH,QAAQ,EAAE;IACZ,IAAIP,EAAE,CAACc,IAAI,KAAK,cAAc,EAAE;MAC9B;MACAZ,IAAI,CAAC;QAAEY,IAAI,EAAE;MAAmB,CAAC,CAAC;MAClCnB,SAAS,CAACoB,IAAI,CAAC,CAAC;IAClB,CAAC,MAAM;MACL;MACA,MAAMC,WAAW,GAAGvB,KAAK,CAACe,OAAO,CAACS,WAAW,IAAIxB,KAAK,CAACe,OAAO,CAACS,WAAW,CAACC,EAAE;MAE7E,IAAIF,WAAW,EAAE;QACfd,IAAI,CAAC,CAAC;MACR,CAAC,MAAM;QACL,IAAI;UACF;UACA,MAAMT,KAAK,CAAC0B,QAAQ,CAAC,aAAa,CAAC;UACnCjB,IAAI,CAAC,CAAC;QACR,CAAC,CAAC,OAAOkB,KAAK,EAAE;UACd;UACA,MAAM3B,KAAK,CAAC0B,QAAQ,CAAC,QAAQ,CAAC;UAC9BzB,OAAO,CAAC0B,KAAK,CAAC,aAAa,CAAC;UAC5BlB,IAAI,CAAC,yBAAyBF,EAAE,CAACc,IAAI,EAAE,CAAC;UACxCnB,SAAS,CAACoB,IAAI,CAAC,CAAC;QAClB;MACF;IACF;EACF,CAAC,MAAM;IACL;IACA,IAAIL,YAAY,EAAE;MAChB;MACAR,IAAI,CAAC,yBAAyBF,EAAE,CAACc,IAAI,EAAE,CAAC;MACxCnB,SAAS,CAACoB,IAAI,CAAC,CAAC;IAClB,CAAC,MAAM;MACL;MACAb,IAAI,CAAC,CAAC;IACR;EACF;AACF,CAAC,CAAC;;AAEF;AACAV,MAAM,CAAC6B,SAAS,CAAC,MAAM;EACrB;EACA1B,SAAS,CAACoB,IAAI,CAAC,CAAC;AAClB,CAAC,CAAC;AAEF,eAAevB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}