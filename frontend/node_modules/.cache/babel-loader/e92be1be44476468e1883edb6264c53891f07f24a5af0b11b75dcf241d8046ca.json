{"ast":null,"code":"import Vue from 'vue';\nconst dummyContainer = typeof document !== 'undefined' ? document.createDocumentFragment() : null;\nconst TransportContainer = Vue.extend({\n  props: {\n    inPlaceOf: typeof Element !== 'undefined' ? Element : Object,\n    reportEl: Function,\n    elTag: String,\n    elClasses: Array,\n    elStyle: Object,\n    elAttrs: Object\n  },\n  render(h) {\n    return h(this.elTag, {\n      class: this.elClasses,\n      style: this.elStyle,\n      attrs: this.elAttrs\n    }, this.$slots.default || []);\n  },\n  mounted() {\n    replaceEl(this.$el, this.inPlaceOf);\n    this.inPlaceOf.style.display = 'none';\n    this.reportEl(this.$el);\n  },\n  updated() {\n    /*\n    If the ContentContainer's tagName changed, it will create a new DOM element in its\n    original place. Detect this and re-replace.\n    */\n    if (dummyContainer && this.inPlaceOf.parentNode !== dummyContainer) {\n      replaceEl(this.$el, this.inPlaceOf);\n      this.reportEl(this.$el);\n    }\n  },\n  beforeDestroy() {\n    // protect against Preact recreating and rerooting inPlaceOf element\n    if (dummyContainer && this.inPlaceOf.parentNode === dummyContainer) {\n      dummyContainer.removeChild(this.inPlaceOf);\n    }\n    this.reportEl(null);\n  }\n});\nexport default TransportContainer;\nfunction replaceEl(subject, inPlaceOf) {\n  var _a;\n  (_a = inPlaceOf.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(subject, inPlaceOf.nextSibling);\n  if (dummyContainer) {\n    dummyContainer.appendChild(inPlaceOf);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}