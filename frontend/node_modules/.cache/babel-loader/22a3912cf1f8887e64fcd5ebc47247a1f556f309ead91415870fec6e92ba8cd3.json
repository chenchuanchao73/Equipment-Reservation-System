{"ast":null,"code":"import { reservationApi, recurringReservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'ReservationDetail',\n  data() {\n    return {\n      loading: false,\n      cancelling: false,\n      returning: false,\n      reservation: null,\n      isRecurringReservation: false,\n      recurringReservationId: null,\n      childReservationStartTime: null,\n      childReservationEndTime: null,\n      cancelDialogVisible: false,\n      returnDialogVisible: false,\n      cancelForm: {\n        reason: ''\n      },\n      returnForm: {\n        reason: ''\n      }\n    };\n  },\n  created() {\n    this.fetchReservation();\n  },\n  methods: {\n    async fetchReservation() {\n      this.loading = true;\n      try {\n        // 检查是否是通过预约序号查询\n        let reservationNumber = this.$route.params.number;\n        const reservationCode = this.$route.params.code;\n\n        // 如果URL中没有预约序号，尝试从localStorage中获取\n        if (!reservationNumber) {\n          const savedReservationNumber = localStorage.getItem('current_reservation_number');\n          if (savedReservationNumber) {\n            console.log('从localStorage中获取预约序号:', savedReservationNumber);\n            reservationNumber = savedReservationNumber;\n            // 使用后清除，避免影响后续操作\n            localStorage.removeItem('current_reservation_number');\n          }\n        }\n\n        // 检查是否是子预约查询请求\n        const isChildReservation = this.$route.query.child === 'true';\n        const childReservationId = this.$route.query.id;\n        const recurringId = this.$route.query.recurringId;\n        const startTime = this.$route.query.startTime;\n        const endTime = this.$route.query.endTime;\n\n        // 如果是子预约查询，保存循环预约ID\n        if (isChildReservation && recurringId) {\n          this.recurringReservationId = recurringId;\n          console.log('Child reservation query detected, saving recurring ID:', recurringId);\n        }\n\n        // 如果是通过预约序号查询\n        if (reservationNumber) {\n          console.log('通过预约序号查询预约:', reservationNumber);\n\n          // 直接通过预约序号查询\n          const response = await reservationApi.getReservationByNumber(reservationNumber);\n          if (response.data.success) {\n            this.reservation = response.data.data;\n            console.log('通过预约序号找到预约:', this.reservation);\n\n            // 显示预约序号信息\n            this.$notify({\n              title: '预约详情',\n              message: `当前查看的是预约序号: ${this.reservation.reservation_number}`,\n              type: 'info',\n              duration: 5000\n            });\n\n            // 如果是子预约查询，并且有开始和结束时间，则使用URL中的时间覆盖API返回的时间\n            if (this.childReservationStartTime && this.childReservationEndTime) {\n              console.log('Overriding reservation times with child reservation times');\n              this.reservation.start_datetime = this.childReservationStartTime;\n              this.reservation.end_datetime = this.childReservationEndTime;\n            }\n\n            // 检查是否是循环预约的子预约\n            if (this.reservation.recurring_reservation_id) {\n              this.isRecurringReservation = true;\n              this.recurringReservationId = this.reservation.recurring_reservation_id;\n\n              // 添加提示，告知用户这是循环预约的一部分\n              this.$notify({\n                title: this.$t('reservation.recurringReservationNotice'),\n                message: this.$t('reservation.partOfRecurringReservation'),\n                type: 'info',\n                duration: 8000\n              });\n              console.log('This is part of a recurring reservation:', this.recurringReservationId);\n            }\n          } else {\n            this.reservation = null;\n            this.$message.error(response.data.message || this.$t('reservation.notFound'));\n          }\n          this.loading = false;\n          return;\n        }\n\n        // 如果不是通过预约序号查询，则继续原来的逻辑\n        // 如果不是子预约查询，则先尝试查询循环预约\n        if (!isChildReservation) {\n          try {\n            const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(reservationCode);\n            if (recurringResponse.data.success) {\n              // 如果是循环预约，重定向到循环预约详情页\n              console.log('Found recurring reservation, redirecting to recurring reservation detail page');\n              // 使用window.location直接跳转，避免路由守卫问题\n              window.location.href = `#/recurring-reservation/${recurringResponse.data.data.id}`;\n              return;\n            }\n          } catch (recurringError) {\n            console.log('Not a recurring reservation, continuing with normal reservation lookup');\n            // 不是循环预约，继续查询普通预约\n          }\n        } else {\n          console.log('Child reservation query detected, skipping recurring reservation check');\n\n          // 如果有子预约ID和开始/结束时间，尝试通过ID获取子预约详情\n          if (childReservationId && startTime && endTime) {\n            try {\n              // 由于后端没有直接通过ID获取预约的API，我们仍然使用预约码查询，但会在前端处理\n              console.log('Fetching child reservation with ID:', childReservationId);\n              console.log('Child reservation time:', startTime, 'to', endTime);\n\n              // 保存子预约的开始和结束时间，用于后续处理\n              this.childReservationStartTime = startTime;\n              this.childReservationEndTime = endTime;\n            } catch (error) {\n              console.error('Failed to fetch child reservation by ID:', error);\n            }\n          }\n        }\n\n        // 查询普通预约\n        // 检查URL中是否包含预约序号参数\n        const queryReservationNumber = this.$route.query.reservation_number;\n\n        // 确保reservationNumber是字符串，并且不是一个对象\n        let reservationNumberStr = null;\n        if (queryReservationNumber) {\n          if (typeof queryReservationNumber === 'object') {\n            console.warn('预约序号参数是对象类型，将被忽略:', queryReservationNumber);\n          } else {\n            reservationNumberStr = String(queryReservationNumber);\n          }\n        }\n        console.log('获取预约详情:', {\n          reservationCode,\n          reservationNumber: reservationNumberStr || '未提供',\n          reservationNumberType: queryReservationNumber ? typeof queryReservationNumber : 'null',\n          routeQuery: this.$route.query\n        });\n\n        // 如果URL中包含预约序号参数，则传递给API\n        const response = await reservationApi.getReservationByCode(reservationCode, reservationNumberStr);\n        if (response.data.success) {\n          this.reservation = response.data.data;\n\n          // 如果是子预约查询，并且有开始和结束时间，则使用URL中的时间覆盖API返回的时间\n          if (this.childReservationStartTime && this.childReservationEndTime) {\n            console.log('Overriding reservation times with child reservation times');\n            this.reservation.start_datetime = this.childReservationStartTime;\n            this.reservation.end_datetime = this.childReservationEndTime;\n          }\n\n          // 检查是否是循环预约的子预约\n          if (this.reservation.recurring_reservation_id) {\n            this.isRecurringReservation = true;\n            this.recurringReservationId = this.reservation.recurring_reservation_id;\n\n            // 添加提示，告知用户这是循环预约的一部分\n            this.$notify({\n              title: this.$t('reservation.recurringReservationNotice'),\n              message: this.$t('reservation.partOfRecurringReservation'),\n              type: 'info',\n              duration: 8000\n            });\n            console.log('This is part of a recurring reservation:', this.recurringReservationId);\n          }\n        } else {\n          this.reservation = null;\n          this.$message.error(response.data.message || this.$t('reservation.notFound'));\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservation:', error);\n        this.$message.error(this.$t('common.error'));\n        this.reservation = null;\n      } finally {\n        this.loading = false;\n      }\n    },\n    showCancelDialog() {\n      this.cancelDialogVisible = true;\n    },\n    async cancelReservation() {\n      this.cancelling = true;\n      try {\n        const reservationCode = this.reservation.reservation_code;\n\n        // 打印预约详情，帮助调试\n        console.log('预约详情:', this.reservation);\n        console.log('预约序号:', this.reservation.reservation_number);\n        console.log('预约码:', reservationCode);\n        const data = {\n          reason: this.cancelForm.reason,\n          user_email: this.reservation.user_email,\n          lang: this.$i18n.locale\n        };\n\n        // 添加预约序号参数，确保只取消特定的子预约\n        if (this.reservation.reservation_number) {\n          // 确保reservation_number是字符串\n          data.reservation_number = String(this.reservation.reservation_number);\n          console.log('预约序号参数存在:', data.reservation_number);\n          console.log('预约序号类型:', typeof data.reservation_number);\n        } else {\n          console.warn('预约序号参数不存在，将取消所有具有相同预约码的预约');\n        }\n\n        // 打印请求参数\n        console.log('取消预约请求参数:', data);\n        const response = await reservationApi.cancelReservation(reservationCode, data);\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.cancelSuccess'));\n          this.cancelDialogVisible = false;\n\n          // 立即更新当前页面的状态显示\n          this.reservation.status = 'cancelled';\n\n          // 保存状态变更到localStorage，以便其他页面可以检测到状态变化\n          this.saveReservationStatus('cancelled');\n          console.log('预约已取消，状态已更新为:', this.reservation.status);\n\n          // 设置一个延迟，让用户看到状态变化后再跳转\n          setTimeout(() => {\n            // 检查是否是从循环预约详情页面跳转过来的\n            const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId;\n            if (isFromRecurring) {\n              // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n              this.$router.push({\n                path: `/recurring-reservation/${this.recurringReservationId}`,\n                query: {\n                  fromChild: 'true',\n                  reservation_number: this.reservation.reservation_number\n                }\n              });\n            } else {\n              // 否则返回到预约管理页面\n              this.$router.push('/reservation/manage');\n            }\n          }, 1500); // 增加延迟时间，让用户有更多时间看到状态变化\n        } else {\n          this.$message.error(response.data.message || this.$t('common.error'));\n        }\n      } catch (error) {\n        console.error('Failed to cancel reservation:', error);\n        this.$message.error(this.$t('common.error'));\n      } finally {\n        this.cancelling = false;\n      }\n    },\n    // 保存预约状态到localStorage\n    saveReservationStatus(status) {\n      if (!this.reservation) return;\n\n      // 使用预约码作为键\n      const stateKey = `reservation_status_${this.reservation.reservation_code}`;\n\n      // 保存状态信息\n      const state = {\n        statusText: this.getStatusText(status),\n        statusType: this.getStatusClass(status),\n        dbStatus: status,\n        forcedStatus: status,\n        timestamp: new Date().getTime(),\n        permanent: true,\n        reservationCode: this.reservation.reservation_code\n      };\n      console.log('保存预约状态到localStorage:', state);\n      localStorage.setItem(stateKey, JSON.stringify(state));\n\n      // 如果是循环预约的子预约，还需要保存循环预约ID\n      if (this.isRecurringReservation && this.recurringReservationId) {\n        // 使用循环预约ID和预约码的组合作为键\n        const recurringStateKey = `recurring_reservation_${this.recurringReservationId}_child_status_changed`;\n\n        // 保存状态变更信息\n        const recurringState = {\n          reservationCode: this.reservation.reservation_code,\n          status: status,\n          timestamp: new Date().getTime()\n        };\n        console.log('保存循环预约子预约状态变更到localStorage:', recurringState);\n        localStorage.setItem(recurringStateKey, JSON.stringify(recurringState));\n      }\n    },\n    formatDateTime(dateTime) {\n      if (!dateTime) return '';\n      const date = new Date(dateTime);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    // 判断预约是否正在进行中\n    isReservationInProgress(reservation) {\n      if (!reservation) return false;\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n\n      // 当前时间在开始时间和结束时间之间\n      return now >= start && now <= end;\n    },\n    // 显示提前归还对话框\n    showReturnDialog() {\n      this.returnDialogVisible = true;\n    },\n    // 提前归还设备\n    async returnEquipment() {\n      this.returning = true;\n      try {\n        const reservationCode = this.reservation.reservation_code;\n\n        // 打印预约详情，帮助调试\n        console.log('提前归还 - 预约详情:', this.reservation);\n        console.log('提前归还 - 预约序号:', this.reservation.reservation_number);\n        console.log('提前归还 - 预约码:', reservationCode);\n        const data = {\n          reason: this.returnForm.reason,\n          user_email: this.reservation.user_email,\n          lang: this.$i18n.locale,\n          early_return: true\n        };\n\n        // 添加预约序号参数，确保只取消特定的子预约\n        if (this.reservation.reservation_number) {\n          // 确保reservation_number是字符串\n          data.reservation_number = String(this.reservation.reservation_number);\n          console.log('提前归还 - 预约序号参数存在:', data.reservation_number);\n          console.log('提前归还 - 预约序号类型:', typeof data.reservation_number);\n        } else {\n          console.warn('提前归还 - 预约序号参数不存在，将取消所有具有相同预约码的预约');\n        }\n\n        // 打印请求参数\n        console.log('提前归还 - 请求参数:', data);\n        const response = await reservationApi.cancelReservation(reservationCode, data);\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.returnSuccess'));\n          this.returnDialogVisible = false;\n\n          // 立即更新当前页面的状态显示\n          this.reservation.status = 'cancelled';\n\n          // 保存状态变更到localStorage，以便其他页面可以检测到状态变化\n          this.saveReservationStatus('cancelled');\n          console.log('预约已提前归还，状态已更新为:', this.reservation.status);\n\n          // 设置一个延迟，让用户看到状态变化后再跳转\n          setTimeout(() => {\n            // 检查是否是从循环预约详情页面跳转过来的\n            const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId;\n            if (isFromRecurring) {\n              // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n              this.$router.push({\n                path: `/recurring-reservation/${this.recurringReservationId}`,\n                query: {\n                  fromChild: 'true',\n                  reservation_number: this.reservation.reservation_number\n                }\n              });\n            } else {\n              // 否则返回到预约管理页面\n              this.$router.push('/reservation/manage');\n            }\n          }, 1500); // 增加延迟时间，让用户有更多时间看到状态变化\n        } else {\n          this.$message.error(response.data.message || this.$t('common.error'));\n        }\n      } catch (error) {\n        console.error('Failed to return equipment:', error);\n        this.$message.error(this.$t('common.error'));\n      } finally {\n        this.returning = false;\n      }\n    },\n    // 返回上一页或跳转到指定页面\n    goBack() {\n      // 检查是否是从循环预约详情页面跳转过来的\n      const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId;\n      if (isFromRecurring) {\n        // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n        // 添加fromChild参数，标记是从子预约详情页面返回的\n        this.$router.push({\n          path: `/recurring-reservation/${this.recurringReservationId}`,\n          query: {\n            fromChild: 'true',\n            reservation_number: this.reservation.reservation_number\n          }\n        });\n      } else {\n        // 否则返回到预约查询页面\n        this.$router.push('/reservation/query');\n      }\n    },\n    // 查看循环预约\n    viewRecurringReservation() {\n      if (this.recurringReservationId) {\n        // 将当前预约序号作为查询参数传递，以便在循环预约详情页面中高亮显示当前预约\n        this.$router.push({\n          path: `/recurring-reservation/${this.recurringReservationId}`,\n          query: {\n            reservation_number: this.reservation.reservation_number,\n            from_detail: 'true'\n          }\n        });\n      } else {\n        this.$message.warning('无法查看循环预约详情，缺少循环预约ID');\n      }\n    },\n    getStatusClass(status) {\n      const s = (status || '').toLowerCase();\n      switch (s) {\n        case 'confirmed':\n          return 'confirmed';\n        case 'cancelled':\n          return 'cancelled';\n        case 'pending':\n          return 'pending';\n        case 'expired':\n          return 'expired';\n        case 'in_use':\n          return 'in-use';\n        default:\n          return 'unknown';\n      }\n    },\n    getStatusIcon(status) {\n      const s = (status || '').toLowerCase();\n      switch (s) {\n        case 'confirmed':\n          return 'el-icon-success';\n        case 'cancelled':\n          return 'el-icon-close';\n        case 'pending':\n          return 'el-icon-time';\n        case 'expired':\n          return 'el-icon-warning';\n        case 'in_use':\n          return 'el-icon-refresh';\n        default:\n          return 'el-icon-question';\n      }\n    },\n    getStatusText(status) {\n      const s = (status || '').toLowerCase();\n      switch (s) {\n        case 'confirmed':\n          return this.$t('reservation.confirmed');\n        case 'cancelled':\n          return this.$t('reservation.cancelled');\n        case 'pending':\n          return this.$t('reservation.pending');\n        case 'expired':\n          return this.$t('reservation.expired');\n        case 'in_use':\n          return this.$t('reservation.inUse');\n        default:\n          return status;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}