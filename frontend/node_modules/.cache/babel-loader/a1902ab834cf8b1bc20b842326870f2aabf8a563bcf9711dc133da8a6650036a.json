{"ast":null,"code":"var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c('div', {\n    staticClass: \"admin-settings\"\n  }, [_c('el-tabs', {\n    on: {\n      \"tab-click\": _vm.handleTabClick\n    },\n    model: {\n      value: _vm.activeTab,\n      callback: function ($$v) {\n        _vm.activeTab = $$v;\n      },\n      expression: \"activeTab\"\n    }\n  }, [_c('el-tab-pane', {\n    attrs: {\n      \"label\": \"基础设置\",\n      \"name\": \"base\"\n    }\n  }, [_c('p', [_vm._v(\"（这里是原有系统设置内容）\")])]), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"邮件设置\",\n      \"name\": \"email\"\n    }\n  }, [_c('el-form', {\n    attrs: {\n      \"model\": _vm.emailSettings,\n      \"label-width\": \"120px\"\n    },\n    nativeOn: {\n      \"submit\": function ($event) {\n        $event.preventDefault();\n        return _vm.saveEmailSettings.apply(null, arguments);\n      }\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"SMTP服务器\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: _vm.emailSettings.smtp_server,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"smtp_server\", $$v);\n      },\n      expression: \"emailSettings.smtp_server\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"端口\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"type\": \"number\"\n    },\n    model: {\n      value: _vm.emailSettings.smtp_port,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"smtp_port\", $$v);\n      },\n      expression: \"emailSettings.smtp_port\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"发件人邮箱\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: _vm.emailSettings.sender_email,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"sender_email\", $$v);\n      },\n      expression: \"emailSettings.sender_email\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"发件人名称\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: _vm.emailSettings.sender_name,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"sender_name\", $$v);\n      },\n      expression: \"emailSettings.sender_name\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"SMTP用户名\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: _vm.emailSettings.smtp_username,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"smtp_username\", $$v);\n      },\n      expression: \"emailSettings.smtp_username\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"SMTP密码\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"show-password\": \"\"\n    },\n    model: {\n      value: _vm.emailSettings.smtp_password,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"smtp_password\", $$v);\n      },\n      expression: \"emailSettings.smtp_password\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"抄送人列表\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"type\": \"textarea\",\n      \"rows\": 2,\n      \"placeholder\": \"多个邮箱请用逗号分隔，例如：admin1@example.com, admin2@example.com\"\n    },\n    model: {\n      value: _vm.emailSettings.cc_list,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"cc_list\", $$v);\n      },\n      expression: \"emailSettings.cc_list\"\n    }\n  }), _c('div', {\n    staticClass: \"form-tip\"\n  }, [_vm._v(\"多个邮箱请用逗号分隔，所有发出的邮件都会抄送给这些邮箱\")])], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"密送人列表\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"type\": \"textarea\",\n      \"rows\": 2,\n      \"placeholder\": \"多个邮箱请用逗号分隔，例如：manager1@example.com, manager2@example.com\"\n    },\n    model: {\n      value: _vm.emailSettings.bcc_list,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"bcc_list\", $$v);\n      },\n      expression: \"emailSettings.bcc_list\"\n    }\n  }), _c('div', {\n    staticClass: \"form-tip\"\n  }, [_vm._v(\"多个邮箱请用逗号分隔，所有发出的邮件都会密送给这些邮箱\")])], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"使用SSL\"\n    }\n  }, [_c('el-switch', {\n    model: {\n      value: _vm.emailSettings.use_ssl,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"use_ssl\", $$v);\n      },\n      expression: \"emailSettings.use_ssl\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"启用邮件功能\"\n    }\n  }, [_c('el-switch', {\n    model: {\n      value: _vm.emailSettings.enabled,\n      callback: function ($$v) {\n        _vm.$set(_vm.emailSettings, \"enabled\", $$v);\n      },\n      expression: \"emailSettings.enabled\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"测试收件人邮箱\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: _vm.testEmail,\n      callback: function ($$v) {\n        _vm.testEmail = $$v;\n      },\n      expression: \"testEmail\"\n    }\n  }), _c('el-button', {\n    staticStyle: {\n      \"margin-left\": \"10px\"\n    },\n    attrs: {\n      \"type\": \"primary\",\n      \"loading\": _vm.testLoading\n    },\n    on: {\n      \"click\": _vm.testEmailSend\n    }\n  }, [_vm._v(\"测试邮件\")])], 1), _c('el-form-item', [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.saveEmailSettings\n    }\n  }, [_vm._v(\"保存\")])], 1)], 1)], 1), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"邮件模板\",\n      \"name\": \"template\"\n    }\n  }, [_c('div', {\n    staticStyle: {\n      \"margin-bottom\": \"10px\"\n    }\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function ($event) {\n        return _vm.openTemplateDialog();\n      }\n    }\n  }, [_vm._v(\"新增模板\")])], 1), _c('el-table', {\n    staticStyle: {\n      \"width\": \"100%\"\n    },\n    attrs: {\n      \"data\": _vm.templateList,\n      \"border\": \"\"\n    }\n  }, [_c('el-table-column', {\n    attrs: {\n      \"prop\": \"name\",\n      \"label\": \"模板名称\",\n      \"min-width\": \"120\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (scope) {\n        return [_vm.editRow !== scope.row.id ? _c('span', [_vm._v(_vm._s(scope.row.name))]) : _c('el-input', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          model: {\n            value: _vm.editCache.name,\n            callback: function ($$v) {\n              _vm.$set(_vm.editCache, \"name\", $$v);\n            },\n            expression: \"editCache.name\"\n          }\n        })];\n      }\n    }])\n  }), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"template_key\",\n      \"label\": \"模板键名\",\n      \"min-width\": \"120\"\n    }\n  }), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"subject\",\n      \"label\": \"主题\",\n      \"min-width\": \"150\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (scope) {\n        return [_vm.editRow !== scope.row.id ? _c('span', [_vm._v(_vm._s(scope.row.subject))]) : _c('el-input', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          model: {\n            value: _vm.editCache.subject,\n            callback: function ($$v) {\n              _vm.$set(_vm.editCache, \"subject\", $$v);\n            },\n            expression: \"editCache.subject\"\n          }\n        })];\n      }\n    }])\n  }), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"language\",\n      \"label\": \"语言\",\n      \"min-width\": \"80\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (scope) {\n        return [_vm.editRow !== scope.row.id ? _c('span', [_vm._v(_vm._s(scope.row.language))]) : _c('el-select', {\n          staticStyle: {\n            \"width\": \"100px\"\n          },\n          attrs: {\n            \"size\": \"small\"\n          },\n          model: {\n            value: _vm.editCache.language,\n            callback: function ($$v) {\n              _vm.$set(_vm.editCache, \"language\", $$v);\n            },\n            expression: \"editCache.language\"\n          }\n        }, [_c('el-option', {\n          attrs: {\n            \"label\": \"中文\",\n            \"value\": \"zh_CN\"\n          }\n        }), _c('el-option', {\n          attrs: {\n            \"label\": \"English\",\n            \"value\": \"en\"\n          }\n        })], 1)];\n      }\n    }])\n  }), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"content_html\",\n      \"label\": \"HTML内容\",\n      \"min-width\": \"250\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (scope) {\n        return [_vm.editRow !== scope.row.id ? _c('span', {\n          staticStyle: {\n            \"white-space\": \"pre-line\",\n            \"word-break\": \"break-all\",\n            \"max-width\": \"400px\",\n            \"display\": \"inline-block\"\n          }\n        }, [_vm._v(\" \" + _vm._s(scope.row.content_html) + \" \")]) : _c('el-input', {\n          attrs: {\n            \"type\": \"textarea\",\n            \"rows\": 4,\n            \"size\": \"small\"\n          },\n          model: {\n            value: _vm.editCache.content_html,\n            callback: function ($$v) {\n              _vm.$set(_vm.editCache, \"content_html\", $$v);\n            },\n            expression: \"editCache.content_html\"\n          }\n        })];\n      }\n    }])\n  }), _c('el-table-column', {\n    attrs: {\n      \"label\": \"操作\",\n      \"min-width\": \"150\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (scope) {\n        return [_vm.editRow === scope.row.id ? [_c('el-button', {\n          attrs: {\n            \"type\": \"primary\",\n            \"size\": \"mini\"\n          },\n          on: {\n            \"click\": function ($event) {\n              return _vm.saveEdit(scope.row);\n            }\n          }\n        }, [_vm._v(\"保存\")]), _c('el-button', {\n          attrs: {\n            \"size\": \"mini\"\n          },\n          on: {\n            \"click\": _vm.cancelEdit\n          }\n        }, [_vm._v(\"取消\")])] : [_c('el-button', {\n          attrs: {\n            \"type\": \"text\"\n          },\n          on: {\n            \"click\": function ($event) {\n              return _vm.startEdit(scope.row);\n            }\n          }\n        }, [_vm._v(\"编辑\")]), _c('el-button', {\n          staticStyle: {\n            \"color\": \"red\"\n          },\n          attrs: {\n            \"type\": \"text\"\n          },\n          on: {\n            \"click\": function ($event) {\n              return _vm.deleteTemplate(scope.row);\n            }\n          }\n        }, [_vm._v(\"删除\")])]];\n      }\n    }])\n  })], 1), _c('el-dialog', {\n    attrs: {\n      \"title\": _vm.templateDialogTitle,\n      \"visible\": _vm.templateDialogVisible,\n      \"width\": \"600px\"\n    },\n    on: {\n      \"update:visible\": function ($event) {\n        _vm.templateDialogVisible = $event;\n      }\n    }\n  }, [_c('el-form', {\n    ref: \"templateFormRef\",\n    attrs: {\n      \"model\": _vm.templateForm,\n      \"label-width\": \"100px\",\n      \"rules\": _vm.templateRules\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"模板名称\",\n      \"prop\": \"name\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: _vm.templateForm.name,\n      callback: function ($$v) {\n        _vm.$set(_vm.templateForm, \"name\", $$v);\n      },\n      expression: \"templateForm.name\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"模板键名\",\n      \"prop\": \"template_key\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: _vm.templateForm.template_key,\n      callback: function ($$v) {\n        _vm.$set(_vm.templateForm, \"template_key\", $$v);\n      },\n      expression: \"templateForm.template_key\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"主题\",\n      \"prop\": \"subject\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: _vm.templateForm.subject,\n      callback: function ($$v) {\n        _vm.$set(_vm.templateForm, \"subject\", $$v);\n      },\n      expression: \"templateForm.subject\"\n    }\n  })], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"语言\",\n      \"prop\": \"language\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"placeholder\": \"请选择\"\n    },\n    model: {\n      value: _vm.templateForm.language,\n      callback: function ($$v) {\n        _vm.$set(_vm.templateForm, \"language\", $$v);\n      },\n      expression: \"templateForm.language\"\n    }\n  }, [_c('el-option', {\n    attrs: {\n      \"label\": \"中文\",\n      \"value\": \"zh_CN\"\n    }\n  }), _c('el-option', {\n    attrs: {\n      \"label\": \"English\",\n      \"value\": \"en\"\n    }\n  })], 1)], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"HTML内容\",\n      \"prop\": \"content_html\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"type\": \"textarea\",\n      \"rows\": 8,\n      \"placeholder\": \"支持Jinja2变量，如 reservation.user_name\"\n    },\n    model: {\n      value: _vm.templateForm.content_html,\n      callback: function ($$v) {\n        _vm.$set(_vm.templateForm, \"content_html\", $$v);\n      },\n      expression: \"templateForm.content_html\"\n    }\n  })], 1)], 1), _c('div', {\n    staticClass: \"dialog-footer\",\n    attrs: {\n      \"slot\": \"footer\"\n    },\n    slot: \"footer\"\n  }, [_c('el-button', {\n    on: {\n      \"click\": function ($event) {\n        _vm.templateDialogVisible = false;\n      }\n    }\n  }, [_vm._v(\"取消\")]), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.saveTemplate\n    }\n  }, [_vm._v(\"保存\")])], 1)], 1)], 1), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"邮件日志\",\n      \"name\": \"log\"\n    }\n  }, [_c('el-form', {\n    staticStyle: {\n      \"margin-bottom\": \"10px\"\n    },\n    attrs: {\n      \"inline\": true,\n      \"size\": \"small\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"状态\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"clearable\": \"\",\n      \"placeholder\": \"全部\"\n    },\n    model: {\n      value: _vm.logFilter.status,\n      callback: function ($$v) {\n        _vm.$set(_vm.logFilter, \"status\", $$v);\n      },\n      expression: \"logFilter.status\"\n    }\n  }, [_c('el-option', {\n    attrs: {\n      \"label\": \"成功\",\n      \"value\": \"success\"\n    }\n  }), _c('el-option', {\n    attrs: {\n      \"label\": \"失败\",\n      \"value\": \"failed\"\n    }\n  })], 1)], 1), _c('el-form-item', {\n    attrs: {\n      \"label\": \"事件类型\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"placeholder\": \"如 reservation_created\",\n      \"clearable\": \"\"\n    },\n    model: {\n      value: _vm.logFilter.event_type,\n      callback: function ($$v) {\n        _vm.$set(_vm.logFilter, \"event_type\", $$v);\n      },\n      expression: \"logFilter.event_type\"\n    }\n  })], 1), _c('el-form-item', [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.fetchLogs\n    }\n  }, [_vm._v(\"查询\")]), _c('el-button', {\n    on: {\n      \"click\": _vm.clearLogFilter\n    }\n  }, [_vm._v(\"重置\")])], 1)], 1), _c('el-table', {\n    staticStyle: {\n      \"width\": \"100%\"\n    },\n    attrs: {\n      \"data\": _vm.logList,\n      \"border\": \"\"\n    }\n  }, [_c('el-table-column', {\n    attrs: {\n      \"prop\": \"recipient\",\n      \"label\": \"收件人\",\n      \"min-width\": \"120\"\n    }\n  }), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"subject\",\n      \"label\": \"主题\",\n      \"min-width\": \"150\"\n    }\n  }), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"event_type\",\n      \"label\": \"事件类型\",\n      \"min-width\": \"120\"\n    }\n  }), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"status\",\n      \"label\": \"状态\",\n      \"min-width\": \"80\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (scope) {\n        return [_c('el-tag', {\n          attrs: {\n            \"type\": scope.row.status === 'success' ? 'success' : 'danger'\n          }\n        }, [_vm._v(\" \" + _vm._s(scope.row.status === 'success' ? '成功' : '失败') + \" \")])];\n      }\n    }])\n  }), _c('el-table-column', {\n    attrs: {\n      \"prop\": \"created_at\",\n      \"label\": \"时间\",\n      \"min-width\": \"160\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (scope) {\n        return [_vm._v(\" \" + _vm._s(_vm.formatDate(scope.row.created_at)) + \" \")];\n      }\n    }])\n  }), _c('el-table-column', {\n    attrs: {\n      \"label\": \"操作\",\n      \"width\": \"120\"\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"mini\"\n          },\n          on: {\n            \"click\": function ($event) {\n              return _vm.showLogContent(scope.row);\n            }\n          }\n        }, [_vm._v(\"查看内容\")])];\n      }\n    }])\n  })], 1), _c('el-pagination', {\n    staticStyle: {\n      \"margin-top\": \"10px\",\n      \"text-align\": \"right\"\n    },\n    attrs: {\n      \"background\": \"\",\n      \"layout\": \"prev, pager, next, jumper\",\n      \"total\": _vm.logTotal,\n      \"page-size\": _vm.logPageSize,\n      \"current-page\": _vm.logPage\n    },\n    on: {\n      \"update:currentPage\": function ($event) {\n        _vm.logPage = $event;\n      },\n      \"update:current-page\": function ($event) {\n        _vm.logPage = $event;\n      },\n      \"current-change\": _vm.fetchLogs\n    }\n  }), _c('el-dialog', {\n    attrs: {\n      \"title\": \"邮件内容\",\n      \"visible\": _vm.logContentDialogVisible,\n      \"width\": \"60%\"\n    },\n    on: {\n      \"update:visible\": function ($event) {\n        _vm.logContentDialogVisible = $event;\n      }\n    }\n  }, [_vm.selectedLog && _vm.selectedLog.content_html ? _c('div', {\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.selectedLog.content_html)\n    }\n  }) : _c('div', [_vm._v(\"暂无内容\")])])], 1), _vm.isSuperAdmin ? _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"数据库表查看\",\n      \"name\": \"db-viewer\"\n    }\n  }, [_c('DatabaseViewer', {\n    ref: \"dbViewer\"\n  })], 1) : _vm._e()], 1)], 1);\n};\nvar staticRenderFns = [];\nexport { render, staticRenderFns };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}