{"ast":null,"code":"import axios from 'axios';\nimport { mapState } from 'vuex';\nimport DatabaseViewer from './DatabaseViewer.vue';\nexport default {\n  name: 'AdminSettings',\n  components: {\n    DatabaseViewer\n  },\n  data() {\n    return {\n      activeTab: 'base',\n      emailSettings: {\n        smtp_server: '',\n        smtp_port: 587,\n        sender_email: '',\n        sender_name: '',\n        smtp_username: '',\n        smtp_password: '',\n        cc_list: '',\n        bcc_list: '',\n        use_ssl: true,\n        enabled: false\n      },\n      templateList: [],\n      templateDialogVisible: false,\n      templateDialogTitle: '新增模板',\n      templateForm: {\n        id: null,\n        name: '',\n        template_key: '',\n        subject: '',\n        content_html: '',\n        language: 'zh_CN'\n      },\n      templateRules: {\n        name: [{\n          required: true,\n          message: '请输入模板名称',\n          trigger: 'blur'\n        }],\n        template_key: [{\n          required: true,\n          message: '请输入模板键名',\n          trigger: 'blur'\n        }],\n        subject: [{\n          required: true,\n          message: '请输入主题',\n          trigger: 'blur'\n        }],\n        content_html: [{\n          required: true,\n          message: '请输入HTML内容',\n          trigger: 'blur'\n        }],\n        language: [{\n          required: true,\n          message: '请选择语言',\n          trigger: 'change'\n        }]\n      },\n      logList: [],\n      logTotal: 0,\n      logPage: 1,\n      logPageSize: 10,\n      logFilter: {\n        status: '',\n        event_type: ''\n      },\n      testEmail: '',\n      testLoading: false,\n      editRow: null,\n      editCache: {},\n      logContentDialogVisible: false,\n      selectedLog: null\n    };\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    }),\n    isSuperAdmin() {\n      return this.user && this.user.role === 'superadmin';\n    }\n  },\n  created() {\n    this.fetchEmailSettings();\n    this.fetchTemplates();\n    this.fetchLogs();\n  },\n  methods: {\n    handleTabClick(tab) {\n      if (tab.name === 'db-viewer' && this.$refs.dbViewer) {\n        this.$refs.dbViewer.initIfNeeded();\n      }\n    },\n    async fetchEmailSettings() {\n      try {\n        const res = await axios.get('/api/admin/email/settings');\n        this.emailSettings = res.data;\n      } catch (e) {\n        this.$message.error('获取邮件设置失败');\n      }\n    },\n    async saveEmailSettings() {\n      try {\n        await axios.post('/api/admin/email/settings', this.emailSettings);\n        this.$message.success('保存成功');\n      } catch (e) {\n        this.$message.error('保存失败');\n      }\n    },\n    async fetchTemplates() {\n      try {\n        const res = await axios.get('/api/admin/email/templates');\n        this.templateList = res.data;\n      } catch (e) {\n        this.$message.error('获取模板失败');\n      }\n    },\n    openTemplateDialog(row) {\n      if (row) {\n        this.templateDialogTitle = '编辑模板';\n        this.templateForm = {\n          ...row\n        };\n      } else {\n        this.templateDialogTitle = '新增模板';\n        this.templateForm = {\n          id: null,\n          name: '',\n          template_key: '',\n          subject: '',\n          content_html: '',\n          language: 'zh_CN'\n        };\n      }\n      this.templateDialogVisible = true;\n    },\n    async saveTemplate() {\n      this.$refs.templateFormRef.validate(async valid => {\n        if (!valid) return;\n        try {\n          if (this.templateForm.id) {\n            await axios.put(`/api/admin/email/templates/${this.templateForm.id}`, this.templateForm);\n            this.$message.success('更新成功');\n          } else {\n            await axios.post('/api/admin/email/templates', this.templateForm);\n            this.$message.success('新增成功');\n          }\n          this.templateDialogVisible = false;\n          this.fetchTemplates();\n        } catch (e) {\n          this.$message.error(e.response?.data?.detail || '保存失败');\n        }\n      });\n    },\n    async deleteTemplate(row) {\n      this.$confirm('确定要删除该模板吗？', '提示', {\n        type: 'warning'\n      }).then(async () => {\n        await axios.delete(`/api/admin/email/templates/${row.id}`);\n        this.$message.success('删除成功');\n        this.fetchTemplates();\n      }).catch(() => {});\n    },\n    async fetchLogs() {\n      try {\n        const params = {\n          skip: (this.logPage - 1) * this.logPageSize,\n          limit: this.logPageSize,\n          status: this.logFilter.status,\n          event_type: this.logFilter.event_type\n        };\n        const res = await axios.get('/api/admin/email/logs', {\n          params\n        });\n        this.logList = res.data.items;\n        this.logTotal = res.data.total;\n      } catch (e) {\n        this.$message.error('获取日志失败');\n      }\n    },\n    clearLogFilter() {\n      this.logFilter = {\n        status: '',\n        event_type: ''\n      };\n      this.logPage = 1;\n      this.fetchLogs();\n    },\n    async deleteLog(row) {\n      this.$confirm('确定要删除该日志吗？', '提示', {\n        type: 'warning'\n      }).then(async () => {\n        await axios.delete(`/api/admin/email/logs/${row.id}`);\n        this.$message.success('删除成功');\n        this.fetchLogs();\n      }).catch(() => {});\n    },\n    formatDate(val) {\n      if (!val) return '';\n      let d = typeof val === 'string' && !val.endsWith('Z') ? new Date(val + 'Z') : new Date(val);\n      return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')} ${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;\n    },\n    async testEmailSend() {\n      if (!this.testEmail) {\n        this.$message.warning('请输入测试收件人邮箱');\n        return;\n      }\n      this.testLoading = true;\n      try {\n        const payload = {\n          ...this.emailSettings,\n          to_email: this.testEmail\n        };\n        const res = await axios.post('/api/admin/email/test', payload);\n        if (res.data.success) {\n          this.$message.success(res.data.message);\n        } else {\n          this.$message.error(res.data.message);\n        }\n      } catch (e) {\n        this.$message.error('请求失败');\n      } finally {\n        this.testLoading = false;\n      }\n    },\n    startEdit(row) {\n      this.editRow = row.id;\n      this.editCache = {\n        ...row\n      };\n    },\n    cancelEdit() {\n      this.editRow = null;\n      this.editCache = {};\n    },\n    async saveEdit(row) {\n      try {\n        await this.$confirm('确定保存修改吗？', '提示', {\n          type: 'warning'\n        });\n        await axios.put(`/api/admin/email/templates/${row.id}`, this.editCache);\n        this.$message.success('保存成功');\n        this.editRow = null;\n        this.editCache = {};\n        this.fetchTemplates();\n      } catch (e) {\n        this.$message.error(e.response?.data?.detail || '保存失败');\n      }\n    },\n    showLogContent(log) {\n      this.selectedLog = log;\n      window.selectedLog = log;\n      this.logContentDialogVisible = true;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}