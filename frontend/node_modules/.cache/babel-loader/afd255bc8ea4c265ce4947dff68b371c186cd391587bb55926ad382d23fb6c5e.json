{"ast":null,"code":"import { reservationApi, recurringReservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'ReservationDetail',\n  data() {\n    return {\n      loading: false,\n      cancelling: false,\n      returning: false,\n      reservation: null,\n      isRecurringReservation: false,\n      recurringReservationId: null,\n      childReservationStartTime: null,\n      childReservationEndTime: null,\n      cancelDialogVisible: false,\n      returnDialogVisible: false,\n      cancelForm: {\n        reason: ''\n      },\n      returnForm: {\n        reason: ''\n      }\n    };\n  },\n  created() {\n    this.fetchReservation();\n  },\n  methods: {\n    async fetchReservation() {\n      this.loading = true;\n      try {\n        // 检查是否是通过预约序号查询\n        let reservationNumber = this.$route.params.number;\n        const reservationCode = this.$route.params.code;\n\n        // 如果URL中没有预约序号，尝试从localStorage中获取\n        if (!reservationNumber) {\n          const savedReservationNumber = localStorage.getItem('current_reservation_number');\n          if (savedReservationNumber) {\n            console.log('从localStorage中获取预约序号:', savedReservationNumber);\n            reservationNumber = savedReservationNumber;\n            // 使用后清除，避免影响后续操作\n            localStorage.removeItem('current_reservation_number');\n          }\n        }\n\n        // 检查是否是子预约查询请求\n        const isChildReservation = this.$route.query.child === 'true';\n        const childReservationId = this.$route.query.id;\n        const recurringId = this.$route.query.recurringId;\n        const startTime = this.$route.query.startTime;\n        const endTime = this.$route.query.endTime;\n\n        // 如果是子预约查询，保存循环预约ID\n        if (isChildReservation && recurringId) {\n          this.recurringReservationId = recurringId;\n          console.log('Child reservation query detected, saving recurring ID:', recurringId);\n        }\n\n        // 如果是通过预约序号查询\n        if (reservationNumber) {\n          console.log('通过预约序号查询预约:', reservationNumber);\n\n          // 直接通过预约序号查询\n          const response = await reservationApi.getReservationByNumber(reservationNumber);\n          if (response.data.success) {\n            this.reservation = response.data.data;\n            console.log('通过预约序号找到预约:', this.reservation);\n\n            // 显示预约序号信息\n            this.$notify({\n              title: '预约详情',\n              message: `当前查看的是预约序号: ${this.reservation.reservation_number}`,\n              type: 'info',\n              duration: 5000\n            });\n\n            // 如果是子预约查询，并且有开始和结束时间，则使用URL中的时间覆盖API返回的时间\n            if (this.childReservationStartTime && this.childReservationEndTime) {\n              console.log('Overriding reservation times with child reservation times');\n              this.reservation.start_datetime = this.childReservationStartTime;\n              this.reservation.end_datetime = this.childReservationEndTime;\n            }\n\n            // 检查是否是循环预约的子预约\n            if (this.reservation.recurring_reservation_id) {\n              this.isRecurringReservation = true;\n              this.recurringReservationId = this.reservation.recurring_reservation_id;\n\n              // 添加提示，告知用户这是循环预约的一部分\n              this.$notify({\n                title: this.$t('reservation.recurringReservationNotice'),\n                message: this.$t('reservation.partOfRecurringReservation'),\n                type: 'info',\n                duration: 8000\n              });\n              console.log('This is part of a recurring reservation:', this.recurringReservationId);\n            }\n          } else {\n            this.reservation = null;\n            this.$message.error(response.data.message || this.$t('reservation.notFound'));\n          }\n          this.loading = false;\n          return;\n        }\n\n        // 如果不是通过预约序号查询，则继续原来的逻辑\n        // 如果不是子预约查询，则先尝试查询循环预约\n        if (!isChildReservation) {\n          try {\n            const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(reservationCode);\n            if (recurringResponse.data.success) {\n              // 如果是循环预约，重定向到循环预约详情页\n              console.log('Found recurring reservation, redirecting to recurring reservation detail page');\n              // 使用window.location直接跳转，避免路由守卫问题\n              window.location.href = `#/recurring-reservation/${recurringResponse.data.data.id}`;\n              return;\n            }\n          } catch (recurringError) {\n            console.log('Not a recurring reservation, continuing with normal reservation lookup');\n            // 不是循环预约，继续查询普通预约\n          }\n        } else {\n          console.log('Child reservation query detected, skipping recurring reservation check');\n\n          // 如果有子预约ID和开始/结束时间，尝试通过ID获取子预约详情\n          if (childReservationId && startTime && endTime) {\n            try {\n              // 由于后端没有直接通过ID获取预约的API，我们仍然使用预约码查询，但会在前端处理\n              console.log('Fetching child reservation with ID:', childReservationId);\n              console.log('Child reservation time:', startTime, 'to', endTime);\n\n              // 保存子预约的开始和结束时间，用于后续处理\n              this.childReservationStartTime = startTime;\n              this.childReservationEndTime = endTime;\n            } catch (error) {\n              console.error('Failed to fetch child reservation by ID:', error);\n            }\n          }\n        }\n\n        // 查询普通预约\n        // 检查URL中是否包含预约序号参数\n        const queryReservationNumber = this.$route.query.reservation_number;\n\n        // 确保reservationNumber是字符串，并且不是一个对象\n        let reservationNumberStr = null;\n        if (queryReservationNumber) {\n          if (typeof queryReservationNumber === 'object') {\n            console.warn('预约序号参数是对象类型，将被忽略:', queryReservationNumber);\n          } else {\n            reservationNumberStr = String(queryReservationNumber);\n          }\n        }\n        console.log('获取预约详情:', {\n          reservationCode,\n          reservationNumber: reservationNumberStr || '未提供',\n          reservationNumberType: queryReservationNumber ? typeof queryReservationNumber : 'null',\n          routeQuery: this.$route.query\n        });\n\n        // 如果URL中包含预约序号参数，则传递给API\n        const response = await reservationApi.getReservationByCode(reservationCode, reservationNumberStr);\n        if (response.data.success) {\n          this.reservation = response.data.data;\n\n          // 如果是子预约查询，并且有开始和结束时间，则使用URL中的时间覆盖API返回的时间\n          if (this.childReservationStartTime && this.childReservationEndTime) {\n            console.log('Overriding reservation times with child reservation times');\n            this.reservation.start_datetime = this.childReservationStartTime;\n            this.reservation.end_datetime = this.childReservationEndTime;\n          }\n\n          // 检查是否是循环预约的子预约\n          if (this.reservation.recurring_reservation_id) {\n            this.isRecurringReservation = true;\n            this.recurringReservationId = this.reservation.recurring_reservation_id;\n\n            // 添加提示，告知用户这是循环预约的一部分\n            this.$notify({\n              title: this.$t('reservation.recurringReservationNotice'),\n              message: this.$t('reservation.partOfRecurringReservation'),\n              type: 'info',\n              duration: 8000\n            });\n            console.log('This is part of a recurring reservation:', this.recurringReservationId);\n          }\n        } else {\n          this.reservation = null;\n          this.$message.error(response.data.message || this.$t('reservation.notFound'));\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservation:', error);\n        this.$message.error(this.$t('common.error'));\n        this.reservation = null;\n      } finally {\n        this.loading = false;\n      }\n    },\n    showCancelDialog() {\n      this.cancelDialogVisible = true;\n    },\n    async cancelReservation() {\n      this.cancelling = true;\n      try {\n        const reservationCode = this.reservation.reservation_code;\n\n        // 打印预约详情，帮助调试\n        console.log('预约详情:', this.reservation);\n        console.log('预约序号:', this.reservation.reservation_number);\n        console.log('预约码:', reservationCode);\n        const data = {\n          reason: this.cancelForm.reason,\n          user_email: this.reservation.user_email,\n          lang: this.$i18n.locale\n        };\n\n        // 添加预约序号参数，确保只取消特定的子预约\n        if (this.reservation.reservation_number) {\n          // 确保reservation_number是字符串\n          data.reservation_number = String(this.reservation.reservation_number);\n          console.log('预约序号参数存在:', data.reservation_number);\n          console.log('预约序号类型:', typeof data.reservation_number);\n        } else {\n          console.warn('预约序号参数不存在，将取消所有具有相同预约码的预约');\n        }\n\n        // 打印请求参数\n        console.log('取消预约请求参数:', data);\n        const response = await reservationApi.cancelReservation(reservationCode, data);\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.cancelSuccess'));\n          this.cancelDialogVisible = false;\n\n          // 立即更新当前页面的状态显示\n          this.reservation.status = 'cancelled';\n\n          // 保存状态变更到localStorage，以便其他页面可以检测到状态变化\n          this.saveReservationStatus('cancelled');\n          console.log('预约已取消，状态已更新为:', this.reservation.status);\n\n          // 设置一个延迟，让用户看到状态变化后再跳转\n          setTimeout(() => {\n            // 检查是否是从循环预约详情页面跳转过来的\n            const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId;\n            if (isFromRecurring) {\n              // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n              this.$router.push({\n                path: `/recurring-reservation/${this.recurringReservationId}`,\n                query: {\n                  fromChild: 'true',\n                  reservation_number: this.reservation.reservation_number\n                }\n              });\n            } else {\n              // 否则返回到预约管理页面\n              this.$router.push('/reservation/manage');\n            }\n          }, 1500); // 增加延迟时间，让用户有更多时间看到状态变化\n        } else {\n          this.$message.error(response.data.message || this.$t('common.error'));\n        }\n      } catch (error) {\n        console.error('Failed to cancel reservation:', error);\n        this.$message.error(this.$t('common.error'));\n      } finally {\n        this.cancelling = false;\n      }\n    },\n    // 保存预约状态到localStorage\n    saveReservationStatus(status) {\n      if (!this.reservation) return;\n\n      // 使用预约码作为键\n      const stateKey = `reservation_status_${this.reservation.reservation_code}`;\n\n      // 保存状态信息\n      const state = {\n        statusText: this.getStatusText(status),\n        statusType: this.getStatusClass(status),\n        dbStatus: status,\n        forcedStatus: status,\n        timestamp: new Date().getTime(),\n        permanent: true,\n        reservationCode: this.reservation.reservation_code\n      };\n      console.log('保存预约状态到localStorage:', state);\n      localStorage.setItem(stateKey, JSON.stringify(state));\n\n      // 如果是循环预约的子预约，还需要保存循环预约ID\n      if (this.isRecurringReservation && this.recurringReservationId) {\n        // 使用循环预约ID和预约码的组合作为键\n        const recurringStateKey = `recurring_reservation_${this.recurringReservationId}_child_status_changed`;\n\n        // 保存状态变更信息\n        const recurringState = {\n          reservationCode: this.reservation.reservation_code,\n          status: status,\n          timestamp: new Date().getTime()\n        };\n        console.log('保存循环预约子预约状态变更到localStorage:', recurringState);\n        localStorage.setItem(recurringStateKey, JSON.stringify(recurringState));\n      }\n    },\n    formatDateTime(dateTime) {\n      if (!dateTime) return '';\n      const date = new Date(dateTime);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    // 判断预约是否正在进行中\n    isReservationInProgress(reservation) {\n      if (!reservation) return false;\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n\n      // 当前时间在开始时间和结束时间之间\n      return now >= start && now <= end;\n    },\n    // 显示提前归还对话框\n    showReturnDialog() {\n      this.returnDialogVisible = true;\n    },\n    // 提前归还设备\n    async returnEquipment() {\n      this.returning = true;\n      try {\n        const reservationCode = this.reservation.reservation_code;\n\n        // 打印预约详情，帮助调试\n        console.log('提前归还 - 预约详情:', this.reservation);\n        console.log('提前归还 - 预约序号:', this.reservation.reservation_number);\n        console.log('提前归还 - 预约码:', reservationCode);\n        const data = {\n          reason: this.returnForm.reason,\n          user_email: this.reservation.user_email,\n          lang: this.$i18n.locale,\n          early_return: true\n        };\n\n        // 添加预约序号参数，确保只取消特定的子预约\n        if (this.reservation.reservation_number) {\n          // 确保reservation_number是字符串\n          data.reservation_number = String(this.reservation.reservation_number);\n          console.log('提前归还 - 预约序号参数存在:', data.reservation_number);\n          console.log('提前归还 - 预约序号类型:', typeof data.reservation_number);\n        } else {\n          console.warn('提前归还 - 预约序号参数不存在，将取消所有具有相同预约码的预约');\n        }\n\n        // 打印请求参数\n        console.log('提前归还 - 请求参数:', data);\n        const response = await reservationApi.cancelReservation(reservationCode, data);\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.returnSuccess'));\n          this.returnDialogVisible = false;\n\n          // 立即更新当前页面的状态显示\n          this.reservation.status = 'cancelled';\n\n          // 保存状态变更到localStorage，以便其他页面可以检测到状态变化\n          this.saveReservationStatus('cancelled');\n          console.log('预约已提前归还，状态已更新为:', this.reservation.status);\n\n          // 设置一个延迟，让用户看到状态变化后再跳转\n          setTimeout(() => {\n            // 检查是否是从循环预约详情页面跳转过来的\n            const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId;\n            if (isFromRecurring) {\n              // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n              this.$router.push({\n                path: `/recurring-reservation/${this.recurringReservationId}`,\n                query: {\n                  fromChild: 'true',\n                  reservation_number: this.reservation.reservation_number\n                }\n              });\n            } else {\n              // 否则返回到预约管理页面\n              this.$router.push('/reservation/manage');\n            }\n          }, 1500); // 增加延迟时间，让用户有更多时间看到状态变化\n        } else {\n          this.$message.error(response.data.message || this.$t('common.error'));\n        }\n      } catch (error) {\n        console.error('Failed to return equipment:', error);\n        this.$message.error(this.$t('common.error'));\n      } finally {\n        this.returning = false;\n      }\n    },\n    // 返回上一页或跳转到指定页面\n    goBack() {\n      // 检查是否是从循环预约详情页面跳转过来的\n      const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId;\n      if (isFromRecurring) {\n        // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n        // 添加fromChild参数，标记是从子预约详情页面返回的\n        this.$router.push({\n          path: `/recurring-reservation/${this.recurringReservationId}`,\n          query: {\n            fromChild: 'true',\n            reservation_number: this.reservation.reservation_number\n          }\n        });\n      } else {\n        // 否则返回到预约查询页面\n        this.$router.push('/reservation/query');\n      }\n    },\n    // 查看循环预约\n    viewRecurringReservation() {\n      if (this.recurringReservationId) {\n        // 将当前预约序号作为查询参数传递，以便在循环预约详情页面中高亮显示当前预约\n        this.$router.push({\n          path: `/recurring-reservation/${this.recurringReservationId}`,\n          query: {\n            reservation_number: this.reservation.reservation_number,\n            from_detail: 'true'\n          }\n        });\n      } else {\n        this.$message.warning('无法查看循环预约详情，缺少循环预约ID');\n      }\n    },\n    getStatusClass(status) {\n      switch (status) {\n        case 'confirmed':\n          return 'confirmed';\n        case 'cancelled':\n          return 'cancelled';\n        case 'pending':\n          return 'pending';\n        case 'expired':\n          return 'expired';\n        default:\n          return 'unknown';\n      }\n    },\n    getStatusIcon(status) {\n      switch (status) {\n        case 'confirmed':\n          return 'el-icon-success';\n        case 'cancelled':\n          return 'el-icon-close';\n        case 'pending':\n          return 'el-icon-time';\n        case 'expired':\n          return 'el-icon-warning';\n        default:\n          return 'el-icon-question';\n      }\n    },\n    getStatusText(status) {\n      switch (status) {\n        case 'confirmed':\n          return this.$t('reservation.confirmed');\n        case 'cancelled':\n          return this.$t('reservation.cancelled');\n        case 'pending':\n          return this.$t('reservation.pending');\n        case 'expired':\n          return this.$t('reservation.expired');\n        default:\n          return status;\n        // 显示原始状态值，以防出现新的未知状态\n      }\n    }\n  }\n};","map":{"version":3,"names":["reservationApi","recurringReservationApi","isReservationExpired","name","data","loading","cancelling","returning","reservation","isRecurringReservation","recurringReservationId","childReservationStartTime","childReservationEndTime","cancelDialogVisible","returnDialogVisible","cancelForm","reason","returnForm","created","fetchReservation","methods","reservationNumber","$route","params","number","reservationCode","code","savedReservationNumber","localStorage","getItem","console","log","removeItem","isChildReservation","query","child","childReservationId","id","recurringId","startTime","endTime","response","getReservationByNumber","success","$notify","title","message","reservation_number","type","duration","start_datetime","end_datetime","recurring_reservation_id","$t","$message","error","recurringResponse","getRecurringReservationByCode","window","location","href","recurringError","queryReservationNumber","reservationNumberStr","warn","String","reservationNumberType","routeQuery","getReservationByCode","showCancelDialog","cancelReservation","reservation_code","user_email","lang","$i18n","locale","status","saveReservationStatus","setTimeout","isFromRecurring","$router","push","path","fromChild","stateKey","state","statusText","getStatusText","statusType","getStatusClass","dbStatus","forcedStatus","timestamp","Date","getTime","permanent","setItem","JSON","stringify","recurringStateKey","recurringState","formatDateTime","dateTime","date","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","isReservationInProgress","now","start","end","showReturnDialog","returnEquipment","early_return","goBack","viewRecurringReservation","from_detail","warning","getStatusIcon"],"sources":["src/views/reservation/ReservationDetail.vue"],"sourcesContent":["<template>\n  <div class=\"reservation-detail\">\n    <div v-if=\"loading\" class=\"loading-container\">\n      <el-skeleton :rows=\"10\" animated />\n    </div>\n\n    <div v-else-if=\"!reservation\" class=\"error-container\">\n      <el-result\n        icon=\"error\"\n        :title=\"$t('error.errorMessage')\"\n        :sub-title=\"$t('reservation.reservationNotFound')\"\n      >\n        <template #extra>\n          <el-button type=\"primary\" @click=\"$router.push('/reservation/query')\">\n            {{ $t('reservation.query') }}\n          </el-button>\n        </template>\n      </el-result>\n    </div>\n\n    <div v-else>\n      <!-- 返回按钮 -->\n      <div class=\"back-link\">\n        <el-button icon=\"el-icon-arrow-left\" @click=\"goBack\">\n          {{ $t('common.back') }}\n        </el-button>\n      </div>\n\n      <h1 class=\"page-title\">{{ $t('reservation.detail') }}</h1>\n\n      <!-- 预定状态 -->\n      <div class=\"reservation-status-card\" :class=\"getStatusClass(reservation.status)\">\n        <div class=\"status-icon\">\n          <i :class=\"getStatusIcon(reservation.status)\"></i>\n        </div>\n        <div class=\"status-text\">\n          <h2>{{ getStatusText(reservation.status) }}</h2>\n          <p>{{ $t('reservation.code') }}: {{ reservation.reservation_code }}</p>\n        </div>\n      </div>\n\n      <!-- 预定详情 -->\n      <el-card shadow=\"never\" class=\"detail-card\">\n        <div slot=\"header\">\n          <span>{{ $t('reservation.detail') }}</span>\n        </div>\n\n        <el-descriptions :column=\"1\" border>\n          <el-descriptions-item :label=\"$t('reservation.equipmentName')\">\n            {{ reservation.equipment_name }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('equipment.category')\" v-if=\"reservation.equipment_category\">\n            {{ reservation.equipment_category }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('equipment.location')\" v-if=\"reservation.equipment_location\">\n            {{ reservation.equipment_location }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.startTime')\">\n            {{ formatDateTime(reservation.start_datetime) }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.endTime')\">\n            {{ formatDateTime(reservation.end_datetime) }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.purpose')\" v-if=\"reservation.purpose\">\n            {{ reservation.purpose }}\n          </el-descriptions-item>\n        </el-descriptions>\n      </el-card>\n\n      <!-- 用户信息 -->\n      <el-card shadow=\"never\" class=\"user-card\">\n        <div slot=\"header\">\n          <span>{{ $t('common.userInfo') }}</span>\n        </div>\n\n        <el-descriptions :column=\"1\" border>\n          <el-descriptions-item :label=\"$t('reservation.userName')\">\n            {{ reservation.user_name }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.userDepartment')\">\n            {{ reservation.user_department }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.userContact')\">\n            {{ reservation.user_contact }}\n          </el-descriptions-item>\n\n          <el-descriptions-item :label=\"$t('reservation.userEmail')\" v-if=\"reservation.user_email\">\n            {{ reservation.user_email }}\n          </el-descriptions-item>\n        </el-descriptions>\n      </el-card>\n\n      <!-- 二维码 -->\n      <el-card v-if=\"reservation.qrcode_url\" shadow=\"never\" class=\"qrcode-card\">\n        <div slot=\"header\">\n          <span>{{ $t('common.qrcode') }}</span>\n        </div>\n\n        <div class=\"qrcode-container\">\n          <img :src=\"reservation.qrcode_url\" alt=\"QR Code\" class=\"qrcode-image\" />\n          <p>{{ $t('reservation.scanQrcode') }}</p>\n        </div>\n      </el-card>\n\n      <!-- 操作按钮 -->\n      <div class=\"action-buttons\">\n        <!-- 已确认且未开始的预约才显示取消按钮 -->\n        <el-button\n          v-if=\"reservation.status === 'confirmed' && !isReservationInProgress(reservation)\"\n          type=\"danger\"\n          @click=\"showCancelDialog\"\n        >\n          {{ $t('reservation.cancelReservation') }}\n        </el-button>\n\n        <!-- 使用中的预约才显示提前归还按钮 -->\n        <el-button\n          v-if=\"reservation.status === 'confirmed' && isReservationInProgress(reservation)\"\n          type=\"primary\"\n          @click=\"showReturnDialog\"\n        >\n          {{ $t('reservation.earlyReturn') }}\n        </el-button>\n\n        <!-- 如果是循环预约的一部分，显示查看循环预约按钮 -->\n        <el-button\n          v-if=\"isRecurringReservation && recurringReservationId\"\n          type=\"primary\"\n          @click=\"viewRecurringReservation\"\n        >\n          {{ $t('reservation.viewRecurringReservation') }}\n        </el-button>\n      </div>\n\n      <!-- 取消预定对话框 -->\n      <el-dialog\n        :title=\"$t('reservation.cancelReservation')\"\n        :visible.sync=\"cancelDialogVisible\"\n        width=\"500px\"\n      >\n        <div class=\"cancel-content\">\n          <p>{{ $t('reservation.confirmCancel') }}</p>\n\n          <el-form ref=\"cancelForm\" :model=\"cancelForm\" label-position=\"top\">\n            <el-form-item :label=\"$t('reservation.cancelReason')\">\n              <el-input\n                v-model=\"cancelForm.reason\"\n                type=\"textarea\"\n                :rows=\"3\"\n              ></el-input>\n            </el-form-item>\n          </el-form>\n        </div>\n\n        <span slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"cancelDialogVisible = false\">{{ $t('common.cancel') }}</el-button>\n          <el-button type=\"danger\" :loading=\"cancelling\" @click=\"cancelReservation\">{{ $t('common.confirm') }}</el-button>\n        </span>\n      </el-dialog>\n\n      <!-- 提前归还对话框 -->\n      <el-dialog\n        :title=\"$t('reservation.earlyReturn')\"\n        :visible.sync=\"returnDialogVisible\"\n        width=\"500px\"\n      >\n        <div class=\"return-content\">\n          <p>{{ $t('reservation.confirmEarlyReturn') }}</p>\n\n          <el-form ref=\"returnForm\" :model=\"returnForm\" label-position=\"top\">\n            <el-form-item :label=\"$t('reservation.returnReason')\">\n              <el-input\n                v-model=\"returnForm.reason\"\n                type=\"textarea\"\n                :rows=\"3\"\n              ></el-input>\n            </el-form-item>\n          </el-form>\n        </div>\n\n        <span slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"returnDialogVisible = false\">{{ $t('common.cancel') }}</el-button>\n          <el-button type=\"primary\" :loading=\"returning\" @click=\"returnEquipment\">{{ $t('common.confirm') }}</el-button>\n        </span>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { reservationApi, recurringReservationApi } from '@/api'\nimport { isReservationExpired } from '@/utils/date'\n\nexport default {\n  name: 'ReservationDetail',\n\n  data() {\n    return {\n      loading: false,\n      cancelling: false,\n      returning: false,\n      reservation: null,\n      isRecurringReservation: false,\n      recurringReservationId: null,\n      childReservationStartTime: null,\n      childReservationEndTime: null,\n      cancelDialogVisible: false,\n      returnDialogVisible: false,\n      cancelForm: {\n        reason: ''\n      },\n      returnForm: {\n        reason: ''\n      }\n    }\n  },\n\n  created() {\n    this.fetchReservation()\n  },\n\n  methods: {\n    async fetchReservation() {\n      this.loading = true\n      try {\n        // 检查是否是通过预约序号查询\n        let reservationNumber = this.$route.params.number\n        const reservationCode = this.$route.params.code\n\n        // 如果URL中没有预约序号，尝试从localStorage中获取\n        if (!reservationNumber) {\n          const savedReservationNumber = localStorage.getItem('current_reservation_number')\n          if (savedReservationNumber) {\n            console.log('从localStorage中获取预约序号:', savedReservationNumber)\n            reservationNumber = savedReservationNumber\n            // 使用后清除，避免影响后续操作\n            localStorage.removeItem('current_reservation_number')\n          }\n        }\n\n        // 检查是否是子预约查询请求\n        const isChildReservation = this.$route.query.child === 'true'\n        const childReservationId = this.$route.query.id\n        const recurringId = this.$route.query.recurringId\n        const startTime = this.$route.query.startTime\n        const endTime = this.$route.query.endTime\n\n        // 如果是子预约查询，保存循环预约ID\n        if (isChildReservation && recurringId) {\n          this.recurringReservationId = recurringId\n          console.log('Child reservation query detected, saving recurring ID:', recurringId)\n        }\n\n        // 如果是通过预约序号查询\n        if (reservationNumber) {\n          console.log('通过预约序号查询预约:', reservationNumber)\n\n          // 直接通过预约序号查询\n          const response = await reservationApi.getReservationByNumber(reservationNumber)\n\n          if (response.data.success) {\n            this.reservation = response.data.data\n            console.log('通过预约序号找到预约:', this.reservation)\n\n            // 显示预约序号信息\n            this.$notify({\n              title: '预约详情',\n              message: `当前查看的是预约序号: ${this.reservation.reservation_number}`,\n              type: 'info',\n              duration: 5000\n            })\n\n            // 如果是子预约查询，并且有开始和结束时间，则使用URL中的时间覆盖API返回的时间\n            if (this.childReservationStartTime && this.childReservationEndTime) {\n              console.log('Overriding reservation times with child reservation times')\n              this.reservation.start_datetime = this.childReservationStartTime\n              this.reservation.end_datetime = this.childReservationEndTime\n            }\n\n            // 检查是否是循环预约的子预约\n            if (this.reservation.recurring_reservation_id) {\n              this.isRecurringReservation = true\n              this.recurringReservationId = this.reservation.recurring_reservation_id\n\n              // 添加提示，告知用户这是循环预约的一部分\n              this.$notify({\n                title: this.$t('reservation.recurringReservationNotice'),\n                message: this.$t('reservation.partOfRecurringReservation'),\n                type: 'info',\n                duration: 8000\n              })\n\n              console.log('This is part of a recurring reservation:', this.recurringReservationId)\n            }\n          } else {\n            this.reservation = null\n            this.$message.error(response.data.message || this.$t('reservation.notFound'))\n          }\n\n          this.loading = false\n          return\n        }\n\n        // 如果不是通过预约序号查询，则继续原来的逻辑\n        // 如果不是子预约查询，则先尝试查询循环预约\n        if (!isChildReservation) {\n          try {\n            const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(reservationCode)\n\n            if (recurringResponse.data.success) {\n              // 如果是循环预约，重定向到循环预约详情页\n              console.log('Found recurring reservation, redirecting to recurring reservation detail page')\n              // 使用window.location直接跳转，避免路由守卫问题\n              window.location.href = `#/recurring-reservation/${recurringResponse.data.data.id}`\n              return\n            }\n          } catch (recurringError) {\n            console.log('Not a recurring reservation, continuing with normal reservation lookup')\n            // 不是循环预约，继续查询普通预约\n          }\n        } else {\n          console.log('Child reservation query detected, skipping recurring reservation check')\n\n          // 如果有子预约ID和开始/结束时间，尝试通过ID获取子预约详情\n          if (childReservationId && startTime && endTime) {\n            try {\n              // 由于后端没有直接通过ID获取预约的API，我们仍然使用预约码查询，但会在前端处理\n              console.log('Fetching child reservation with ID:', childReservationId)\n              console.log('Child reservation time:', startTime, 'to', endTime)\n\n              // 保存子预约的开始和结束时间，用于后续处理\n              this.childReservationStartTime = startTime\n              this.childReservationEndTime = endTime\n            }\n            catch (error) {\n              console.error('Failed to fetch child reservation by ID:', error)\n            }\n          }\n        }\n\n        // 查询普通预约\n        // 检查URL中是否包含预约序号参数\n        const queryReservationNumber = this.$route.query.reservation_number\n\n        // 确保reservationNumber是字符串，并且不是一个对象\n        let reservationNumberStr = null\n        if (queryReservationNumber) {\n          if (typeof queryReservationNumber === 'object') {\n            console.warn('预约序号参数是对象类型，将被忽略:', queryReservationNumber)\n          } else {\n            reservationNumberStr = String(queryReservationNumber)\n          }\n        }\n\n        console.log('获取预约详情:', {\n          reservationCode,\n          reservationNumber: reservationNumberStr || '未提供',\n          reservationNumberType: queryReservationNumber ? typeof queryReservationNumber : 'null',\n          routeQuery: this.$route.query\n        })\n\n        // 如果URL中包含预约序号参数，则传递给API\n        const response = await reservationApi.getReservationByCode(\n          reservationCode,\n          reservationNumberStr\n        )\n\n        if (response.data.success) {\n          this.reservation = response.data.data\n\n          // 如果是子预约查询，并且有开始和结束时间，则使用URL中的时间覆盖API返回的时间\n          if (this.childReservationStartTime && this.childReservationEndTime) {\n            console.log('Overriding reservation times with child reservation times')\n            this.reservation.start_datetime = this.childReservationStartTime\n            this.reservation.end_datetime = this.childReservationEndTime\n          }\n\n          // 检查是否是循环预约的子预约\n          if (this.reservation.recurring_reservation_id) {\n            this.isRecurringReservation = true\n            this.recurringReservationId = this.reservation.recurring_reservation_id\n\n            // 添加提示，告知用户这是循环预约的一部分\n            this.$notify({\n              title: this.$t('reservation.recurringReservationNotice'),\n              message: this.$t('reservation.partOfRecurringReservation'),\n              type: 'info',\n              duration: 8000\n            })\n\n            console.log('This is part of a recurring reservation:', this.recurringReservationId)\n          }\n        } else {\n          this.reservation = null\n          this.$message.error(response.data.message || this.$t('reservation.notFound'))\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservation:', error)\n        this.$message.error(this.$t('common.error'))\n        this.reservation = null\n      } finally {\n        this.loading = false\n      }\n    },\n\n    showCancelDialog() {\n      this.cancelDialogVisible = true\n    },\n\n    async cancelReservation() {\n      this.cancelling = true\n      try {\n        const reservationCode = this.reservation.reservation_code\n\n        // 打印预约详情，帮助调试\n        console.log('预约详情:', this.reservation)\n        console.log('预约序号:', this.reservation.reservation_number)\n        console.log('预约码:', reservationCode)\n\n        const data = {\n          reason: this.cancelForm.reason,\n          user_email: this.reservation.user_email,\n          lang: this.$i18n.locale\n        }\n\n        // 添加预约序号参数，确保只取消特定的子预约\n        if (this.reservation.reservation_number) {\n          // 确保reservation_number是字符串\n          data.reservation_number = String(this.reservation.reservation_number)\n          console.log('预约序号参数存在:', data.reservation_number)\n          console.log('预约序号类型:', typeof data.reservation_number)\n        } else {\n          console.warn('预约序号参数不存在，将取消所有具有相同预约码的预约')\n        }\n\n        // 打印请求参数\n        console.log('取消预约请求参数:', data)\n\n        const response = await reservationApi.cancelReservation(reservationCode, data)\n\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.cancelSuccess'))\n          this.cancelDialogVisible = false\n\n          // 立即更新当前页面的状态显示\n          this.reservation.status = 'cancelled'\n\n          // 保存状态变更到localStorage，以便其他页面可以检测到状态变化\n          this.saveReservationStatus('cancelled')\n\n          console.log('预约已取消，状态已更新为:', this.reservation.status)\n\n          // 设置一个延迟，让用户看到状态变化后再跳转\n          setTimeout(() => {\n            // 检查是否是从循环预约详情页面跳转过来的\n            const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId\n\n            if (isFromRecurring) {\n              // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n              this.$router.push({\n                path: `/recurring-reservation/${this.recurringReservationId}`,\n                query: {\n                  fromChild: 'true',\n                  reservation_number: this.reservation.reservation_number\n                }\n              })\n            } else {\n              // 否则返回到预约管理页面\n              this.$router.push('/reservation/manage')\n            }\n          }, 1500) // 增加延迟时间，让用户有更多时间看到状态变化\n        } else {\n          this.$message.error(response.data.message || this.$t('common.error'))\n        }\n      } catch (error) {\n        console.error('Failed to cancel reservation:', error)\n        this.$message.error(this.$t('common.error'))\n      } finally {\n        this.cancelling = false\n      }\n    },\n\n    // 保存预约状态到localStorage\n    saveReservationStatus(status) {\n      if (!this.reservation) return\n\n      // 使用预约码作为键\n      const stateKey = `reservation_status_${this.reservation.reservation_code}`\n\n      // 保存状态信息\n      const state = {\n        statusText: this.getStatusText(status),\n        statusType: this.getStatusClass(status),\n        dbStatus: status,\n        forcedStatus: status,\n        timestamp: new Date().getTime(),\n        permanent: true,\n        reservationCode: this.reservation.reservation_code\n      }\n\n      console.log('保存预约状态到localStorage:', state)\n      localStorage.setItem(stateKey, JSON.stringify(state))\n\n      // 如果是循环预约的子预约，还需要保存循环预约ID\n      if (this.isRecurringReservation && this.recurringReservationId) {\n        // 使用循环预约ID和预约码的组合作为键\n        const recurringStateKey = `recurring_reservation_${this.recurringReservationId}_child_status_changed`\n\n        // 保存状态变更信息\n        const recurringState = {\n          reservationCode: this.reservation.reservation_code,\n          status: status,\n          timestamp: new Date().getTime()\n        }\n\n        console.log('保存循环预约子预约状态变更到localStorage:', recurringState)\n        localStorage.setItem(recurringStateKey, JSON.stringify(recurringState))\n      }\n    },\n\n    formatDateTime(dateTime) {\n      if (!dateTime) return ''\n\n      const date = new Date(dateTime)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    },\n\n    // 判断预约是否正在进行中\n    isReservationInProgress(reservation) {\n      if (!reservation) return false\n\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n\n      // 当前时间在开始时间和结束时间之间\n      return now >= start && now <= end\n    },\n\n    // 显示提前归还对话框\n    showReturnDialog() {\n      this.returnDialogVisible = true\n    },\n\n    // 提前归还设备\n    async returnEquipment() {\n      this.returning = true\n      try {\n        const reservationCode = this.reservation.reservation_code\n\n        // 打印预约详情，帮助调试\n        console.log('提前归还 - 预约详情:', this.reservation)\n        console.log('提前归还 - 预约序号:', this.reservation.reservation_number)\n        console.log('提前归还 - 预约码:', reservationCode)\n\n        const data = {\n          reason: this.returnForm.reason,\n          user_email: this.reservation.user_email,\n          lang: this.$i18n.locale,\n          early_return: true\n        }\n\n        // 添加预约序号参数，确保只取消特定的子预约\n        if (this.reservation.reservation_number) {\n          // 确保reservation_number是字符串\n          data.reservation_number = String(this.reservation.reservation_number)\n          console.log('提前归还 - 预约序号参数存在:', data.reservation_number)\n          console.log('提前归还 - 预约序号类型:', typeof data.reservation_number)\n        } else {\n          console.warn('提前归还 - 预约序号参数不存在，将取消所有具有相同预约码的预约')\n        }\n\n        // 打印请求参数\n        console.log('提前归还 - 请求参数:', data)\n\n        const response = await reservationApi.cancelReservation(reservationCode, data)\n\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.returnSuccess'))\n          this.returnDialogVisible = false\n\n          // 立即更新当前页面的状态显示\n          this.reservation.status = 'cancelled'\n\n          // 保存状态变更到localStorage，以便其他页面可以检测到状态变化\n          this.saveReservationStatus('cancelled')\n\n          console.log('预约已提前归还，状态已更新为:', this.reservation.status)\n\n          // 设置一个延迟，让用户看到状态变化后再跳转\n          setTimeout(() => {\n            // 检查是否是从循环预约详情页面跳转过来的\n            const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId\n\n            if (isFromRecurring) {\n              // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n              this.$router.push({\n                path: `/recurring-reservation/${this.recurringReservationId}`,\n                query: {\n                  fromChild: 'true',\n                  reservation_number: this.reservation.reservation_number\n                }\n              })\n            } else {\n              // 否则返回到预约管理页面\n              this.$router.push('/reservation/manage')\n            }\n          }, 1500) // 增加延迟时间，让用户有更多时间看到状态变化\n        } else {\n          this.$message.error(response.data.message || this.$t('common.error'))\n        }\n      } catch (error) {\n        console.error('Failed to return equipment:', error)\n        this.$message.error(this.$t('common.error'))\n      } finally {\n        this.returning = false\n      }\n    },\n\n    // 返回上一页或跳转到指定页面\n    goBack() {\n      // 检查是否是从循环预约详情页面跳转过来的\n      const isFromRecurring = this.$route.query.child === 'true' && this.recurringReservationId\n\n      if (isFromRecurring) {\n        // 如果是从循环预约详情页面跳转过来的，返回到循环预约详情页面\n        // 添加fromChild参数，标记是从子预约详情页面返回的\n        this.$router.push({\n          path: `/recurring-reservation/${this.recurringReservationId}`,\n          query: {\n            fromChild: 'true',\n            reservation_number: this.reservation.reservation_number\n          }\n        })\n      } else {\n        // 否则返回到预约查询页面\n        this.$router.push('/reservation/query')\n      }\n    },\n\n    // 查看循环预约\n    viewRecurringReservation() {\n      if (this.recurringReservationId) {\n        // 将当前预约序号作为查询参数传递，以便在循环预约详情页面中高亮显示当前预约\n        this.$router.push({\n          path: `/recurring-reservation/${this.recurringReservationId}`,\n          query: {\n            reservation_number: this.reservation.reservation_number,\n            from_detail: 'true'\n          }\n        })\n      } else {\n        this.$message.warning('无法查看循环预约详情，缺少循环预约ID')\n      }\n    },\n\n    getStatusClass(status) {\n      switch (status) {\n        case 'confirmed': return 'confirmed';\n        case 'cancelled': return 'cancelled';\n        case 'pending': return 'pending';\n        case 'expired': return 'expired';\n        default: return 'unknown';\n      }\n    },\n\n    getStatusIcon(status) {\n      switch (status) {\n        case 'confirmed': return 'el-icon-success';\n        case 'cancelled': return 'el-icon-close';\n        case 'pending': return 'el-icon-time';\n        case 'expired': return 'el-icon-warning';\n        default: return 'el-icon-question';\n      }\n    },\n\n    getStatusText(status) {\n      switch (status) {\n        case 'confirmed': return this.$t('reservation.confirmed');\n        case 'cancelled': return this.$t('reservation.cancelled');\n        case 'pending': return this.$t('reservation.pending');\n        case 'expired': return this.$t('reservation.expired');\n        default: return status; // 显示原始状态值，以防出现新的未知状态\n      }\n    },\n  }\n}\n</script>\n\n<style scoped>\n.reservation-detail {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.back-link {\n  margin-bottom: 20px;\n}\n\n.page-title {\n  margin-bottom: 20px;\n  font-size: 24px;\n  color: #303133;\n}\n\n.reservation-status-card {\n  display: flex;\n  align-items: center;\n  padding: 20px;\n  background-color: #f0f9eb;\n  border-radius: 4px;\n  margin-bottom: 20px;\n}\n\n.reservation-status-card.cancelled {\n  background-color: #fef0f0;\n}\n\n.reservation-status-card.expired {\n  background-color: #fdf6ec;\n}\n\n.status-icon {\n  font-size: 48px;\n  margin-right: 20px;\n  color: #67c23a;\n}\n\n.reservation-status-card.cancelled .status-icon {\n  color: #f56c6c;\n}\n\n.status-text h2 {\n  margin: 0 0 10px;\n  font-size: 20px;\n  color: #67c23a;\n}\n\n.reservation-status-card.cancelled .status-text h2 {\n  color: #f56c6c;\n}\n\n.status-text p {\n  margin: 0;\n  font-size: 16px;\n  color: #606266;\n}\n\n.detail-card,\n.user-card,\n.qrcode-card {\n  margin-bottom: 20px;\n}\n\n.qrcode-container {\n  text-align: center;\n}\n\n.qrcode-image {\n  max-width: 200px;\n  border: 1px solid #EBEEF5;\n  padding: 10px;\n  background-color: white;\n  margin-bottom: 10px;\n}\n\n.action-buttons {\n  margin-top: 30px;\n  text-align: center;\n}\n\n.loading-container {\n  padding: 40px 0;\n}\n\n.error-container {\n  padding: 40px 0;\n  text-align: center;\n}\n\n.cancel-content p {\n  margin-top: 0;\n  margin-bottom: 20px;\n}\n</style>\n"],"mappings":"AAqMA,SAAAA,cAAA,EAAAC,uBAAA;AACA,SAAAC,oBAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,OAAA;MACAC,UAAA;MACAC,SAAA;MACAC,WAAA;MACAC,sBAAA;MACAC,sBAAA;MACAC,yBAAA;MACAC,uBAAA;MACAC,mBAAA;MACAC,mBAAA;MACAC,UAAA;QACAC,MAAA;MACA;MACAC,UAAA;QACAD,MAAA;MACA;IACA;EACA;EAEAE,QAAA;IACA,KAAAC,gBAAA;EACA;EAEAC,OAAA;IACA,MAAAD,iBAAA;MACA,KAAAd,OAAA;MACA;QACA;QACA,IAAAgB,iBAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,MAAA;QACA,MAAAC,eAAA,QAAAH,MAAA,CAAAC,MAAA,CAAAG,IAAA;;QAEA;QACA,KAAAL,iBAAA;UACA,MAAAM,sBAAA,GAAAC,YAAA,CAAAC,OAAA;UACA,IAAAF,sBAAA;YACAG,OAAA,CAAAC,GAAA,0BAAAJ,sBAAA;YACAN,iBAAA,GAAAM,sBAAA;YACA;YACAC,YAAA,CAAAI,UAAA;UACA;QACA;;QAEA;QACA,MAAAC,kBAAA,QAAAX,MAAA,CAAAY,KAAA,CAAAC,KAAA;QACA,MAAAC,kBAAA,QAAAd,MAAA,CAAAY,KAAA,CAAAG,EAAA;QACA,MAAAC,WAAA,QAAAhB,MAAA,CAAAY,KAAA,CAAAI,WAAA;QACA,MAAAC,SAAA,QAAAjB,MAAA,CAAAY,KAAA,CAAAK,SAAA;QACA,MAAAC,OAAA,QAAAlB,MAAA,CAAAY,KAAA,CAAAM,OAAA;;QAEA;QACA,IAAAP,kBAAA,IAAAK,WAAA;UACA,KAAA5B,sBAAA,GAAA4B,WAAA;UACAR,OAAA,CAAAC,GAAA,2DAAAO,WAAA;QACA;;QAEA;QACA,IAAAjB,iBAAA;UACAS,OAAA,CAAAC,GAAA,gBAAAV,iBAAA;;UAEA;UACA,MAAAoB,QAAA,SAAAzC,cAAA,CAAA0C,sBAAA,CAAArB,iBAAA;UAEA,IAAAoB,QAAA,CAAArC,IAAA,CAAAuC,OAAA;YACA,KAAAnC,WAAA,GAAAiC,QAAA,CAAArC,IAAA,CAAAA,IAAA;YACA0B,OAAA,CAAAC,GAAA,qBAAAvB,WAAA;;YAEA;YACA,KAAAoC,OAAA;cACAC,KAAA;cACAC,OAAA,sBAAAtC,WAAA,CAAAuC,kBAAA;cACAC,IAAA;cACAC,QAAA;YACA;;YAEA;YACA,SAAAtC,yBAAA,SAAAC,uBAAA;cACAkB,OAAA,CAAAC,GAAA;cACA,KAAAvB,WAAA,CAAA0C,cAAA,QAAAvC,yBAAA;cACA,KAAAH,WAAA,CAAA2C,YAAA,QAAAvC,uBAAA;YACA;;YAEA;YACA,SAAAJ,WAAA,CAAA4C,wBAAA;cACA,KAAA3C,sBAAA;cACA,KAAAC,sBAAA,QAAAF,WAAA,CAAA4C,wBAAA;;cAEA;cACA,KAAAR,OAAA;gBACAC,KAAA,OAAAQ,EAAA;gBACAP,OAAA,OAAAO,EAAA;gBACAL,IAAA;gBACAC,QAAA;cACA;cAEAnB,OAAA,CAAAC,GAAA,kDAAArB,sBAAA;YACA;UACA;YACA,KAAAF,WAAA;YACA,KAAA8C,QAAA,CAAAC,KAAA,CAAAd,QAAA,CAAArC,IAAA,CAAA0C,OAAA,SAAAO,EAAA;UACA;UAEA,KAAAhD,OAAA;UACA;QACA;;QAEA;QACA;QACA,KAAA4B,kBAAA;UACA;YACA,MAAAuB,iBAAA,SAAAvD,uBAAA,CAAAwD,6BAAA,CAAAhC,eAAA;YAEA,IAAA+B,iBAAA,CAAApD,IAAA,CAAAuC,OAAA;cACA;cACAb,OAAA,CAAAC,GAAA;cACA;cACA2B,MAAA,CAAAC,QAAA,CAAAC,IAAA,8BAAAJ,iBAAA,CAAApD,IAAA,CAAAA,IAAA,CAAAiC,EAAA;cACA;YACA;UACA,SAAAwB,cAAA;YACA/B,OAAA,CAAAC,GAAA;YACA;UACA;QACA;UACAD,OAAA,CAAAC,GAAA;;UAEA;UACA,IAAAK,kBAAA,IAAAG,SAAA,IAAAC,OAAA;YACA;cACA;cACAV,OAAA,CAAAC,GAAA,wCAAAK,kBAAA;cACAN,OAAA,CAAAC,GAAA,4BAAAQ,SAAA,QAAAC,OAAA;;cAEA;cACA,KAAA7B,yBAAA,GAAA4B,SAAA;cACA,KAAA3B,uBAAA,GAAA4B,OAAA;YACA,EACA,OAAAe,KAAA;cACAzB,OAAA,CAAAyB,KAAA,6CAAAA,KAAA;YACA;UACA;QACA;;QAEA;QACA;QACA,MAAAO,sBAAA,QAAAxC,MAAA,CAAAY,KAAA,CAAAa,kBAAA;;QAEA;QACA,IAAAgB,oBAAA;QACA,IAAAD,sBAAA;UACA,WAAAA,sBAAA;YACAhC,OAAA,CAAAkC,IAAA,sBAAAF,sBAAA;UACA;YACAC,oBAAA,GAAAE,MAAA,CAAAH,sBAAA;UACA;QACA;QAEAhC,OAAA,CAAAC,GAAA;UACAN,eAAA;UACAJ,iBAAA,EAAA0C,oBAAA;UACAG,qBAAA,EAAAJ,sBAAA,UAAAA,sBAAA;UACAK,UAAA,OAAA7C,MAAA,CAAAY;QACA;;QAEA;QACA,MAAAO,QAAA,SAAAzC,cAAA,CAAAoE,oBAAA,CACA3C,eAAA,EACAsC,oBACA;QAEA,IAAAtB,QAAA,CAAArC,IAAA,CAAAuC,OAAA;UACA,KAAAnC,WAAA,GAAAiC,QAAA,CAAArC,IAAA,CAAAA,IAAA;;UAEA;UACA,SAAAO,yBAAA,SAAAC,uBAAA;YACAkB,OAAA,CAAAC,GAAA;YACA,KAAAvB,WAAA,CAAA0C,cAAA,QAAAvC,yBAAA;YACA,KAAAH,WAAA,CAAA2C,YAAA,QAAAvC,uBAAA;UACA;;UAEA;UACA,SAAAJ,WAAA,CAAA4C,wBAAA;YACA,KAAA3C,sBAAA;YACA,KAAAC,sBAAA,QAAAF,WAAA,CAAA4C,wBAAA;;YAEA;YACA,KAAAR,OAAA;cACAC,KAAA,OAAAQ,EAAA;cACAP,OAAA,OAAAO,EAAA;cACAL,IAAA;cACAC,QAAA;YACA;YAEAnB,OAAA,CAAAC,GAAA,kDAAArB,sBAAA;UACA;QACA;UACA,KAAAF,WAAA;UACA,KAAA8C,QAAA,CAAAC,KAAA,CAAAd,QAAA,CAAArC,IAAA,CAAA0C,OAAA,SAAAO,EAAA;QACA;MACA,SAAAE,KAAA;QACAzB,OAAA,CAAAyB,KAAA,iCAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,MAAAF,EAAA;QACA,KAAA7C,WAAA;MACA;QACA,KAAAH,OAAA;MACA;IACA;IAEAgE,iBAAA;MACA,KAAAxD,mBAAA;IACA;IAEA,MAAAyD,kBAAA;MACA,KAAAhE,UAAA;MACA;QACA,MAAAmB,eAAA,QAAAjB,WAAA,CAAA+D,gBAAA;;QAEA;QACAzC,OAAA,CAAAC,GAAA,eAAAvB,WAAA;QACAsB,OAAA,CAAAC,GAAA,eAAAvB,WAAA,CAAAuC,kBAAA;QACAjB,OAAA,CAAAC,GAAA,SAAAN,eAAA;QAEA,MAAArB,IAAA;UACAY,MAAA,OAAAD,UAAA,CAAAC,MAAA;UACAwD,UAAA,OAAAhE,WAAA,CAAAgE,UAAA;UACAC,IAAA,OAAAC,KAAA,CAAAC;QACA;;QAEA;QACA,SAAAnE,WAAA,CAAAuC,kBAAA;UACA;UACA3C,IAAA,CAAA2C,kBAAA,GAAAkB,MAAA,MAAAzD,WAAA,CAAAuC,kBAAA;UACAjB,OAAA,CAAAC,GAAA,cAAA3B,IAAA,CAAA2C,kBAAA;UACAjB,OAAA,CAAAC,GAAA,mBAAA3B,IAAA,CAAA2C,kBAAA;QACA;UACAjB,OAAA,CAAAkC,IAAA;QACA;;QAEA;QACAlC,OAAA,CAAAC,GAAA,cAAA3B,IAAA;QAEA,MAAAqC,QAAA,SAAAzC,cAAA,CAAAsE,iBAAA,CAAA7C,eAAA,EAAArB,IAAA;QAEA,IAAAqC,QAAA,CAAArC,IAAA,CAAAuC,OAAA;UACA,KAAAW,QAAA,CAAAX,OAAA,MAAAU,EAAA;UACA,KAAAxC,mBAAA;;UAEA;UACA,KAAAL,WAAA,CAAAoE,MAAA;;UAEA;UACA,KAAAC,qBAAA;UAEA/C,OAAA,CAAAC,GAAA,uBAAAvB,WAAA,CAAAoE,MAAA;;UAEA;UACAE,UAAA;YACA;YACA,MAAAC,eAAA,QAAAzD,MAAA,CAAAY,KAAA,CAAAC,KAAA,oBAAAzB,sBAAA;YAEA,IAAAqE,eAAA;cACA;cACA,KAAAC,OAAA,CAAAC,IAAA;gBACAC,IAAA,iCAAAxE,sBAAA;gBACAwB,KAAA;kBACAiD,SAAA;kBACApC,kBAAA,OAAAvC,WAAA,CAAAuC;gBACA;cACA;YACA;cACA;cACA,KAAAiC,OAAA,CAAAC,IAAA;YACA;UACA;QACA;UACA,KAAA3B,QAAA,CAAAC,KAAA,CAAAd,QAAA,CAAArC,IAAA,CAAA0C,OAAA,SAAAO,EAAA;QACA;MACA,SAAAE,KAAA;QACAzB,OAAA,CAAAyB,KAAA,kCAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,MAAAF,EAAA;MACA;QACA,KAAA/C,UAAA;MACA;IACA;IAEA;IACAuE,sBAAAD,MAAA;MACA,UAAApE,WAAA;;MAEA;MACA,MAAA4E,QAAA,8BAAA5E,WAAA,CAAA+D,gBAAA;;MAEA;MACA,MAAAc,KAAA;QACAC,UAAA,OAAAC,aAAA,CAAAX,MAAA;QACAY,UAAA,OAAAC,cAAA,CAAAb,MAAA;QACAc,QAAA,EAAAd,MAAA;QACAe,YAAA,EAAAf,MAAA;QACAgB,SAAA,MAAAC,IAAA,GAAAC,OAAA;QACAC,SAAA;QACAtE,eAAA,OAAAjB,WAAA,CAAA+D;MACA;MAEAzC,OAAA,CAAAC,GAAA,yBAAAsD,KAAA;MACAzD,YAAA,CAAAoE,OAAA,CAAAZ,QAAA,EAAAa,IAAA,CAAAC,SAAA,CAAAb,KAAA;;MAEA;MACA,SAAA5E,sBAAA,SAAAC,sBAAA;QACA;QACA,MAAAyF,iBAAA,iCAAAzF,sBAAA;;QAEA;QACA,MAAA0F,cAAA;UACA3E,eAAA,OAAAjB,WAAA,CAAA+D,gBAAA;UACAK,MAAA,EAAAA,MAAA;UACAgB,SAAA,MAAAC,IAAA,GAAAC,OAAA;QACA;QAEAhE,OAAA,CAAAC,GAAA,gCAAAqE,cAAA;QACAxE,YAAA,CAAAoE,OAAA,CAAAG,iBAAA,EAAAF,IAAA,CAAAC,SAAA,CAAAE,cAAA;MACA;IACA;IAEAC,eAAAC,QAAA;MACA,KAAAA,QAAA;MAEA,MAAAC,IAAA,OAAAV,IAAA,CAAAS,QAAA;MACA,UAAAC,IAAA,CAAAC,WAAA,MAAAvC,MAAA,CAAAsC,IAAA,CAAAE,QAAA,QAAAC,QAAA,YAAAzC,MAAA,CAAAsC,IAAA,CAAAI,OAAA,IAAAD,QAAA,YAAAzC,MAAA,CAAAsC,IAAA,CAAAK,QAAA,IAAAF,QAAA,YAAAzC,MAAA,CAAAsC,IAAA,CAAAM,UAAA,IAAAH,QAAA;IACA;IAEA;IACAI,wBAAAtG,WAAA;MACA,KAAAA,WAAA;MAEA,MAAAuG,GAAA,OAAAlB,IAAA;MACA,MAAAmB,KAAA,OAAAnB,IAAA,CAAArF,WAAA,CAAA0C,cAAA;MACA,MAAA+D,GAAA,OAAApB,IAAA,CAAArF,WAAA,CAAA2C,YAAA;;MAEA;MACA,OAAA4D,GAAA,IAAAC,KAAA,IAAAD,GAAA,IAAAE,GAAA;IACA;IAEA;IACAC,iBAAA;MACA,KAAApG,mBAAA;IACA;IAEA;IACA,MAAAqG,gBAAA;MACA,KAAA5G,SAAA;MACA;QACA,MAAAkB,eAAA,QAAAjB,WAAA,CAAA+D,gBAAA;;QAEA;QACAzC,OAAA,CAAAC,GAAA,sBAAAvB,WAAA;QACAsB,OAAA,CAAAC,GAAA,sBAAAvB,WAAA,CAAAuC,kBAAA;QACAjB,OAAA,CAAAC,GAAA,gBAAAN,eAAA;QAEA,MAAArB,IAAA;UACAY,MAAA,OAAAC,UAAA,CAAAD,MAAA;UACAwD,UAAA,OAAAhE,WAAA,CAAAgE,UAAA;UACAC,IAAA,OAAAC,KAAA,CAAAC,MAAA;UACAyC,YAAA;QACA;;QAEA;QACA,SAAA5G,WAAA,CAAAuC,kBAAA;UACA;UACA3C,IAAA,CAAA2C,kBAAA,GAAAkB,MAAA,MAAAzD,WAAA,CAAAuC,kBAAA;UACAjB,OAAA,CAAAC,GAAA,qBAAA3B,IAAA,CAAA2C,kBAAA;UACAjB,OAAA,CAAAC,GAAA,0BAAA3B,IAAA,CAAA2C,kBAAA;QACA;UACAjB,OAAA,CAAAkC,IAAA;QACA;;QAEA;QACAlC,OAAA,CAAAC,GAAA,iBAAA3B,IAAA;QAEA,MAAAqC,QAAA,SAAAzC,cAAA,CAAAsE,iBAAA,CAAA7C,eAAA,EAAArB,IAAA;QAEA,IAAAqC,QAAA,CAAArC,IAAA,CAAAuC,OAAA;UACA,KAAAW,QAAA,CAAAX,OAAA,MAAAU,EAAA;UACA,KAAAvC,mBAAA;;UAEA;UACA,KAAAN,WAAA,CAAAoE,MAAA;;UAEA;UACA,KAAAC,qBAAA;UAEA/C,OAAA,CAAAC,GAAA,yBAAAvB,WAAA,CAAAoE,MAAA;;UAEA;UACAE,UAAA;YACA;YACA,MAAAC,eAAA,QAAAzD,MAAA,CAAAY,KAAA,CAAAC,KAAA,oBAAAzB,sBAAA;YAEA,IAAAqE,eAAA;cACA;cACA,KAAAC,OAAA,CAAAC,IAAA;gBACAC,IAAA,iCAAAxE,sBAAA;gBACAwB,KAAA;kBACAiD,SAAA;kBACApC,kBAAA,OAAAvC,WAAA,CAAAuC;gBACA;cACA;YACA;cACA;cACA,KAAAiC,OAAA,CAAAC,IAAA;YACA;UACA;QACA;UACA,KAAA3B,QAAA,CAAAC,KAAA,CAAAd,QAAA,CAAArC,IAAA,CAAA0C,OAAA,SAAAO,EAAA;QACA;MACA,SAAAE,KAAA;QACAzB,OAAA,CAAAyB,KAAA,gCAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA,MAAAF,EAAA;MACA;QACA,KAAA9C,SAAA;MACA;IACA;IAEA;IACA8G,OAAA;MACA;MACA,MAAAtC,eAAA,QAAAzD,MAAA,CAAAY,KAAA,CAAAC,KAAA,oBAAAzB,sBAAA;MAEA,IAAAqE,eAAA;QACA;QACA;QACA,KAAAC,OAAA,CAAAC,IAAA;UACAC,IAAA,iCAAAxE,sBAAA;UACAwB,KAAA;YACAiD,SAAA;YACApC,kBAAA,OAAAvC,WAAA,CAAAuC;UACA;QACA;MACA;QACA;QACA,KAAAiC,OAAA,CAAAC,IAAA;MACA;IACA;IAEA;IACAqC,yBAAA;MACA,SAAA5G,sBAAA;QACA;QACA,KAAAsE,OAAA,CAAAC,IAAA;UACAC,IAAA,iCAAAxE,sBAAA;UACAwB,KAAA;YACAa,kBAAA,OAAAvC,WAAA,CAAAuC,kBAAA;YACAwE,WAAA;UACA;QACA;MACA;QACA,KAAAjE,QAAA,CAAAkE,OAAA;MACA;IACA;IAEA/B,eAAAb,MAAA;MACA,QAAAA,MAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;MACA;IACA;IAEA6C,cAAA7C,MAAA;MACA,QAAAA,MAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;MACA;IACA;IAEAW,cAAAX,MAAA;MACA,QAAAA,MAAA;QACA;UAAA,YAAAvB,EAAA;QACA;UAAA,YAAAA,EAAA;QACA;UAAA,YAAAA,EAAA;QACA;UAAA,YAAAA,EAAA;QACA;UAAA,OAAAuB,MAAA;QAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}