{"ast":null,"code":"// import { Calendar } from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport FullCalendar from '@fullcalendar/vue';\nimport { formatDate } from '@/utils/date';\nexport default {\n  name: 'CalendarView',\n  components: {\n    FullCalendar\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        initialView: 'dayGridMonth',\n        headerToolbar: false,\n        // 我们使用自定义的头部控件\n        events: [],\n        // 将通过API加载\n        eventClick: this.handleEventClick,\n        eventDidMount: this.handleEventDidMount,\n        datesSet: this.handleDatesSet,\n        locale: this.$i18n.locale === 'zh-CN' ? 'zh-cn' : 'en',\n        firstDay: 1,\n        // 周一作为一周的第一天\n        allDaySlot: false,\n        // 不显示\"全天\"选项\n        slotMinTime: '00:00:00',\n        // 从0点开始\n        slotMaxTime: '24:00:00',\n        // 到24点结束\n        height: 'auto',\n        slotLabelFormat: {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false // 使用24小时制\n        },\n        titleFormat: {\n          year: 'numeric',\n          month: 'long'\n        },\n        // 标题格式\n        views: {\n          dayGridMonth: {\n            dayHeaderFormat: {\n              weekday: 'long'\n            },\n            // 月视图只显示星期几\n            fixedWeekCount: false,\n            // 根据当月天数动态调整行数\n            showNonCurrentDates: false // 隐藏不属于当前月份的日期\n          },\n          timeGridWeek: {\n            dayHeaderFormat: {\n              weekday: 'long',\n              month: 'numeric',\n              day: 'numeric',\n              omitCommas: true\n            } // 周视图显示完整日期\n          },\n          timeGridDay: {\n            dayHeaderFormat: {\n              weekday: 'long',\n              month: 'numeric',\n              day: 'numeric',\n              omitCommas: true\n            } // 日视图显示完整日期\n          }\n        },\n        locales: {\n          'zh-cn': {\n            week: {\n              dow: 1,\n              // 周一作为一周的第一天\n              doy: 4 // 一年中第一周必须包含1月4日\n            },\n            buttonText: {\n              today: '今天',\n              month: '月',\n              week: '周',\n              day: '日'\n            },\n            weekText: '周',\n            allDayText: '全天',\n            moreLinkText: '更多',\n            noEventsText: '没有事件'\n          },\n          'en': {\n            week: {\n              dow: 1,\n              // 周一作为一周的第一天\n              doy: 4 // 一年中第一周必须包含1月4日\n            },\n            buttonText: {\n              today: 'Today',\n              month: 'Month',\n              week: 'Week',\n              day: 'Day'\n            },\n            weekText: 'W',\n            allDayText: 'All day',\n            moreLinkText: 'more',\n            noEventsText: 'No events'\n          }\n        }\n      },\n      detailVisible: false,\n      selectedEvent: null,\n      loading: false,\n      currentViewTitle: ''\n    };\n  },\n  mounted() {\n    this.loadEvents();\n  },\n  watch: {\n    // 监听语言变化\n    '$i18n.locale': {\n      handler(newLocale) {\n        if (this.$refs.fullCalendar) {\n          const calendarApi = this.$refs.fullCalendar.getApi();\n          calendarApi.setOption('locale', newLocale === 'zh-CN' ? 'zh-cn' : 'en');\n          this.currentViewTitle = calendarApi.view.title;\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    // 加载预约数据\n    async loadEvents() {\n      this.loading = true;\n      try {\n        const calendarApi = this.$refs.fullCalendar.getApi();\n        const start = this.formatDate(calendarApi.view.activeStart);\n        const end = this.formatDate(calendarApi.view.activeEnd);\n\n        // 尝试从API获取数据\n        try {\n          const response = await this.$http.get('/api/reservations/calendar', {\n            params: {\n              start_date: start,\n              end_date: end\n            }\n          });\n          if (response.data.success) {\n            calendarApi.removeAllEvents();\n            calendarApi.addEventSource(response.data.events);\n            this.loading = false;\n            return; // 如果API成功返回数据，就不使用模拟数据\n          }\n        } catch (error) {\n          console.log('API请求失败，使用模拟数据');\n        }\n\n        // 如果API请求失败，使用模拟数据\n        calendarApi.removeAllEvents();\n\n        // 生成模拟数据\n        const mockEvents = this.generateMockEvents();\n        calendarApi.addEventSource(mockEvents);\n      } catch (error) {\n        console.error('Failed to load calendar events:', error);\n        this.$message.error(this.$t('calendar.loadFailed'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 生成模拟预约数据\n    generateMockEvents() {\n      const now = new Date();\n      const currentYear = now.getFullYear();\n      const currentMonth = now.getMonth();\n\n      // 设备列表\n      const devices = [{\n        id: 1,\n        name: 'SpeakerA',\n        category: '音响设备'\n      }, {\n        id: 2,\n        name: 'Microscope B',\n        category: '显微镜'\n      }, {\n        id: 3,\n        name: 'Projector C',\n        category: '投影仪'\n      }, {\n        id: 4,\n        name: 'Computer D',\n        category: '计算机'\n      }, {\n        id: 5,\n        name: 'Camera E',\n        category: '摄影器材'\n      }];\n\n      // 用户列表\n      const users = [{\n        id: 1,\n        name: '张三',\n        department: '研发部',\n        email: 'zhangsan@example.com'\n      }, {\n        id: 2,\n        name: '李四',\n        department: '市场部',\n        email: 'lisi@example.com'\n      }, {\n        id: 3,\n        name: '王五',\n        department: '行政部',\n        email: 'wangwu@example.com'\n      }, {\n        id: 4,\n        name: '赵六',\n        department: '财务部',\n        email: 'zhaoliu@example.com'\n      }, {\n        id: 5,\n        name: '陈传超',\n        department: '技术部',\n        email: 'chenchuanchao@example.com'\n      }];\n\n      // 预约状态\n      const statuses = ['confirmed', 'in_use', 'expired', 'cancelled'];\n      const events = [];\n\n      // 生成单次预约\n      for (let i = 0; i < 15; i++) {\n        const deviceIndex = Math.floor(Math.random() * devices.length);\n        const userIndex = Math.floor(Math.random() * users.length);\n        const statusIndex = Math.floor(Math.random() * (statuses.length - 1)); // 减少取消状态的概率\n\n        // 随机日期，在当前月份的前后15天内\n        const day = Math.floor(Math.random() * 30) - 15;\n        const startDate = new Date(currentYear, currentMonth, now.getDate() + day);\n\n        // 随机时间，8:00 - 18:00\n        startDate.setHours(8 + Math.floor(Math.random() * 10));\n        startDate.setMinutes(Math.random() > 0.5 ? 0 : 30);\n\n        // 持续时间，1-4小时\n        const duration = 1 + Math.floor(Math.random() * 4);\n        const endDate = new Date(startDate);\n        endDate.setHours(startDate.getHours() + duration);\n\n        // 确定状态\n        let status = statuses[statusIndex];\n        if (startDate < now && endDate > now) {\n          status = 'in_use'; // 如果当前时间在预约时间范围内，则状态为\"使用中\"\n        } else if (endDate < now) {\n          status = 'expired'; // 如果结束时间已过，则状态为\"已过期\"\n        }\n\n        // 生成预约序号\n        const reservationNumber = `RN-${startDate.getFullYear()}${String(startDate.getMonth() + 1).padStart(2, '0')}${String(startDate.getDate()).padStart(2, '0')}-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`;\n        events.push({\n          id: i + 1,\n          title: devices[deviceIndex].name,\n          start: startDate,\n          end: endDate,\n          extendedProps: {\n            deviceId: devices[deviceIndex].id,\n            deviceCategory: devices[deviceIndex].category,\n            userId: users[userIndex].id,\n            userName: users[userIndex].name,\n            userDepartment: users[userIndex].department,\n            userEmail: users[userIndex].email,\n            status: status,\n            reservationNumber: reservationNumber,\n            isRecurring: false\n          }\n        });\n      }\n\n      // 生成循环预约（每周重复的预约）\n      for (let i = 0; i < 3; i++) {\n        const deviceIndex = Math.floor(Math.random() * devices.length);\n        const userIndex = Math.floor(Math.random() * users.length);\n\n        // 循环预约的起始日期，在当前月份内\n        const startDay = Math.floor(Math.random() * 15);\n        const recurringStartDate = new Date(currentYear, currentMonth, now.getDate() - 15 + startDay);\n\n        // 随机时间，8:00 - 18:00\n        recurringStartDate.setHours(8 + Math.floor(Math.random() * 10));\n        recurringStartDate.setMinutes(Math.random() > 0.5 ? 0 : 30);\n\n        // 持续时间，1-2小时\n        const duration = 1 + Math.floor(Math.random() * 2);\n\n        // 生成循环预约码\n        const recurringCode = this.generateRandomCode(8);\n        const recurringId = 1000 + i;\n\n        // 生成6个子预约（每周重复）\n        for (let j = 0; j < 6; j++) {\n          const startDate = new Date(recurringStartDate);\n          startDate.setDate(startDate.getDate() + j * 7); // 每周重复\n\n          const endDate = new Date(startDate);\n          endDate.setHours(startDate.getHours() + duration);\n\n          // 确定状态\n          let status = 'confirmed';\n          if (startDate < now && endDate > now) {\n            status = 'in_use'; // 如果当前时间在预约时间范围内，则状态为\"使用中\"\n          } else if (endDate < now) {\n            status = 'expired'; // 如果结束时间已过，则状态为\"已过期\"\n          }\n\n          // 生成预约序号\n          const reservationNumber = `RN-${startDate.getFullYear()}${String(startDate.getMonth() + 1).padStart(2, '0')}${String(startDate.getDate()).padStart(2, '0')}-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`;\n          events.push({\n            id: 100 + i * 10 + j,\n            title: devices[deviceIndex].name,\n            start: startDate,\n            end: endDate,\n            extendedProps: {\n              deviceId: devices[deviceIndex].id,\n              deviceCategory: devices[deviceIndex].category,\n              userId: users[userIndex].id,\n              userName: users[userIndex].name,\n              userDepartment: users[userIndex].department,\n              userEmail: users[userIndex].email,\n              status: status,\n              reservationNumber: reservationNumber,\n              isRecurring: true,\n              recurringReservationId: recurringId,\n              recurringCode: recurringCode\n            }\n          });\n        }\n      }\n      return events;\n    },\n    // 生成随机预约码\n    generateRandomCode(length) {\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      let result = '';\n      for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n      }\n      return result;\n    },\n    // 处理日期范围变化\n    handleDatesSet() {\n      // 更新当前视图标题\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      this.currentViewTitle = calendarApi.view.title;\n\n      // 加载事件数据\n      this.loadEvents();\n    },\n    // 处理事件点击\n    handleEventClick(info) {\n      this.selectedEvent = info.event;\n      this.detailVisible = true;\n    },\n    // 处理事件渲染\n    handleEventDidMount(info) {\n      // 为循环预约添加标记\n      if (info.event.extendedProps.isRecurring) {\n        const recurringIcon = document.createElement('span');\n        recurringIcon.className = 'recurring-icon';\n        recurringIcon.innerHTML = '<i class=\"el-icon-refresh-right\"></i>';\n        const titleEl = info.el.querySelector('.fc-event-title');\n        if (titleEl) {\n          titleEl.appendChild(recurringIcon);\n        }\n      }\n\n      // 在周视图和日视图中自定义事件内容\n      if (info.view.type === 'timeGridWeek' || info.view.type === 'timeGridDay') {\n        // 清除默认内容\n        const eventContent = info.el.querySelector('.fc-event-main');\n        if (eventContent) {\n          // 创建自定义内容\n          const customContent = document.createElement('div');\n          customContent.className = 'custom-event-content';\n\n          // 设备名称\n          const title = document.createElement('div');\n          title.className = 'event-title';\n          title.textContent = info.event.title;\n          customContent.appendChild(title);\n\n          // 使用人\n          const user = document.createElement('div');\n          user.className = 'event-user';\n          user.textContent = info.event.extendedProps.userName || '';\n          customContent.appendChild(user);\n\n          // 时间\n          const time = document.createElement('div');\n          time.className = 'event-time';\n          const startTime = info.event.start ? info.event.start.toLocaleTimeString('zh-CN', {\n            hour: '2-digit',\n            minute: '2-digit'\n          }) : '';\n          const endTime = info.event.end ? info.event.end.toLocaleTimeString('zh-CN', {\n            hour: '2-digit',\n            minute: '2-digit'\n          }) : '';\n          time.textContent = `${startTime}-${endTime}`;\n          customContent.appendChild(time);\n\n          // 替换内容\n          eventContent.innerHTML = '';\n          eventContent.appendChild(customContent);\n        }\n\n        // 根据状态设置事件颜色\n        const status = info.event.extendedProps.status;\n        if (status) {\n          if (status === 'confirmed') {\n            info.el.style.backgroundColor = '#67c23a'; // 已确认 - 绿色\n            info.el.style.borderColor = '#67c23a';\n          } else if (status === 'in_use') {\n            info.el.style.backgroundColor = '#409eff'; // 使用中 - 蓝色\n            info.el.style.borderColor = '#409eff';\n          }\n        }\n      }\n    },\n    // 切换视图\n    changeView(viewName) {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.changeView(viewName);\n    },\n    // 跳转到今天\n    today() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.today();\n    },\n    // 上一个时间段\n    prev() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.prev();\n    },\n    // 下一个时间段\n    next() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.next();\n    },\n    // 获取状态标签类型\n    getStatusTagType(status) {\n      const statusMap = {\n        'confirmed': 'success',\n        'in_use': 'primary',\n        'cancelled': 'info',\n        'expired': 'danger'\n      };\n      return statusMap[status] || 'info';\n    },\n    // 格式化日期\n    formatDate(date) {\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    },\n    // 格式化日期时间\n    formatDateTime(date) {\n      return formatDate(date, 'YYYY-MM-DD HH:mm');\n    },\n    // 获取状态文本\n    getStatusText(status) {\n      const statusMap = {\n        'confirmed': this.$t('reservation.confirmed'),\n        'in_use': this.$t('reservation.inUse'),\n        'cancelled': this.$t('reservation.cancelled'),\n        'expired': this.$t('reservation.expired')\n      };\n      return statusMap[status] || status;\n    }\n  }\n};","map":{"version":3,"names":["dayGridPlugin","timeGridPlugin","interactionPlugin","FullCalendar","formatDate","name","components","data","calendarOptions","plugins","initialView","headerToolbar","events","eventClick","handleEventClick","eventDidMount","handleEventDidMount","datesSet","handleDatesSet","locale","$i18n","firstDay","allDaySlot","slotMinTime","slotMaxTime","height","slotLabelFormat","hour","minute","hour12","titleFormat","year","month","views","dayGridMonth","dayHeaderFormat","weekday","fixedWeekCount","showNonCurrentDates","timeGridWeek","day","omitCommas","timeGridDay","locales","week","dow","doy","buttonText","today","weekText","allDayText","moreLinkText","noEventsText","detailVisible","selectedEvent","loading","currentViewTitle","mounted","loadEvents","watch","handler","newLocale","$refs","fullCalendar","calendarApi","getApi","setOption","view","title","immediate","methods","start","activeStart","end","activeEnd","response","$http","get","params","start_date","end_date","success","removeAllEvents","addEventSource","error","console","log","mockEvents","generateMockEvents","$message","$t","now","Date","currentYear","getFullYear","currentMonth","getMonth","devices","id","category","users","department","email","statuses","i","deviceIndex","Math","floor","random","length","userIndex","statusIndex","startDate","getDate","setHours","setMinutes","duration","endDate","getHours","status","reservationNumber","String","padStart","push","extendedProps","deviceId","deviceCategory","userId","userName","userDepartment","userEmail","isRecurring","startDay","recurringStartDate","recurringCode","generateRandomCode","recurringId","j","setDate","recurringReservationId","characters","result","charAt","info","event","recurringIcon","document","createElement","className","innerHTML","titleEl","el","querySelector","appendChild","type","eventContent","customContent","textContent","user","time","startTime","toLocaleTimeString","endTime","style","backgroundColor","borderColor","changeView","viewName","prev","next","getStatusTagType","statusMap","date","formatDateTime","getStatusText"],"sources":["src/views/calendar/CalendarView.vue"],"sourcesContent":["<template>\n  <div class=\"calendar-view\">\n    <div class=\"calendar-header\">\n      <el-row type=\"flex\" justify=\"space-between\" align=\"middle\">\n        <el-col :span=\"8\">\n          <h1>{{ $t('calendar.title') }}</h1>\n          <h2 class=\"calendar-current-date\">{{ currentViewTitle }}</h2>\n        </el-col>\n        <el-col :span=\"16\">\n          <div class=\"calendar-controls\">\n            <el-button-group>\n              <el-button size=\"small\" @click=\"changeView('dayGridMonth')\">{{ $t('calendar.month') }}</el-button>\n              <el-button size=\"small\" @click=\"changeView('timeGridWeek')\">{{ $t('calendar.week') }}</el-button>\n              <el-button size=\"small\" @click=\"changeView('timeGridDay')\">{{ $t('calendar.day') }}</el-button>\n            </el-button-group>\n            <el-button size=\"small\" @click=\"today\">{{ $t('calendar.today') }}</el-button>\n            <el-button-group>\n              <el-button size=\"small\" icon=\"el-icon-arrow-left\" @click=\"prev\"></el-button>\n              <el-button size=\"small\" icon=\"el-icon-arrow-right\" @click=\"next\"></el-button>\n            </el-button-group>\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n\n    <FullCalendar\n      ref=\"fullCalendar\"\n      :options=\"calendarOptions\"\n    />\n\n    <!-- 预约详情弹窗 -->\n    <el-dialog :visible.sync=\"detailVisible\" width=\"400px\" :title=\"$t('calendar.reservationInfo')\">\n      <div v-if=\"selectedEvent\" class=\"event-detail-card\">\n        <div class=\"event-header\" :class=\"'status-' + selectedEvent.extendedProps.status\">\n          <h3>{{ selectedEvent.title }}</h3>\n          <el-tag size=\"small\" :type=\"getStatusTagType(selectedEvent.extendedProps.status)\">\n            {{ getStatusText(selectedEvent.extendedProps.status) }}\n          </el-tag>\n        </div>\n\n        <div class=\"event-info\">\n          <div class=\"info-item time-info\">\n            <i class=\"el-icon-time\"></i>\n            <span class=\"time-display\">{{ formatDateTime(selectedEvent.start) }} - {{ formatDateTime(selectedEvent.end) }}</span>\n          </div>\n\n          <div class=\"info-item\">\n            <i class=\"el-icon-user\"></i>\n            <span>{{ selectedEvent.extendedProps.userName }} ({{ selectedEvent.extendedProps.userDepartment }})</span>\n          </div>\n\n          <div class=\"info-item\" v-if=\"selectedEvent.extendedProps.userEmail\">\n            <i class=\"el-icon-message\"></i>\n            <span>{{ selectedEvent.extendedProps.userEmail }}</span>\n          </div>\n        </div>\n\n        <!-- 循环预约提示 -->\n        <div v-if=\"selectedEvent.extendedProps.isRecurring\" class=\"recurring-notice\">\n          <el-alert\n            :title=\"$t('reservation.partOfRecurringReservation')\"\n            type=\"info\"\n            :closable=\"false\">\n          </el-alert>\n        </div>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n// import { Calendar } from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport FullCalendar from '@fullcalendar/vue';\nimport { formatDate } from '@/utils/date';\n\nexport default {\n  name: 'CalendarView',\n  components: {\n    FullCalendar\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        initialView: 'dayGridMonth',\n        headerToolbar: false, // 我们使用自定义的头部控件\n        events: [], // 将通过API加载\n        eventClick: this.handleEventClick,\n        eventDidMount: this.handleEventDidMount,\n        datesSet: this.handleDatesSet,\n        locale: this.$i18n.locale === 'zh-CN' ? 'zh-cn' : 'en',\n        firstDay: 1, // 周一作为一周的第一天\n        allDaySlot: false, // 不显示\"全天\"选项\n        slotMinTime: '00:00:00', // 从0点开始\n        slotMaxTime: '24:00:00', // 到24点结束\n        height: 'auto',\n        slotLabelFormat: {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false // 使用24小时制\n        },\n        titleFormat: { year: 'numeric', month: 'long' }, // 标题格式\n        views: {\n          dayGridMonth: {\n            dayHeaderFormat: { weekday: 'long' }, // 月视图只显示星期几\n            fixedWeekCount: false, // 根据当月天数动态调整行数\n            showNonCurrentDates: false // 隐藏不属于当前月份的日期\n          },\n          timeGridWeek: {\n            dayHeaderFormat: { weekday: 'long', month: 'numeric', day: 'numeric', omitCommas: true } // 周视图显示完整日期\n          },\n          timeGridDay: {\n            dayHeaderFormat: { weekday: 'long', month: 'numeric', day: 'numeric', omitCommas: true } // 日视图显示完整日期\n          }\n        },\n        locales: {\n          'zh-cn': {\n            week: {\n              dow: 1, // 周一作为一周的第一天\n              doy: 4  // 一年中第一周必须包含1月4日\n            },\n            buttonText: {\n              today: '今天',\n              month: '月',\n              week: '周',\n              day: '日'\n            },\n            weekText: '周',\n            allDayText: '全天',\n            moreLinkText: '更多',\n            noEventsText: '没有事件'\n          },\n          'en': {\n            week: {\n              dow: 1, // 周一作为一周的第一天\n              doy: 4  // 一年中第一周必须包含1月4日\n            },\n            buttonText: {\n              today: 'Today',\n              month: 'Month',\n              week: 'Week',\n              day: 'Day'\n            },\n            weekText: 'W',\n            allDayText: 'All day',\n            moreLinkText: 'more',\n            noEventsText: 'No events'\n          }\n        }\n      },\n      detailVisible: false,\n      selectedEvent: null,\n      loading: false,\n      currentViewTitle: ''\n    };\n  },\n  mounted() {\n    this.loadEvents();\n  },\n  watch: {\n    // 监听语言变化\n    '$i18n.locale': {\n      handler(newLocale) {\n        if (this.$refs.fullCalendar) {\n          const calendarApi = this.$refs.fullCalendar.getApi();\n          calendarApi.setOption('locale', newLocale === 'zh-CN' ? 'zh-cn' : 'en');\n          this.currentViewTitle = calendarApi.view.title;\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    // 加载预约数据\n    async loadEvents() {\n      this.loading = true;\n      try {\n        const calendarApi = this.$refs.fullCalendar.getApi();\n        const start = this.formatDate(calendarApi.view.activeStart);\n        const end = this.formatDate(calendarApi.view.activeEnd);\n\n        // 尝试从API获取数据\n        try {\n          const response = await this.$http.get('/api/reservations/calendar', {\n            params: {\n              start_date: start,\n              end_date: end\n            }\n          });\n\n          if (response.data.success) {\n            calendarApi.removeAllEvents();\n            calendarApi.addEventSource(response.data.events);\n            this.loading = false;\n            return; // 如果API成功返回数据，就不使用模拟数据\n          }\n        } catch (error) {\n          console.log('API请求失败，使用模拟数据');\n        }\n\n        // 如果API请求失败，使用模拟数据\n        calendarApi.removeAllEvents();\n\n        // 生成模拟数据\n        const mockEvents = this.generateMockEvents();\n        calendarApi.addEventSource(mockEvents);\n\n      } catch (error) {\n        console.error('Failed to load calendar events:', error);\n        this.$message.error(this.$t('calendar.loadFailed'));\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // 生成模拟预约数据\n    generateMockEvents() {\n      const now = new Date();\n      const currentYear = now.getFullYear();\n      const currentMonth = now.getMonth();\n\n      // 设备列表\n      const devices = [\n        { id: 1, name: 'SpeakerA', category: '音响设备' },\n        { id: 2, name: 'Microscope B', category: '显微镜' },\n        { id: 3, name: 'Projector C', category: '投影仪' },\n        { id: 4, name: 'Computer D', category: '计算机' },\n        { id: 5, name: 'Camera E', category: '摄影器材' }\n      ];\n\n      // 用户列表\n      const users = [\n        { id: 1, name: '张三', department: '研发部', email: 'zhangsan@example.com' },\n        { id: 2, name: '李四', department: '市场部', email: 'lisi@example.com' },\n        { id: 3, name: '王五', department: '行政部', email: 'wangwu@example.com' },\n        { id: 4, name: '赵六', department: '财务部', email: 'zhaoliu@example.com' },\n        { id: 5, name: '陈传超', department: '技术部', email: 'chenchuanchao@example.com' }\n      ];\n\n      // 预约状态\n      const statuses = ['confirmed', 'in_use', 'expired', 'cancelled'];\n\n      const events = [];\n\n      // 生成单次预约\n      for (let i = 0; i < 15; i++) {\n        const deviceIndex = Math.floor(Math.random() * devices.length);\n        const userIndex = Math.floor(Math.random() * users.length);\n        const statusIndex = Math.floor(Math.random() * (statuses.length - 1)); // 减少取消状态的概率\n\n        // 随机日期，在当前月份的前后15天内\n        const day = Math.floor(Math.random() * 30) - 15;\n        const startDate = new Date(currentYear, currentMonth, now.getDate() + day);\n\n        // 随机时间，8:00 - 18:00\n        startDate.setHours(8 + Math.floor(Math.random() * 10));\n        startDate.setMinutes(Math.random() > 0.5 ? 0 : 30);\n\n        // 持续时间，1-4小时\n        const duration = 1 + Math.floor(Math.random() * 4);\n        const endDate = new Date(startDate);\n        endDate.setHours(startDate.getHours() + duration);\n\n        // 确定状态\n        let status = statuses[statusIndex];\n        if (startDate < now && endDate > now) {\n          status = 'in_use'; // 如果当前时间在预约时间范围内，则状态为\"使用中\"\n        } else if (endDate < now) {\n          status = 'expired'; // 如果结束时间已过，则状态为\"已过期\"\n        }\n\n        // 生成预约序号\n        const reservationNumber = `RN-${startDate.getFullYear()}${String(startDate.getMonth() + 1).padStart(2, '0')}${String(startDate.getDate()).padStart(2, '0')}-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`;\n\n        events.push({\n          id: i + 1,\n          title: devices[deviceIndex].name,\n          start: startDate,\n          end: endDate,\n          extendedProps: {\n            deviceId: devices[deviceIndex].id,\n            deviceCategory: devices[deviceIndex].category,\n            userId: users[userIndex].id,\n            userName: users[userIndex].name,\n            userDepartment: users[userIndex].department,\n            userEmail: users[userIndex].email,\n            status: status,\n            reservationNumber: reservationNumber,\n            isRecurring: false\n          }\n        });\n      }\n\n      // 生成循环预约（每周重复的预约）\n      for (let i = 0; i < 3; i++) {\n        const deviceIndex = Math.floor(Math.random() * devices.length);\n        const userIndex = Math.floor(Math.random() * users.length);\n\n        // 循环预约的起始日期，在当前月份内\n        const startDay = Math.floor(Math.random() * 15);\n        const recurringStartDate = new Date(currentYear, currentMonth, now.getDate() - 15 + startDay);\n\n        // 随机时间，8:00 - 18:00\n        recurringStartDate.setHours(8 + Math.floor(Math.random() * 10));\n        recurringStartDate.setMinutes(Math.random() > 0.5 ? 0 : 30);\n\n        // 持续时间，1-2小时\n        const duration = 1 + Math.floor(Math.random() * 2);\n\n        // 生成循环预约码\n        const recurringCode = this.generateRandomCode(8);\n        const recurringId = 1000 + i;\n\n        // 生成6个子预约（每周重复）\n        for (let j = 0; j < 6; j++) {\n          const startDate = new Date(recurringStartDate);\n          startDate.setDate(startDate.getDate() + j * 7); // 每周重复\n\n          const endDate = new Date(startDate);\n          endDate.setHours(startDate.getHours() + duration);\n\n          // 确定状态\n          let status = 'confirmed';\n          if (startDate < now && endDate > now) {\n            status = 'in_use'; // 如果当前时间在预约时间范围内，则状态为\"使用中\"\n          } else if (endDate < now) {\n            status = 'expired'; // 如果结束时间已过，则状态为\"已过期\"\n          }\n\n          // 生成预约序号\n          const reservationNumber = `RN-${startDate.getFullYear()}${String(startDate.getMonth() + 1).padStart(2, '0')}${String(startDate.getDate()).padStart(2, '0')}-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`;\n\n          events.push({\n            id: 100 + i * 10 + j,\n            title: devices[deviceIndex].name,\n            start: startDate,\n            end: endDate,\n            extendedProps: {\n              deviceId: devices[deviceIndex].id,\n              deviceCategory: devices[deviceIndex].category,\n              userId: users[userIndex].id,\n              userName: users[userIndex].name,\n              userDepartment: users[userIndex].department,\n              userEmail: users[userIndex].email,\n              status: status,\n              reservationNumber: reservationNumber,\n              isRecurring: true,\n              recurringReservationId: recurringId,\n              recurringCode: recurringCode\n            }\n          });\n        }\n      }\n\n      return events;\n    },\n\n    // 生成随机预约码\n    generateRandomCode(length) {\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      let result = '';\n      for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n      }\n      return result;\n    },\n\n    // 处理日期范围变化\n    handleDatesSet() {\n      // 更新当前视图标题\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      this.currentViewTitle = calendarApi.view.title;\n\n      // 加载事件数据\n      this.loadEvents();\n    },\n\n    // 处理事件点击\n    handleEventClick(info) {\n      this.selectedEvent = info.event;\n      this.detailVisible = true;\n    },\n\n    // 处理事件渲染\n    handleEventDidMount(info) {\n      // 为循环预约添加标记\n      if (info.event.extendedProps.isRecurring) {\n        const recurringIcon = document.createElement('span');\n        recurringIcon.className = 'recurring-icon';\n        recurringIcon.innerHTML = '<i class=\"el-icon-refresh-right\"></i>';\n        const titleEl = info.el.querySelector('.fc-event-title');\n        if (titleEl) {\n          titleEl.appendChild(recurringIcon);\n        }\n      }\n\n      // 在周视图和日视图中自定义事件内容\n      if (info.view.type === 'timeGridWeek' || info.view.type === 'timeGridDay') {\n        // 清除默认内容\n        const eventContent = info.el.querySelector('.fc-event-main');\n        if (eventContent) {\n          // 创建自定义内容\n          const customContent = document.createElement('div');\n          customContent.className = 'custom-event-content';\n\n          // 设备名称\n          const title = document.createElement('div');\n          title.className = 'event-title';\n          title.textContent = info.event.title;\n          customContent.appendChild(title);\n\n          // 使用人\n          const user = document.createElement('div');\n          user.className = 'event-user';\n          user.textContent = info.event.extendedProps.userName || '';\n          customContent.appendChild(user);\n\n          // 时间\n          const time = document.createElement('div');\n          time.className = 'event-time';\n          const startTime = info.event.start ? info.event.start.toLocaleTimeString('zh-CN', {hour: '2-digit', minute:'2-digit'}) : '';\n          const endTime = info.event.end ? info.event.end.toLocaleTimeString('zh-CN', {hour: '2-digit', minute:'2-digit'}) : '';\n          time.textContent = `${startTime}-${endTime}`;\n          customContent.appendChild(time);\n\n          // 替换内容\n          eventContent.innerHTML = '';\n          eventContent.appendChild(customContent);\n        }\n\n        // 根据状态设置事件颜色\n        const status = info.event.extendedProps.status;\n        if (status) {\n          if (status === 'confirmed') {\n            info.el.style.backgroundColor = '#67c23a'; // 已确认 - 绿色\n            info.el.style.borderColor = '#67c23a';\n          } else if (status === 'in_use') {\n            info.el.style.backgroundColor = '#409eff'; // 使用中 - 蓝色\n            info.el.style.borderColor = '#409eff';\n          }\n        }\n      }\n    },\n\n    // 切换视图\n    changeView(viewName) {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.changeView(viewName);\n    },\n\n    // 跳转到今天\n    today() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.today();\n    },\n\n    // 上一个时间段\n    prev() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.prev();\n    },\n\n    // 下一个时间段\n    next() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.next();\n    },\n\n    // 获取状态标签类型\n    getStatusTagType(status) {\n      const statusMap = {\n        'confirmed': 'success',\n        'in_use': 'primary',\n        'cancelled': 'info',\n        'expired': 'danger'\n      };\n      return statusMap[status] || 'info';\n    },\n\n    // 格式化日期\n    formatDate(date) {\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    },\n\n    // 格式化日期时间\n    formatDateTime(date) {\n      return formatDate(date, 'YYYY-MM-DD HH:mm');\n    },\n\n    // 获取状态文本\n    getStatusText(status) {\n      const statusMap = {\n        'confirmed': this.$t('reservation.confirmed'),\n        'in_use': this.$t('reservation.inUse'),\n        'cancelled': this.$t('reservation.cancelled'),\n        'expired': this.$t('reservation.expired')\n      };\n      return statusMap[status] || status;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.calendar-view {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.calendar-header {\n  margin-bottom: 20px;\n}\n\n.calendar-current-date {\n  font-size: 1.2rem;\n  color: #606266;\n  margin-top: 5px;\n  font-weight: normal;\n}\n\n.calendar-controls {\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n}\n\n.recurring-notice {\n  margin: 15px 0;\n}\n\n.recurring-icon {\n  margin-left: 5px;\n  color: #ff9800;\n}\n\n/* 自定义事件样式 */\n:deep(.fc-event) {\n  cursor: pointer;\n}\n\n:deep(.fc-event-title) {\n  font-weight: bold;\n}\n\n/* 日期头部样式 */\n:deep(.fc-col-header-cell) {\n  background-color: #f5f7fa;\n  padding: 8px 0;\n}\n\n:deep(.fc-col-header-cell-cushion) {\n  font-weight: bold;\n  color: #303133;\n  text-decoration: none;\n  padding: 4px;\n}\n\n/* 时间格子样式 */\n:deep(.fc-timegrid-slot) {\n  height: 40px;\n}\n\n/* 今天高亮 */\n:deep(.fc-day-today) {\n  background-color: rgba(250, 219, 95, 0.2) !important; /* 淡黄色高亮 */\n  border: 1px dashed #f0c330 !important; /* 虚线边框 */\n}\n\n/* 周末颜色 */\n:deep(.fc-day-sat), :deep(.fc-day-sun) {\n  background-color: #f0f5ff;\n}\n\n/* 工作日颜色 */\n:deep(.fc-day-mon), :deep(.fc-day-tue), :deep(.fc-day-wed), :deep(.fc-day-thu), :deep(.fc-day-fri) {\n  background-color: #ffffff;\n}\n\n/* 预约详情弹窗样式 */\n.event-detail-card {\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.event-header {\n  padding: 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.event-header h3 {\n  margin: 0;\n  font-size: 18px;\n}\n\n.status-confirmed {\n  background-color: #f0f9eb;\n  border-left: 4px solid #67c23a;\n}\n\n.status-in_use {\n  background-color: #ecf5ff;\n  border-left: 4px solid #409eff;\n}\n\n.status-cancelled {\n  background-color: #f4f4f5;\n  border-left: 4px solid #909399;\n}\n\n.status-expired {\n  background-color: #fef0f0;\n  border-left: 4px solid #f56c6c;\n}\n\n.event-info {\n  padding: 0 15px 15px;\n}\n\n.info-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.info-item i {\n  margin-right: 10px;\n  color: #909399;\n}\n\n.time-info {\n  margin-bottom: 15px;\n}\n\n.time-display {\n  font-size: 16px;\n  font-weight: bold;\n  color: #303133;\n}\n\n/* 周视图和日视图中的事件内容样式 */\n:deep(.custom-event-content) {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  padding: 8px;\n  text-align: center;\n}\n\n/* 日视图中的事件内容样式 - 更大内边距 */\n:deep(.fc-timeGridDay-view .custom-event-content) {\n  padding: 12px;\n}\n\n/* 修复日视图和周视图中事件宽度问题 */\n:deep(.fc-timegrid-event-harness) {\n  width: 100% !important;\n  max-width: 100% !important;\n  right: 0 !important;\n  left: 0 !important;\n}\n\n:deep(.fc-timegrid-event) {\n  width: 100% !important;\n  max-width: 100% !important;\n  right: 0 !important;\n  left: 0 !important;\n  margin-right: 0 !important;\n  margin-left: 0 !important;\n  border-radius: 0 !important;\n}\n\n/* 特别针对日视图的修复 */\n:deep(.fc-timeGridDay-view .fc-timegrid-event-harness) {\n  width: calc(100% + 15px) !important; /* 增加15px来填充右侧间距 */\n  max-width: calc(100% + 15px) !important;\n  right: -15px !important;\n  left: 0 !important;\n  margin-right: 0 !important;\n  position: absolute !important;\n}\n\n:deep(.fc-timeGridDay-view .fc-timegrid-event) {\n  width: 100% !important;\n  max-width: none !important;\n  right: 0 !important;\n  left: 0 !important;\n  margin-right: 0 !important;\n  margin-left: 0 !important;\n  border-radius: 0 !important;\n  box-sizing: border-box !important;\n}\n\n/* 修复日视图中的列宽度 */\n:deep(.fc-timeGridDay-view .fc-timegrid-col) {\n  width: 100% !important;\n  max-width: 100% !important;\n}\n\n:deep(.fc-timeGridDay-view .fc-timegrid-col-frame) {\n  width: 100% !important;\n  max-width: 100% !important;\n}\n\n/* 强制覆盖内联样式 */\n:deep(.fc-timeGridDay-view .fc-timegrid-event-harness[style]) {\n  width: calc(100% + 15px) !important; /* 增加10px来填充右侧间距 */\n  max-width: calc(100% + 15px) !important;\n  right: 0 !important;\n  left: 0 !important;\n  margin-right: -10px !important; /* 负边距来扩展到右侧 */\n}\n\n:deep(.fc-timeGridDay-view .fc-timegrid-event[style]) {\n  width: calc(100% + 10px) !important; /* 增加10px来填充右侧间距 */\n  max-width: calc(100% + 10px) !important;\n  right: 0 !important;\n  left: 0 !important;\n  margin-right: -10px !important; /* 负边距来扩展到右侧 */\n}\n\n:deep(.event-title) {\n  font-weight: bold;\n  margin-bottom: 6px;\n  font-size: 16px;\n  line-height: 1.2;\n}\n\n:deep(.event-user) {\n  font-size: 15px;\n  color: rgba(255, 255, 255, 0.95);\n  margin-bottom: 6px;\n}\n\n:deep(.event-time) {\n  font-size: 15px;\n  font-weight: bold;\n  color: rgba(255, 255, 255, 0.95);\n}\n\n/* 日视图中的事件内容样式 - 更大字体 */\n:deep(.fc-timeGridDay-view .event-title) {\n  font-size: 18px;\n  margin-bottom: 8px;\n}\n\n:deep(.fc-timeGridDay-view .event-user) {\n  font-size: 16px;\n  margin-bottom: 8px;\n}\n\n:deep(.fc-timeGridDay-view .event-time) {\n  font-size: 16px;\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}