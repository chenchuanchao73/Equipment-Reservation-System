{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'AdminSettings',\n  data() {\n    return {\n      activeTab: 'base',\n      emailSettings: {\n        smtp_server: '',\n        smtp_port: 587,\n        sender_email: '',\n        sender_name: '',\n        smtp_username: '',\n        smtp_password: '',\n        use_ssl: true,\n        enabled: false\n      },\n      templateList: [],\n      templateDialogVisible: false,\n      templateDialogTitle: '新增模板',\n      templateForm: {\n        id: null,\n        name: '',\n        template_key: '',\n        subject: '',\n        content_html: '',\n        language: 'zh_CN'\n      },\n      templateRules: {\n        name: [{\n          required: true,\n          message: '请输入模板名称',\n          trigger: 'blur'\n        }],\n        template_key: [{\n          required: true,\n          message: '请输入模板键名',\n          trigger: 'blur'\n        }],\n        subject: [{\n          required: true,\n          message: '请输入主题',\n          trigger: 'blur'\n        }],\n        content_html: [{\n          required: true,\n          message: '请输入HTML内容',\n          trigger: 'blur'\n        }],\n        language: [{\n          required: true,\n          message: '请选择语言',\n          trigger: 'change'\n        }]\n      },\n      logList: [],\n      logTotal: 0,\n      logPage: 1,\n      logPageSize: 10,\n      logFilter: {\n        status: '',\n        event_type: ''\n      }\n    };\n  },\n  created() {\n    this.fetchEmailSettings();\n    this.fetchTemplates();\n    this.fetchLogs();\n  },\n  methods: {\n    async fetchEmailSettings() {\n      try {\n        const res = await axios.get('/api/admin/email/settings');\n        this.emailSettings = res.data;\n      } catch (e) {\n        this.$message.error('获取邮件设置失败');\n      }\n    },\n    async saveEmailSettings() {\n      try {\n        await axios.post('/api/admin/email/settings', this.emailSettings);\n        this.$message.success('保存成功');\n      } catch (e) {\n        this.$message.error('保存失败');\n      }\n    },\n    async fetchTemplates() {\n      try {\n        const res = await axios.get('/api/admin/email/templates');\n        this.templateList = res.data;\n      } catch (e) {\n        this.$message.error('获取模板失败');\n      }\n    },\n    openTemplateDialog(row) {\n      if (row) {\n        this.templateDialogTitle = '编辑模板';\n        this.templateForm = {\n          ...row\n        };\n      } else {\n        this.templateDialogTitle = '新增模板';\n        this.templateForm = {\n          id: null,\n          name: '',\n          template_key: '',\n          subject: '',\n          content_html: '',\n          language: 'zh_CN'\n        };\n      }\n      this.templateDialogVisible = true;\n    },\n    async saveTemplate() {\n      this.$refs.templateFormRef.validate(async valid => {\n        if (!valid) return;\n        try {\n          if (this.templateForm.id) {\n            await axios.put(`/api/admin/email/templates/${this.templateForm.id}`, this.templateForm);\n            this.$message.success('更新成功');\n          } else {\n            await axios.post('/api/admin/email/templates', this.templateForm);\n            this.$message.success('新增成功');\n          }\n          this.templateDialogVisible = false;\n          this.fetchTemplates();\n        } catch (e) {\n          this.$message.error(e.response?.data?.detail || '保存失败');\n        }\n      });\n    },\n    async deleteTemplate(row) {\n      this.$confirm('确定要删除该模板吗？', '提示', {\n        type: 'warning'\n      }).then(async () => {\n        await axios.delete(`/api/admin/email/templates/${row.id}`);\n        this.$message.success('删除成功');\n        this.fetchTemplates();\n      }).catch(() => {});\n    },\n    async fetchLogs() {\n      try {\n        const params = {\n          skip: (this.logPage - 1) * this.logPageSize,\n          limit: this.logPageSize,\n          status: this.logFilter.status,\n          event_type: this.logFilter.event_type\n        };\n        const res = await axios.get('/api/admin/email/logs', {\n          params\n        });\n        this.logList = res.data.items;\n        this.logTotal = res.data.total;\n      } catch (e) {\n        this.$message.error('获取日志失败');\n      }\n    },\n    clearLogFilter() {\n      this.logFilter = {\n        status: '',\n        event_type: ''\n      };\n      this.logPage = 1;\n      this.fetchLogs();\n    },\n    async deleteLog(row) {\n      this.$confirm('确定要删除该日志吗？', '提示', {\n        type: 'warning'\n      }).then(async () => {\n        await axios.delete(`/api/admin/email/logs/${row.id}`);\n        this.$message.success('删除成功');\n        this.fetchLogs();\n      }).catch(() => {});\n    },\n    formatDate(val) {\n      if (!val) return '';\n      const d = new Date(val);\n      return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')} ${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","activeTab","emailSettings","smtp_server","smtp_port","sender_email","sender_name","smtp_username","smtp_password","use_ssl","enabled","templateList","templateDialogVisible","templateDialogTitle","templateForm","id","template_key","subject","content_html","language","templateRules","required","message","trigger","logList","logTotal","logPage","logPageSize","logFilter","status","event_type","created","fetchEmailSettings","fetchTemplates","fetchLogs","methods","res","get","e","$message","error","saveEmailSettings","post","success","openTemplateDialog","row","saveTemplate","$refs","templateFormRef","validate","valid","put","response","detail","deleteTemplate","$confirm","type","then","delete","catch","params","skip","limit","items","total","clearLogFilter","deleteLog","formatDate","val","d","Date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes"],"sources":["src/views/admin/AdminSettings.vue"],"sourcesContent":["<template>\n  <div class=\"admin-settings\">\n    <el-tabs v-model=\"activeTab\">\n      <el-tab-pane label=\"基础设置\" name=\"base\">\n        <p>（这里是原有系统设置内容）</p>\n      </el-tab-pane>\n      <el-tab-pane label=\"邮件设置\" name=\"email\">\n        <el-form :model=\"emailSettings\" label-width=\"120px\" @submit.native.prevent=\"saveEmailSettings\">\n          <el-form-item label=\"SMTP服务器\">\n            <el-input v-model=\"emailSettings.smtp_server\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"端口\">\n            <el-input v-model=\"emailSettings.smtp_port\" type=\"number\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"发件人邮箱\">\n            <el-input v-model=\"emailSettings.sender_email\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"发件人名称\">\n            <el-input v-model=\"emailSettings.sender_name\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"SMTP用户名\">\n            <el-input v-model=\"emailSettings.smtp_username\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"SMTP密码\">\n            <el-input v-model=\"emailSettings.smtp_password\" show-password></el-input>\n          </el-form-item>\n          <el-form-item label=\"使用SSL\">\n            <el-switch v-model=\"emailSettings.use_ssl\"></el-switch>\n          </el-form-item>\n          <el-form-item label=\"启用邮件功能\">\n            <el-switch v-model=\"emailSettings.enabled\"></el-switch>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"saveEmailSettings\">保存</el-button>\n          </el-form-item>\n        </el-form>\n      </el-tab-pane>\n      <el-tab-pane label=\"邮件模板\" name=\"template\">\n        <div style=\"margin-bottom: 10px;\">\n          <el-button type=\"primary\" @click=\"openTemplateDialog()\">新增模板</el-button>\n        </div>\n        <el-table :data=\"templateList\" border style=\"width: 100%\">\n          <el-table-column prop=\"name\" label=\"模板名称\" min-width=\"120\"/>\n          <el-table-column prop=\"template_key\" label=\"模板键名\" min-width=\"120\"/>\n          <el-table-column prop=\"subject\" label=\"主题\" min-width=\"150\"/>\n          <el-table-column prop=\"language\" label=\"语言\" min-width=\"80\"/>\n          <el-table-column label=\"操作\" min-width=\"150\">\n            <template slot-scope=\"scope\">\n              <el-button type=\"text\" @click=\"openTemplateDialog(scope.row)\">编辑</el-button>\n              <el-button type=\"text\" style=\"color:red\" @click=\"deleteTemplate(scope.row)\">删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        <el-dialog :title=\"templateDialogTitle\" :visible.sync=\"templateDialogVisible\" width=\"600px\">\n          <el-form :model=\"templateForm\" label-width=\"100px\" :rules=\"templateRules\" ref=\"templateFormRef\">\n            <el-form-item label=\"模板名称\" prop=\"name\">\n              <el-input v-model=\"templateForm.name\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"模板键名\" prop=\"template_key\">\n              <el-input v-model=\"templateForm.template_key\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"主题\" prop=\"subject\">\n              <el-input v-model=\"templateForm.subject\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"语言\" prop=\"language\">\n              <el-select v-model=\"templateForm.language\" placeholder=\"请选择\">\n                <el-option label=\"中文\" value=\"zh_CN\"/>\n                <el-option label=\"English\" value=\"en\"/>\n              </el-select>\n            </el-form-item>\n            <el-form-item label=\"HTML内容\" prop=\"content_html\">\n              <el-input type=\"textarea\" v-model=\"templateForm.content_html\" :rows=\"8\" placeholder=\"支持Jinja2变量，如 {{ reservation.user_name }}\"></el-input>\n            </el-form-item>\n          </el-form>\n          <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"templateDialogVisible = false\">取消</el-button>\n            <el-button type=\"primary\" @click=\"saveTemplate\">保存</el-button>\n          </div>\n        </el-dialog>\n      </el-tab-pane>\n      <el-tab-pane label=\"邮件日志\" name=\"log\">\n        <el-form :inline=\"true\" size=\"small\" style=\"margin-bottom:10px;\">\n          <el-form-item label=\"状态\">\n            <el-select v-model=\"logFilter.status\" clearable placeholder=\"全部\">\n              <el-option label=\"成功\" value=\"success\"/>\n              <el-option label=\"失败\" value=\"failed\"/>\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"事件类型\">\n            <el-input v-model=\"logFilter.event_type\" placeholder=\"如 reservation_created\" clearable></el-input>\n          </el-form-item>\n          <el-form-item>\n            <el-button @click=\"fetchLogs\" type=\"primary\">查询</el-button>\n            <el-button @click=\"clearLogFilter\">重置</el-button>\n          </el-form-item>\n        </el-form>\n        <el-table :data=\"logList\" border style=\"width: 100%\">\n          <el-table-column prop=\"recipient\" label=\"收件人\" min-width=\"120\"/>\n          <el-table-column prop=\"subject\" label=\"主题\" min-width=\"150\"/>\n          <el-table-column prop=\"event_type\" label=\"事件类型\" min-width=\"120\"/>\n          <el-table-column prop=\"status\" label=\"状态\" min-width=\"80\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"scope.row.status === 'success' ? 'success' : 'danger'\">\n                {{ scope.row.status === 'success' ? '成功' : '失败' }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"created_at\" label=\"时间\" min-width=\"160\">\n            <template slot-scope=\"scope\">\n              {{ formatDate(scope.row.created_at) }}\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" min-width=\"80\">\n            <template slot-scope=\"scope\">\n              <el-button type=\"text\" style=\"color:red\" @click=\"deleteLog(scope.row)\">删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        <el-pagination\n          style=\"margin-top:10px;text-align:right\"\n          background\n          layout=\"prev, pager, next, jumper\"\n          :total=\"logTotal\"\n          :page-size=\"logPageSize\"\n          :current-page.sync=\"logPage\"\n          @current-change=\"fetchLogs\"\n        />\n      </el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nexport default {\n  name: 'AdminSettings',\n  data() {\n    return {\n      activeTab: 'base',\n      emailSettings: {\n        smtp_server: '',\n        smtp_port: 587,\n        sender_email: '',\n        sender_name: '',\n        smtp_username: '',\n        smtp_password: '',\n        use_ssl: true,\n        enabled: false\n      },\n      templateList: [],\n      templateDialogVisible: false,\n      templateDialogTitle: '新增模板',\n      templateForm: {\n        id: null,\n        name: '',\n        template_key: '',\n        subject: '',\n        content_html: '',\n        language: 'zh_CN'\n      },\n      templateRules: {\n        name: [{ required: true, message: '请输入模板名称', trigger: 'blur' }],\n        template_key: [{ required: true, message: '请输入模板键名', trigger: 'blur' }],\n        subject: [{ required: true, message: '请输入主题', trigger: 'blur' }],\n        content_html: [{ required: true, message: '请输入HTML内容', trigger: 'blur' }],\n        language: [{ required: true, message: '请选择语言', trigger: 'change' }]\n      },\n      logList: [],\n      logTotal: 0,\n      logPage: 1,\n      logPageSize: 10,\n      logFilter: {\n        status: '',\n        event_type: ''\n      }\n    }\n  },\n  created() {\n    this.fetchEmailSettings()\n    this.fetchTemplates()\n    this.fetchLogs()\n  },\n  methods: {\n    async fetchEmailSettings() {\n      try {\n        const res = await axios.get('/api/admin/email/settings')\n        this.emailSettings = res.data\n      } catch (e) {\n        this.$message.error('获取邮件设置失败')\n      }\n    },\n    async saveEmailSettings() {\n      try {\n        await axios.post('/api/admin/email/settings', this.emailSettings)\n        this.$message.success('保存成功')\n      } catch (e) {\n        this.$message.error('保存失败')\n      }\n    },\n    async fetchTemplates() {\n      try {\n        const res = await axios.get('/api/admin/email/templates')\n        this.templateList = res.data\n      } catch (e) {\n        this.$message.error('获取模板失败')\n      }\n    },\n    openTemplateDialog(row) {\n      if (row) {\n        this.templateDialogTitle = '编辑模板'\n        this.templateForm = { ...row }\n      } else {\n        this.templateDialogTitle = '新增模板'\n        this.templateForm = {\n          id: null,\n          name: '',\n          template_key: '',\n          subject: '',\n          content_html: '',\n          language: 'zh_CN'\n        }\n      }\n      this.templateDialogVisible = true\n    },\n    async saveTemplate() {\n      this.$refs.templateFormRef.validate(async valid => {\n        if (!valid) return\n        try {\n          if (this.templateForm.id) {\n            await axios.put(`/api/admin/email/templates/${this.templateForm.id}`, this.templateForm)\n            this.$message.success('更新成功')\n          } else {\n            await axios.post('/api/admin/email/templates', this.templateForm)\n            this.$message.success('新增成功')\n          }\n          this.templateDialogVisible = false\n          this.fetchTemplates()\n        } catch (e) {\n          this.$message.error(e.response?.data?.detail || '保存失败')\n        }\n      })\n    },\n    async deleteTemplate(row) {\n      this.$confirm('确定要删除该模板吗？', '提示', { type: 'warning' })\n        .then(async () => {\n          await axios.delete(`/api/admin/email/templates/${row.id}`)\n          this.$message.success('删除成功')\n          this.fetchTemplates()\n        })\n        .catch(() => {})\n    },\n    async fetchLogs() {\n      try {\n        const params = {\n          skip: (this.logPage - 1) * this.logPageSize,\n          limit: this.logPageSize,\n          status: this.logFilter.status,\n          event_type: this.logFilter.event_type\n        }\n        const res = await axios.get('/api/admin/email/logs', { params })\n        this.logList = res.data.items\n        this.logTotal = res.data.total\n      } catch (e) {\n        this.$message.error('获取日志失败')\n      }\n    },\n    clearLogFilter() {\n      this.logFilter = { status: '', event_type: '' }\n      this.logPage = 1\n      this.fetchLogs()\n    },\n    async deleteLog(row) {\n      this.$confirm('确定要删除该日志吗？', '提示', { type: 'warning' })\n        .then(async () => {\n          await axios.delete(`/api/admin/email/logs/${row.id}`)\n          this.$message.success('删除成功')\n          this.fetchLogs()\n        })\n        .catch(() => {})\n    },\n    formatDate(val) {\n      if (!val) return ''\n      const d = new Date(val)\n      return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')} ${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`\n    }\n  }\n}\n</script>\n\n<style scoped>\n.admin-settings {\n  padding: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}