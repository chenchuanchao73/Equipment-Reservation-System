{"ast":null,"code":"/**\n * 日期处理工具函数\n */\n\n/**\n * 将UTC时间转换为北京时间（UTC+8）\n * @param {Date|string|number} date - UTC日期对象、日期字符串或时间戳\n * @returns {Date} - 北京时间日期对象\n */\nexport function convertToBeijingTime(date) {\n  if (!date) return null;\n\n  // 创建日期对象\n  const utcDate = new Date(date);\n  if (isNaN(utcDate.getTime())) return null;\n\n  // 获取UTC时间的时间戳\n  const utcTimestamp = utcDate.getTime();\n\n  // 添加8小时的毫秒数 (8 * 60 * 60 * 1000 = 28800000)\n  const beijingTimestamp = utcTimestamp + 28800000;\n\n  // 创建北京时间的日期对象\n  return new Date(beijingTimestamp);\n}\n\n/**\n * 格式化日期\n * @param {Date|string|number} date - 日期对象、日期字符串或时间戳\n * @param {string} format - 格式化模板，例如：'YYYY-MM-DD HH:mm:ss'\n * @param {boolean} toBeijingTime - 是否转换为北京时间\n * @returns {string} - 格式化后的日期字符串\n */\nexport function formatDate(date, format = 'YYYY-MM-DD HH:mm:ss', toBeijingTime = true) {\n  if (!date) return '';\n\n  // 创建日期对象\n  let d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n\n  // 转换为北京时间\n  if (toBeijingTime) {\n    d = convertToBeijingTime(d);\n  }\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  const hours = String(d.getHours()).padStart(2, '0');\n  const minutes = String(d.getMinutes()).padStart(2, '0');\n  const seconds = String(d.getSeconds()).padStart(2, '0');\n  return format.replace('YYYY', year).replace('MM', month).replace('DD', day).replace('HH', hours).replace('mm', minutes).replace('ss', seconds);\n}\n\n/**\n * 获取日期范围\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {Array} - 日期范围数组\n */\nexport function getDateRange(startDate, endDate) {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const range = [];\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return range;\n  }\n  const current = new Date(start);\n  while (current <= end) {\n    range.push(new Date(current));\n    current.setDate(current.getDate() + 1);\n  }\n  return range;\n}\n\n/**\n * 检查日期是否在范围内\n * @param {Date|string|number} date - 要检查的日期\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {boolean} - 是否在范围内\n */\nexport function isDateInRange(date, startDate, endDate) {\n  const d = new Date(date);\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  if (isNaN(d.getTime()) || isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return false;\n  }\n  return d >= start && d <= end;\n}\n\n/**\n * 获取两个日期之间的天数\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {number} - 天数\n */\nexport function getDaysBetween(startDate, endDate) {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return 0;\n  }\n\n  // 将日期设置为当天的0点，以便计算准确的天数\n  start.setHours(0, 0, 0, 0);\n  end.setHours(0, 0, 0, 0);\n  const diffTime = Math.abs(end - start);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays;\n}\n\n/**\n * 获取当前日期的开始时间（0点0分0秒）\n * @param {Date|string|number} date - 日期\n * @returns {Date} - 日期的开始时间\n */\nexport function getStartOfDay(date) {\n  const d = new Date(date);\n  d.setHours(0, 0, 0, 0);\n  return d;\n}\n\n/**\n * 获取当前日期的结束时间（23点59分59秒）\n * @param {Date|string|number} date - 日期\n * @returns {Date} - 日期的结束时间\n */\nexport function getEndOfDay(date) {\n  const d = new Date(date);\n  d.setHours(23, 59, 59, 999);\n  return d;\n}\n\n/**\n * 检查两个时间段是否重叠\n * @param {Date|string|number} start1 - 第一个时间段的开始时间\n * @param {Date|string|number} end1 - 第一个时间段的结束时间\n * @param {Date|string|number} start2 - 第二个时间段的开始时间\n * @param {Date|string|number} end2 - 第二个时间段的结束时间\n * @returns {boolean} - 是否重叠\n */\nexport function isTimeOverlap(start1, end1, start2, end2) {\n  const s1 = new Date(start1).getTime();\n  const e1 = new Date(end1).getTime();\n  const s2 = new Date(start2).getTime();\n  const e2 = new Date(end2).getTime();\n  return Math.max(s1, s2) < Math.min(e1, e2);\n}\n\n/**\n * 检查预约是否已过期\n * @param {Date|string|number} endDateTime - 预约结束时间\n * @returns {boolean} - 是否已过期\n */\nexport function isReservationExpired(endDateTime) {\n  // 使用当前日期检查是否过期\n  const now = new Date();\n  const end = new Date(endDateTime);\n  if (isNaN(end.getTime())) {\n    return false;\n  }\n\n  // 检查是否过期\n  const isExpired = now > end;\n  return isExpired;\n}\nexport default {\n  formatDate,\n  convertToBeijingTime,\n  getDateRange,\n  isDateInRange,\n  getDaysBetween,\n  getStartOfDay,\n  getEndOfDay,\n  isTimeOverlap,\n  isReservationExpired\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}