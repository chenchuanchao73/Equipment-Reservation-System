{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    // 用户状态\n    token: localStorage.getItem('token') || '',\n    user: JSON.parse(localStorage.getItem('user') || '{}'),\n    // 设备数据\n    equipments: [],\n    equipmentTotal: 0,\n    equipmentCategories: [],\n    // 预定数据\n    reservations: [],\n    reservationTotal: 0,\n    // 系统设置\n    settings: {},\n    // 加载状态\n    loading: false,\n    // 语言设置\n    language: localStorage.getItem('language') || 'zh-CN'\n  },\n  getters: {\n    // 用户状态\n    isLoggedIn: state => !!state.token,\n    currentUser: state => state.user,\n    isAdmin: state => state.user && state.user.role === 'admin',\n    isSuperAdmin: state => state.user && state.user.role === 'superadmin',\n    // 设备数据\n    getEquipments: state => state.equipments,\n    getEquipmentTotal: state => state.equipmentTotal,\n    getEquipmentCategories: state => state.equipmentCategories,\n    // 预定数据\n    getReservations: state => state.reservations,\n    getReservationTotal: state => state.reservationTotal,\n    // 系统设置\n    getSettings: state => state.settings,\n    // 加载状态\n    isLoading: state => state.loading,\n    // 语言设置\n    getLanguage: state => state.language\n  },\n  mutations: {\n    // 用户状态\n    SET_TOKEN(state, token) {\n      state.token = token;\n    },\n    SET_USER(state, user) {\n      state.user = user;\n    },\n    CLEAR_AUTH(state) {\n      state.token = '';\n      state.user = {};\n    },\n    // 设备数据\n    SET_EQUIPMENTS(state, {\n      items,\n      total\n    }) {\n      state.equipments = items;\n      state.equipmentTotal = total;\n    },\n    SET_EQUIPMENT_CATEGORIES(state, categories) {\n      state.equipmentCategories = categories;\n    },\n    // 预定数据\n    SET_RESERVATIONS(state, {\n      items,\n      total\n    }) {\n      state.reservations = items;\n      state.reservationTotal = total;\n    },\n    // 系统设置\n    SET_SETTINGS(state, settings) {\n      state.settings = settings;\n    },\n    // 加载状态\n    SET_LOADING(state, isLoading) {\n      state.loading = isLoading;\n    },\n    // 语言设置\n    SET_LANGUAGE(state, language) {\n      state.language = language;\n      localStorage.setItem('language', language);\n    }\n  },\n  actions: {\n    // 用户登录\n    async login({\n      commit\n    }, credentials) {\n      try {\n        commit('SET_LOADING', true);\n\n        // 创建表单数据 - 使用URLSearchParams格式，这是OAuth2PasswordRequestForm所需的格式\n        const formData = new URLSearchParams();\n        formData.append('username', credentials.username);\n        formData.append('password', credentials.password);\n\n        // 添加调试日志\n        console.log('Sending login request to:', axios.defaults.baseURL + '/api/admin/login');\n        console.log('Login credentials:', {\n          username: credentials.username,\n          password: '******'\n        });\n\n        // 发送登录请求，并指定更长的超时时间\n        const response = await axios.post('/api/admin/login', formData, {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          timeout: 30000 // 30秒超时\n        });\n\n        // 保存令牌和用户信息\n        const token = response.data.access_token;\n        const user = {\n          id: response.data.admin_id,\n          username: response.data.username,\n          name: response.data.name,\n          role: response.data.role\n        };\n\n        // 更新状态\n        commit('SET_TOKEN', token);\n        commit('SET_USER', user);\n\n        // 保存到本地存储\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        return true;\n      } catch (error) {\n        console.error('Login error:', error);\n\n        // 详细的错误日志\n        if (error.response) {\n          // 服务器响应了，但状态码表示错误\n          console.error('Error response:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        } else if (error.request) {\n          // 请求已发送，但没有收到响应\n          console.error('No response received:', error.request);\n          console.log('Is backend server running at', axios.defaults.baseURL, '?');\n        } else {\n          // 设置请求时发生错误\n          console.error('Request error:', error.message);\n        }\n        return false;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 用户登出\n    logout({\n      commit\n    }) {\n      // 清除状态\n      commit('CLEAR_AUTH');\n\n      // 清除本地存储\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    },\n    // 获取设备列表\n    async fetchEquipments({\n      commit\n    }, {\n      page = 1,\n      limit = 10,\n      category = null,\n      status = null,\n      search = null\n    }) {\n      try {\n        commit('SET_LOADING', true);\n\n        // 构建查询参数\n        const params = {\n          skip: (page - 1) * limit,\n          limit,\n          category,\n          status,\n          search\n        };\n\n        // 发送请求\n        const response = await axios.get('/api/equipment', {\n          params\n        });\n\n        // 更新状态\n        commit('SET_EQUIPMENTS', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Fetch equipments error:', error);\n        return {\n          items: [],\n          total: 0\n        };\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 获取设备类别\n    async fetchEquipmentCategories({\n      commit\n    }) {\n      try {\n        commit('SET_LOADING', true);\n\n        // 发送请求\n        const response = await axios.get('/api/equipment/categories');\n\n        // 更新状态\n        commit('SET_EQUIPMENT_CATEGORIES', response.data.categories);\n        return response.data.categories;\n      } catch (error) {\n        console.error('Fetch equipment categories error:', error);\n        return [];\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 获取预定列表\n    async fetchReservations({\n      commit\n    }, {\n      page = 1,\n      limit = 10,\n      equipmentId = null,\n      userName = null,\n      status = null,\n      fromDate = null,\n      toDate = null\n    }) {\n      try {\n        commit('SET_LOADING', true);\n\n        // 构建查询参数\n        const params = {\n          skip: (page - 1) * limit,\n          limit,\n          equipment_id: equipmentId,\n          user_name: userName,\n          status,\n          from_date: fromDate,\n          to_date: toDate\n        };\n\n        // 发送请求\n        const response = await axios.get('/api/reservation', {\n          params\n        });\n\n        // 更新状态\n        commit('SET_RESERVATIONS', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Fetch reservations error:', error);\n        return {\n          items: [],\n          total: 0\n        };\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 获取系统设置\n    async fetchSettings({\n      commit\n    }) {\n      try {\n        commit('SET_LOADING', true);\n\n        // 发送请求\n        const response = await axios.get('/api/admin/settings');\n\n        // 更新状态\n        commit('SET_SETTINGS', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Fetch settings error:', error);\n        return {};\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 设置语言\n    setLanguage({\n      commit\n    }, language) {\n      commit('SET_LANGUAGE', language);\n    }\n  },\n  modules: {\n    // 可以在这里添加模块\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}