{"ast":null,"code":"import { equipmentApi, reservationApi } from '@/api';\nimport axios from 'axios';\nexport default {\n  name: 'ReservationForm',\n  computed: {\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n  data() {\n    // 表单验证规则\n    const validateTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(this.$t('reservation.requiredField')));\n      } else if (this.form.startDateTime && this.form.endDateTime) {\n        if (this.form.startDateTime >= this.form.endDateTime) {\n          callback(new Error(this.$t('reservation.invalidTime')));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback();\n      } else {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(value)) {\n          callback(new Error(this.$t('reservation.emailFormat')));\n        } else {\n          callback();\n        }\n      }\n    };\n    return {\n      loading: false,\n      submitting: false,\n      equipment: null,\n      timeConflict: false,\n      successDialogVisible: false,\n      reservationCode: '',\n      qrcodeUrl: '',\n      form: {\n        startDateTime: '',\n        endDateTime: '',\n        userName: '',\n        userDepartment: '',\n        userContact: '',\n        userEmail: '',\n        purpose: ''\n      },\n      rules: {\n        startDateTime: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }, {\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        endDateTime: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }, {\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        userName: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 2,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userDepartment: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 2,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userContact: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 5,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userEmail: [{\n          validator: validateEmail,\n          trigger: 'blur'\n        }],\n        purpose: [{\n          max: 500,\n          message: this.$t('common.lengthLimit', {\n            max: 500\n          }),\n          trigger: 'blur'\n        }]\n      },\n      startPickerOptions: {\n        disabledDate(time) {\n          return time.getTime() < Date.now() - 8.64e7; // 不能选择过去的日期\n        }\n      },\n      endPickerOptions: {\n        disabledDate(time) {\n          return time.getTime() < Date.now() - 8.64e7; // 不能选择过去的日期\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchEquipment();\n  },\n  methods: {\n    async fetchEquipment() {\n      this.loading = true;\n      try {\n        const equipmentId = this.$route.params.id;\n        const response = await equipmentApi.getEquipment(equipmentId);\n        this.equipment = response.data;\n        if (this.equipment.status !== 'available') {\n          this.$message.warning(this.$t('equipment.notAvailable'));\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment:', error);\n        this.$message.error(this.$t('common.error'));\n        this.equipment = null;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async checkTimeAvailability() {\n      if (!this.form.startDateTime || !this.form.endDateTime) {\n        this.timeConflict = false;\n        return;\n      }\n      if (this.form.startDateTime >= this.form.endDateTime) {\n        this.timeConflict = true;\n        return;\n      }\n      try {\n        const equipmentId = this.equipment.id;\n        const startDate = this.formatDateTime(this.form.startDateTime);\n        const endDate = this.formatDateTime(this.form.endDateTime);\n        const response = await equipmentApi.getAvailability(equipmentId, startDate, endDate);\n\n        // 检查是否有冲突\n        this.timeConflict = response.data.available.includes(false);\n      } catch (error) {\n        console.error('Failed to check availability:', error);\n        this.$message.error(this.$t('common.error'));\n        this.timeConflict = true;\n      }\n    },\n    submitForm() {\n      this.$refs.reservationForm.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        if (this.timeConflict) {\n          this.$message.error(this.$t('reservation.timeConflict'));\n          return false;\n        }\n        this.submitting = true;\n        try {\n          const reservationData = {\n            equipment_id: this.equipment.id,\n            user_name: this.form.userName,\n            user_department: this.form.userDepartment,\n            user_contact: this.form.userContact,\n            user_email: this.form.userEmail || undefined,\n            start_datetime: this.formatDateTime(this.form.startDateTime),\n            end_datetime: this.formatDateTime(this.form.endDateTime),\n            purpose: this.form.purpose || undefined,\n            lang: this.$i18n.locale\n          };\n          const response = await reservationApi.createReservation(reservationData);\n          if (response.data.success) {\n            // 获取预定码和二维码\n            this.reservationCode = response.data.data.reservation_code;\n            try {\n              const qrcodeResponse = await reservationApi.getReservationQrcode(this.reservationCode);\n              this.qrcodeUrl = qrcodeResponse.data.qrcode_url;\n            } catch (error) {\n              console.error('Failed to get QR code:', error);\n              this.qrcodeUrl = '';\n            }\n\n            // 显示成功对话框\n            this.successDialogVisible = true;\n          } else {\n            this.$message.error(response.data.message || this.$t('common.error'));\n          }\n        } catch (error) {\n          console.error('Failed to create reservation:', error);\n          this.$message.error(this.$t('common.error'));\n        } finally {\n          this.submitting = false;\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.reservationForm.resetFields();\n      this.timeConflict = false;\n    },\n    viewReservation() {\n      this.$router.push(`/reservation/${this.reservationCode}`);\n    },\n    closeSuccessDialog() {\n      this.successDialogVisible = false;\n      this.resetForm();\n      this.$router.push('/equipment');\n    },\n    formatDateTime(dateTime) {\n      if (!dateTime) return '';\n      const date = new Date(dateTime);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}T${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    }\n  }\n};","map":{"version":3,"names":["equipmentApi","reservationApi","axios","name","computed","baseUrl","defaults","baseURL","data","validateTime","rule","value","callback","Error","$t","form","startDateTime","endDateTime","validateEmail","emailRegex","test","loading","submitting","equipment","timeConflict","successDialogVisible","reservationCode","qrcodeUrl","userName","userDepartment","userContact","userEmail","purpose","rules","required","message","trigger","validator","min","max","startPickerOptions","disabledDate","time","getTime","Date","now","endPickerOptions","created","fetchEquipment","methods","equipmentId","$route","params","id","response","getEquipment","status","$message","warning","error","console","checkTimeAvailability","startDate","formatDateTime","endDate","getAvailability","available","includes","submitForm","$refs","reservationForm","validate","valid","reservationData","equipment_id","user_name","user_department","user_contact","user_email","undefined","start_datetime","end_datetime","lang","$i18n","locale","createReservation","success","reservation_code","qrcodeResponse","getReservationQrcode","qrcode_url","resetForm","resetFields","viewReservation","$router","push","closeSuccessDialog","dateTime","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes"],"sources":["src/views/reservation/ReservationForm.vue"],"sourcesContent":["<template>\n  <div class=\"reservation-form\">\n    <div v-if=\"loading\" class=\"loading-container\">\n      <el-skeleton :rows=\"10\" animated />\n    </div>\n\n    <div v-else-if=\"!equipment\" class=\"error-container\">\n      <el-result\n        icon=\"error\"\n        :title=\"$t('error.errorMessage')\"\n        :sub-title=\"$t('equipment.notFound')\"\n      >\n        <template #extra>\n          <el-button type=\"primary\" @click=\"$router.push('/equipment')\">\n            {{ $t('equipment.list') }}\n          </el-button>\n        </template>\n      </el-result>\n    </div>\n\n    <div v-else>\n      <!-- 返回按钮 -->\n      <div class=\"back-link\">\n        <el-button icon=\"el-icon-arrow-left\" @click=\"$router.push(`/equipment/${equipment.id}`)\">\n          {{ $t('common.back') }}\n        </el-button>\n      </div>\n\n      <h1 class=\"page-title\">{{ $t('reservation.form') }}</h1>\n\n      <!-- 设备信息 -->\n      <el-card shadow=\"never\" class=\"equipment-card\">\n        <div class=\"equipment-info\">\n          <div class=\"equipment-image-container\">\n            <img\n              :src=\"equipment.image_path ? getFullImageUrl(equipment.image_path) : require('@/assets/upload.png')\"\n              :alt=\"equipment.name\"\n              class=\"equipment-image\"\n            />\n          </div>\n\n          <div class=\"equipment-details\">\n            <h2 class=\"equipment-name\">{{ equipment.name }}</h2>\n            <p class=\"equipment-category\">{{ equipment.category }}</p>\n\n            <div v-if=\"equipment.location\" class=\"equipment-location\">\n              <i class=\"el-icon-location\"></i> {{ equipment.location }}\n            </div>\n\n            <el-tag\n              :type=\"equipment.status === 'available' ? 'success' : 'warning'\"\n              size=\"medium\"\n            >\n              {{ equipment.status === 'available' ? $t('equipment.available') : $t('equipment.maintenance') }}\n            </el-tag>\n          </div>\n        </div>\n      </el-card>\n\n      <!-- 预定表单 -->\n      <el-card shadow=\"never\" class=\"form-card\">\n        <el-form\n          ref=\"reservationForm\"\n          :model=\"form\"\n          :rules=\"rules\"\n          label-position=\"top\"\n          size=\"medium\"\n        >\n          <!-- 时间选择 -->\n          <el-divider>{{ $t('reservation.selectTime') }}</el-divider>\n\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.startTime')\" prop=\"startDateTime\">\n                <el-date-picker\n                  v-model=\"form.startDateTime\"\n                  type=\"datetime\"\n                  :placeholder=\"$t('reservation.startTime')\"\n                  style=\"width: 100%\"\n                  :picker-options=\"startPickerOptions\"\n                  @change=\"checkTimeAvailability\"\n                ></el-date-picker>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.endTime')\" prop=\"endDateTime\">\n                <el-date-picker\n                  v-model=\"form.endDateTime\"\n                  type=\"datetime\"\n                  :placeholder=\"$t('reservation.endTime')\"\n                  style=\"width: 100%\"\n                  :picker-options=\"endPickerOptions\"\n                  @change=\"checkTimeAvailability\"\n                ></el-date-picker>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <div v-if=\"timeConflict\" class=\"time-conflict-warning\">\n            <el-alert\n              :title=\"$t('reservation.timeConflict')\"\n              type=\"error\"\n              :closable=\"false\"\n              show-icon\n            ></el-alert>\n          </div>\n\n          <!-- 用户信息 -->\n          <el-divider>{{ $t('common.userInfo') }}</el-divider>\n\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userName')\" prop=\"userName\">\n                <el-input v-model=\"form.userName\"></el-input>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userDepartment')\" prop=\"userDepartment\">\n                <el-input v-model=\"form.userDepartment\"></el-input>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userContact')\" prop=\"userContact\">\n                <el-input v-model=\"form.userContact\"></el-input>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userEmail')\" prop=\"userEmail\">\n                <el-input v-model=\"form.userEmail\" type=\"email\"></el-input>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <el-form-item :label=\"$t('reservation.purpose')\" prop=\"purpose\">\n            <el-input\n              v-model=\"form.purpose\"\n              type=\"textarea\"\n              :rows=\"3\"\n            ></el-input>\n          </el-form-item>\n\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              :loading=\"submitting\"\n              @click=\"submitForm\"\n              :disabled=\"timeConflict\"\n            >\n              {{ $t('reservation.createReservation') }}\n            </el-button>\n            <el-button @click=\"resetForm\">{{ $t('common.reset') }}</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n\n      <!-- 预定成功对话框 -->\n      <el-dialog\n        :title=\"$t('reservation.createSuccess')\"\n        :visible.sync=\"successDialogVisible\"\n        width=\"500px\"\n        :close-on-click-modal=\"false\"\n        :close-on-press-escape=\"false\"\n        :show-close=\"false\"\n      >\n        <div class=\"success-content\">\n          <i class=\"el-icon-success success-icon\"></i>\n\n          <p class=\"success-message\">{{ $t('reservation.saveReservationCode') }}</p>\n\n          <div class=\"reservation-code\">\n            {{ reservationCode }}\n          </div>\n\n          <div v-if=\"qrcodeUrl\" class=\"qrcode-container\">\n            <img :src=\"qrcodeUrl\" alt=\"QR Code\" class=\"qrcode-image\" />\n          </div>\n\n          <p class=\"reservation-tip\">{{ $t('reservation.reservationCodeTip') }}</p>\n\n          <div class=\"dialog-footer\">\n            <el-button @click=\"viewReservation\">{{ $t('reservation.viewDetail') }}</el-button>\n            <el-button type=\"primary\" @click=\"closeSuccessDialog\">{{ $t('common.confirm') }}</el-button>\n          </div>\n        </div>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { equipmentApi, reservationApi } from '@/api'\nimport axios from 'axios'\n\nexport default {\n  name: 'ReservationForm',\n\n  computed: {\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n\n  data() {\n    // 表单验证规则\n    const validateTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(this.$t('reservation.requiredField')))\n      } else if (this.form.startDateTime && this.form.endDateTime) {\n        if (this.form.startDateTime >= this.form.endDateTime) {\n          callback(new Error(this.$t('reservation.invalidTime')))\n        } else {\n          callback()\n        }\n      } else {\n        callback()\n      }\n    }\n\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback()\n      } else {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        if (!emailRegex.test(value)) {\n          callback(new Error(this.$t('reservation.emailFormat')))\n        } else {\n          callback()\n        }\n      }\n    }\n\n    return {\n      loading: false,\n      submitting: false,\n      equipment: null,\n      timeConflict: false,\n      successDialogVisible: false,\n      reservationCode: '',\n      qrcodeUrl: '',\n\n      form: {\n        startDateTime: '',\n        endDateTime: '',\n        userName: '',\n        userDepartment: '',\n        userContact: '',\n        userEmail: '',\n        purpose: ''\n      },\n\n      rules: {\n        startDateTime: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'change' },\n          { validator: validateTime, trigger: 'change' }\n        ],\n        endDateTime: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'change' },\n          { validator: validateTime, trigger: 'change' }\n        ],\n        userName: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { min: 2, max: 50, message: this.$t('common.lengthLimit', { min: 2, max: 50 }), trigger: 'blur' }\n        ],\n        userDepartment: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { min: 2, max: 50, message: this.$t('common.lengthLimit', { min: 2, max: 50 }), trigger: 'blur' }\n        ],\n        userContact: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { min: 5, max: 50, message: this.$t('common.lengthLimit', { min: 5, max: 50 }), trigger: 'blur' }\n        ],\n        userEmail: [\n          { validator: validateEmail, trigger: 'blur' }\n        ],\n        purpose: [\n          { max: 500, message: this.$t('common.lengthLimit', { max: 500 }), trigger: 'blur' }\n        ]\n      },\n\n      startPickerOptions: {\n        disabledDate(time) {\n          return time.getTime() < Date.now() - 8.64e7 // 不能选择过去的日期\n        }\n      },\n\n      endPickerOptions: {\n        disabledDate(time) {\n          return time.getTime() < Date.now() - 8.64e7 // 不能选择过去的日期\n        }\n      }\n    }\n  },\n\n  created() {\n    this.fetchEquipment()\n  },\n\n  methods: {\n    async fetchEquipment() {\n      this.loading = true\n      try {\n        const equipmentId = this.$route.params.id\n        const response = await equipmentApi.getEquipment(equipmentId)\n        this.equipment = response.data\n\n        if (this.equipment.status !== 'available') {\n          this.$message.warning(this.$t('equipment.notAvailable'))\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment:', error)\n        this.$message.error(this.$t('common.error'))\n        this.equipment = null\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async checkTimeAvailability() {\n      if (!this.form.startDateTime || !this.form.endDateTime) {\n        this.timeConflict = false\n        return\n      }\n\n      if (this.form.startDateTime >= this.form.endDateTime) {\n        this.timeConflict = true\n        return\n      }\n\n      try {\n        const equipmentId = this.equipment.id\n        const startDate = this.formatDateTime(this.form.startDateTime)\n        const endDate = this.formatDateTime(this.form.endDateTime)\n\n        const response = await equipmentApi.getAvailability(equipmentId, startDate, endDate)\n\n        // 检查是否有冲突\n        this.timeConflict = response.data.available.includes(false)\n      } catch (error) {\n        console.error('Failed to check availability:', error)\n        this.$message.error(this.$t('common.error'))\n        this.timeConflict = true\n      }\n    },\n\n    submitForm() {\n      this.$refs.reservationForm.validate(async (valid) => {\n        if (!valid) {\n          return false\n        }\n\n        if (this.timeConflict) {\n          this.$message.error(this.$t('reservation.timeConflict'))\n          return false\n        }\n\n        this.submitting = true\n\n        try {\n          const reservationData = {\n            equipment_id: this.equipment.id,\n            user_name: this.form.userName,\n            user_department: this.form.userDepartment,\n            user_contact: this.form.userContact,\n            user_email: this.form.userEmail || undefined,\n            start_datetime: this.formatDateTime(this.form.startDateTime),\n            end_datetime: this.formatDateTime(this.form.endDateTime),\n            purpose: this.form.purpose || undefined,\n            lang: this.$i18n.locale\n          }\n\n          const response = await reservationApi.createReservation(reservationData)\n\n          if (response.data.success) {\n            // 获取预定码和二维码\n            this.reservationCode = response.data.data.reservation_code\n\n            try {\n              const qrcodeResponse = await reservationApi.getReservationQrcode(this.reservationCode)\n              this.qrcodeUrl = qrcodeResponse.data.qrcode_url\n            } catch (error) {\n              console.error('Failed to get QR code:', error)\n              this.qrcodeUrl = ''\n            }\n\n            // 显示成功对话框\n            this.successDialogVisible = true\n          } else {\n            this.$message.error(response.data.message || this.$t('common.error'))\n          }\n        } catch (error) {\n          console.error('Failed to create reservation:', error)\n          this.$message.error(this.$t('common.error'))\n        } finally {\n          this.submitting = false\n        }\n      })\n    },\n\n    resetForm() {\n      this.$refs.reservationForm.resetFields()\n      this.timeConflict = false\n    },\n\n    viewReservation() {\n      this.$router.push(`/reservation/${this.reservationCode}`)\n    },\n\n    closeSuccessDialog() {\n      this.successDialogVisible = false\n      this.resetForm()\n      this.$router.push('/equipment')\n    },\n\n    formatDateTime(dateTime) {\n      if (!dateTime) return ''\n\n      const date = new Date(dateTime)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}T${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    }\n  }\n}\n</script>\n\n<style scoped>\n.reservation-form {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.back-link {\n  margin-bottom: 20px;\n}\n\n.page-title {\n  margin-bottom: 20px;\n  font-size: 24px;\n  color: #303133;\n}\n\n.equipment-card {\n  margin-bottom: 20px;\n}\n\n.equipment-info {\n  display: flex;\n  align-items: center;\n}\n\n.equipment-image-container {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  background-color: #f5f7fa;\n  border-radius: 4px;\n  margin-right: 20px;\n}\n\n.equipment-image {\n  max-height: 100%;\n  max-width: 100%;\n  object-fit: contain;\n}\n\n.equipment-details {\n  flex: 1;\n}\n\n.equipment-name {\n  margin: 0 0 5px;\n  font-size: 18px;\n  color: #303133;\n}\n\n.equipment-category {\n  margin: 0 0 10px;\n  font-size: 14px;\n  color: #909399;\n}\n\n.equipment-location {\n  margin-bottom: 10px;\n  font-size: 14px;\n  color: #606266;\n}\n\n.form-card {\n  margin-bottom: 20px;\n}\n\n.time-conflict-warning {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 40px 0;\n}\n\n.error-container {\n  padding: 40px 0;\n  text-align: center;\n}\n\n.success-content {\n  text-align: center;\n}\n\n.success-icon {\n  font-size: 72px;\n  color: #67C23A;\n  margin-bottom: 20px;\n}\n\n.success-message {\n  font-size: 18px;\n  color: #303133;\n  margin-bottom: 20px;\n}\n\n.reservation-code {\n  font-size: 24px;\n  font-weight: bold;\n  color: #409EFF;\n  background-color: #ecf5ff;\n  padding: 15px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n  letter-spacing: 2px;\n}\n\n.qrcode-container {\n  margin-bottom: 20px;\n}\n\n.qrcode-image {\n  max-width: 200px;\n  border: 1px solid #EBEEF5;\n  padding: 10px;\n  background-color: white;\n}\n\n.reservation-tip {\n  color: #909399;\n  margin-bottom: 20px;\n}\n\n.dialog-footer {\n  margin-top: 20px;\n}\n\n@media (max-width: 768px) {\n  .equipment-info {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .equipment-image-container {\n    margin-right: 0;\n    margin-bottom: 20px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}