{"ast":null,"code":"/**\n * 日期处理工具函数\n */\n\n/**\n * 格式化日期\n * @param {Date|string|number} date - 日期对象、日期字符串或时间戳\n * @param {string} format - 格式化模板，例如：'YYYY-MM-DD HH:mm:ss'\n * @returns {string} - 格式化后的日期字符串\n */\nexport function formatDate(date, format = 'YYYY-MM-DD HH:mm:ss') {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  const hours = String(d.getHours()).padStart(2, '0');\n  const minutes = String(d.getMinutes()).padStart(2, '0');\n  const seconds = String(d.getSeconds()).padStart(2, '0');\n  return format.replace('YYYY', year).replace('MM', month).replace('DD', day).replace('HH', hours).replace('mm', minutes).replace('ss', seconds);\n}\n\n/**\n * 获取日期范围\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {Array} - 日期范围数组\n */\nexport function getDateRange(startDate, endDate) {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const range = [];\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return range;\n  }\n  const current = new Date(start);\n  while (current <= end) {\n    range.push(new Date(current));\n    current.setDate(current.getDate() + 1);\n  }\n  return range;\n}\n\n/**\n * 检查日期是否在范围内\n * @param {Date|string|number} date - 要检查的日期\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {boolean} - 是否在范围内\n */\nexport function isDateInRange(date, startDate, endDate) {\n  const d = new Date(date);\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  if (isNaN(d.getTime()) || isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return false;\n  }\n  return d >= start && d <= end;\n}\n\n/**\n * 获取两个日期之间的天数\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {number} - 天数\n */\nexport function getDaysBetween(startDate, endDate) {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return 0;\n  }\n\n  // 将日期设置为当天的0点，以便计算准确的天数\n  start.setHours(0, 0, 0, 0);\n  end.setHours(0, 0, 0, 0);\n  const diffTime = Math.abs(end - start);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays;\n}\n\n/**\n * 获取当前日期的开始时间（0点0分0秒）\n * @param {Date|string|number} date - 日期\n * @returns {Date} - 日期的开始时间\n */\nexport function getStartOfDay(date) {\n  const d = new Date(date);\n  d.setHours(0, 0, 0, 0);\n  return d;\n}\n\n/**\n * 获取当前日期的结束时间（23点59分59秒）\n * @param {Date|string|number} date - 日期\n * @returns {Date} - 日期的结束时间\n */\nexport function getEndOfDay(date) {\n  const d = new Date(date);\n  d.setHours(23, 59, 59, 999);\n  return d;\n}\n\n/**\n * 检查两个时间段是否重叠\n * @param {Date|string|number} start1 - 第一个时间段的开始时间\n * @param {Date|string|number} end1 - 第一个时间段的结束时间\n * @param {Date|string|number} start2 - 第二个时间段的开始时间\n * @param {Date|string|number} end2 - 第二个时间段的结束时间\n * @returns {boolean} - 是否重叠\n */\nexport function isTimeOverlap(start1, end1, start2, end2) {\n  const s1 = new Date(start1).getTime();\n  const e1 = new Date(end1).getTime();\n  const s2 = new Date(start2).getTime();\n  const e2 = new Date(end2).getTime();\n  return Math.max(s1, s2) < Math.min(e1, e2);\n}\n\n/**\n * 检查预约是否已过期\n * @param {Date|string|number} endDateTime - 预约结束时间\n * @returns {boolean} - 是否已过期\n */\nexport function isReservationExpired(endDateTime) {\n  // 使用当前日期检查是否过期\n  const now = new Date();\n  const end = new Date(endDateTime);\n  if (isNaN(end.getTime())) {\n    return false;\n  }\n\n  // 检查是否过期\n  const isExpired = now > end;\n  return isExpired;\n}\nexport default {\n  formatDate,\n  getDateRange,\n  isDateInRange,\n  getDaysBetween,\n  getStartOfDay,\n  getEndOfDay,\n  isTimeOverlap,\n  isReservationExpired\n};","map":{"version":3,"names":["formatDate","date","format","d","Date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","getDateRange","startDate","endDate","start","end","range","current","push","setDate","isDateInRange","getDaysBetween","setHours","diffTime","Math","abs","diffDays","ceil","getStartOfDay","getEndOfDay","isTimeOverlap","start1","end1","start2","end2","s1","e1","s2","e2","max","min","isReservationExpired","endDateTime","now","isExpired"],"sources":["D:/Python Projects/Backups/equipment-reservation-system/frontend/src/utils/date.js"],"sourcesContent":["/**\n * 日期处理工具函数\n */\n\n/**\n * 格式化日期\n * @param {Date|string|number} date - 日期对象、日期字符串或时间戳\n * @param {string} format - 格式化模板，例如：'YYYY-MM-DD HH:mm:ss'\n * @returns {string} - 格式化后的日期字符串\n */\nexport function formatDate(date, format = 'YYYY-MM-DD HH:mm:ss') {\n  if (!date) return ''\n\n  const d = new Date(date)\n  if (isNaN(d.getTime())) return ''\n\n  const year = d.getFullYear()\n  const month = String(d.getMonth() + 1).padStart(2, '0')\n  const day = String(d.getDate()).padStart(2, '0')\n  const hours = String(d.getHours()).padStart(2, '0')\n  const minutes = String(d.getMinutes()).padStart(2, '0')\n  const seconds = String(d.getSeconds()).padStart(2, '0')\n\n  return format\n    .replace('YYYY', year)\n    .replace('MM', month)\n    .replace('DD', day)\n    .replace('HH', hours)\n    .replace('mm', minutes)\n    .replace('ss', seconds)\n}\n\n/**\n * 获取日期范围\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {Array} - 日期范围数组\n */\nexport function getDateRange(startDate, endDate) {\n  const start = new Date(startDate)\n  const end = new Date(endDate)\n  const range = []\n\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return range\n  }\n\n  const current = new Date(start)\n  while (current <= end) {\n    range.push(new Date(current))\n    current.setDate(current.getDate() + 1)\n  }\n\n  return range\n}\n\n/**\n * 检查日期是否在范围内\n * @param {Date|string|number} date - 要检查的日期\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {boolean} - 是否在范围内\n */\nexport function isDateInRange(date, startDate, endDate) {\n  const d = new Date(date)\n  const start = new Date(startDate)\n  const end = new Date(endDate)\n\n  if (isNaN(d.getTime()) || isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return false\n  }\n\n  return d >= start && d <= end\n}\n\n/**\n * 获取两个日期之间的天数\n * @param {Date|string|number} startDate - 开始日期\n * @param {Date|string|number} endDate - 结束日期\n * @returns {number} - 天数\n */\nexport function getDaysBetween(startDate, endDate) {\n  const start = new Date(startDate)\n  const end = new Date(endDate)\n\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    return 0\n  }\n\n  // 将日期设置为当天的0点，以便计算准确的天数\n  start.setHours(0, 0, 0, 0)\n  end.setHours(0, 0, 0, 0)\n\n  const diffTime = Math.abs(end - start)\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n\n  return diffDays\n}\n\n/**\n * 获取当前日期的开始时间（0点0分0秒）\n * @param {Date|string|number} date - 日期\n * @returns {Date} - 日期的开始时间\n */\nexport function getStartOfDay(date) {\n  const d = new Date(date)\n  d.setHours(0, 0, 0, 0)\n  return d\n}\n\n/**\n * 获取当前日期的结束时间（23点59分59秒）\n * @param {Date|string|number} date - 日期\n * @returns {Date} - 日期的结束时间\n */\nexport function getEndOfDay(date) {\n  const d = new Date(date)\n  d.setHours(23, 59, 59, 999)\n  return d\n}\n\n/**\n * 检查两个时间段是否重叠\n * @param {Date|string|number} start1 - 第一个时间段的开始时间\n * @param {Date|string|number} end1 - 第一个时间段的结束时间\n * @param {Date|string|number} start2 - 第二个时间段的开始时间\n * @param {Date|string|number} end2 - 第二个时间段的结束时间\n * @returns {boolean} - 是否重叠\n */\nexport function isTimeOverlap(start1, end1, start2, end2) {\n  const s1 = new Date(start1).getTime()\n  const e1 = new Date(end1).getTime()\n  const s2 = new Date(start2).getTime()\n  const e2 = new Date(end2).getTime()\n\n  return Math.max(s1, s2) < Math.min(e1, e2)\n}\n\n/**\n * 检查预约是否已过期\n * @param {Date|string|number} endDateTime - 预约结束时间\n * @returns {boolean} - 是否已过期\n */\nexport function isReservationExpired(endDateTime) {\n  // 使用当前日期检查是否过期\n  const now = new Date()\n  const end = new Date(endDateTime)\n\n  if (isNaN(end.getTime())) {\n    return false\n  }\n\n  // 检查是否过期\n  const isExpired = now > end\n  return isExpired\n}\n\nexport default {\n  formatDate,\n  getDateRange,\n  isDateInRange,\n  getDaysBetween,\n  getStartOfDay,\n  getEndOfDay,\n  isTimeOverlap,\n  isReservationExpired\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}