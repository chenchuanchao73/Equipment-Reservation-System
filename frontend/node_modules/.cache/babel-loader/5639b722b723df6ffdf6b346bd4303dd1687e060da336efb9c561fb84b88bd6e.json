{"ast":null,"code":"import { mapActions } from 'vuex';\nexport default {\n  name: 'AdminLogin',\n  data() {\n    return {\n      loading: false,\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      loginRules: {\n        username: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 20,\n          message: this.$t('common.lengthLimit', {\n            min: 3,\n            max: 20\n          }),\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 20,\n          message: this.$t('common.lengthLimit', {\n            min: 6,\n            max: 20\n          }),\n          trigger: 'blur'\n        }]\n      },\n      backendStatus: null,\n      // 后端状态\n      checkingBackend: false // 检查后端状态中\n    };\n  },\n  mounted() {\n    // 页面加载时检查后端连接\n    this.checkBackendConnection();\n  },\n  methods: {\n    ...mapActions(['login']),\n    // 检查后端连接状态\n    async checkBackendConnection() {\n      this.checkingBackend = true;\n      this.backendStatus = null;\n      try {\n        // 尝试访问后端健康检查端点\n        const response = await this.$http.get('/api/health', {\n          timeout: 5000\n        });\n        if (response.status === 200) {\n          this.backendStatus = 'online';\n          console.log('Backend is online:', response.data);\n        } else {\n          this.backendStatus = 'error';\n          console.error('Backend health check failed:', response);\n        }\n      } catch (error) {\n        this.backendStatus = 'offline';\n        console.error('Backend connection error:', error);\n\n        // 尝试直接访问后端根路径\n        try {\n          await this.$http.get('/', {\n            timeout: 5000\n          });\n          this.backendStatus = 'partial';\n          console.log('Backend root is accessible but API is not');\n        } catch (e) {\n          console.error('Backend root is also not accessible');\n        }\n      } finally {\n        this.checkingBackend = false;\n      }\n    },\n    handleLogin() {\n      this.$refs.loginForm.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        this.loading = true;\n        try {\n          const success = await this.login({\n            username: this.loginForm.username,\n            password: this.loginForm.password\n          });\n          if (success) {\n            this.$message.success(this.$t('admin.loginSuccess'));\n\n            // 登录成功后的重定向处理\n            const redirectPath = this.$route.query.redirect || '/admin/dashboard';\n            // 直接使用字符串路径，避免复杂的对象参数\n            this.$router.replace(redirectPath);\n          } else {\n            // 显示更详细的错误信息\n            this.$message.error(this.$t('admin.loginFailed') + ' - 请检查后端服务是否正常运行');\n            console.log('登录失败，请检查后端服务是否在 ' + this.$http.defaults.baseURL + ' 运行');\n          }\n        } catch (error) {\n          console.error('Login error:', error);\n          this.$message.error(this.$t('admin.loginFailed'));\n        } finally {\n          this.loading = false;\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}