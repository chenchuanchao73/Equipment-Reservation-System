{"ast":null,"code":"import { reservationApi, recurringReservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'ReservationQuery',\n  data() {\n    return {\n      // 个人预约管理相关\n      personalLoading: false,\n      showInstructions: true,\n      notFound: false,\n      personalQueryForm: {\n        reservationCode: '',\n        userContact: ''\n      },\n      personalQueryResults: [],\n      // 新增：存放多条预约结果\n\n      personalQueryRules: {\n        reservationCode: [{\n          required: false,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 20,\n          message: this.$t('common.lengthLimit', {\n            min: 6,\n            max: 20\n          }),\n          trigger: 'blur'\n        }],\n        userContact: [{\n          required: false,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    // 如果URL中有预定码参数，自动填充\n    const code = this.$route.query.code;\n    const userContact = this.$route.query.userContact;\n    if (code) {\n      this.personalQueryForm.reservationCode = code;\n      // 自动查询\n      this.$nextTick(() => {\n        this.handlePersonalQuery();\n      });\n    } else if (userContact) {\n      this.personalQueryForm.userContact = userContact;\n      // 自动查询\n      this.$nextTick(() => {\n        this.handlePersonalQuery();\n      });\n    }\n  },\n  methods: {\n    // 处理个人预约查询\n    handlePersonalQuery() {\n      // 自定义验证：预定码和联系方式至少填写一项\n      if (!this.personalQueryForm.reservationCode && !this.personalQueryForm.userContact) {\n        this.$message.error(this.$t('reservation.atLeastOneField'));\n        return false;\n      }\n      this.$refs.personalQueryForm.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        this.personalLoading = true;\n        this.showInstructions = false;\n        this.notFound = false;\n        try {\n          // 如果有预定码，优先使用预定码查询\n          if (this.personalQueryForm.reservationCode) {\n            try {\n              // 先查普通预约\n              const response = await reservationApi.getReservationByCode(this.personalQueryForm.reservationCode);\n              if (response.data.success) {\n                // 普通预约，导航到预定详情页\n                console.log('找到普通预约，跳转到预约详情页:', this.personalQueryForm.reservationCode);\n                this.$router.push({\n                  path: `/reservation/${this.personalQueryForm.reservationCode}`,\n                  query: {\n                    code: this.personalQueryForm.reservationCode,\n                    from: 'query'\n                  }\n                });\n                return;\n              } else {\n                // 检查是否是循环预约\n                if (response.data.data && response.data.data.is_recurring === true && response.data.data.recurring_id) {\n                  // 这是一个循环预约，跳转到循环预约详情页\n                  console.log('检测到循环预约标记，跳转到循环预约详情页:', response.data.data.recurring_id);\n                  this.$router.push({\n                    path: `/recurring-reservation/${response.data.data.recurring_id}`,\n                    query: {\n                      code: this.personalQueryForm.reservationCode,\n                      from: 'query'\n                    }\n                  });\n                  return;\n                }\n\n                // 如果普通预约查不到，再查循环预约\n                try {\n                  const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(this.personalQueryForm.reservationCode);\n                  if (recurringResponse.data.success) {\n                    // 导航到循环预约详情页\n                    console.log('找到循环预约，跳转到循环预约详情页:', recurringResponse.data.data.id);\n                    this.$router.push({\n                      path: `/recurring-reservation/${recurringResponse.data.data.id}`,\n                      query: {\n                        code: this.personalQueryForm.reservationCode,\n                        from: 'query'\n                      }\n                    });\n                    return;\n                  }\n                } catch (recurringError) {\n                  console.error('Failed to query by reservation code (recurring):', recurringError);\n                }\n              }\n            } catch (error) {\n              // 检查错误是否包含循环预约信息\n              if (error.response && error.response.data && error.response.data.is_recurring === true && error.response.data.recurring_id) {\n                // 这是一个循环预约，跳转到循环预约详情页\n                console.log('错误响应中检测到循环预约标记，跳转到循环预约详情页:', error.response.data.recurring_id);\n                this.$router.push({\n                  path: `/recurring-reservation/${error.response.data.recurring_id}`,\n                  query: {\n                    code: this.personalQueryForm.reservationCode,\n                    from: 'query'\n                  }\n                });\n                return;\n              }\n\n              // 普通预约接口报错时也查循环预约\n              try {\n                const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(this.personalQueryForm.reservationCode);\n                if (recurringResponse.data.success) {\n                  // 导航到循环预约详情页\n                  console.log('找到循环预约，跳转到循环预约详情页:', recurringResponse.data.data.id);\n                  this.$router.push({\n                    path: `/recurring-reservation/${recurringResponse.data.data.id}`,\n                    query: {\n                      code: this.personalQueryForm.reservationCode,\n                      from: 'query'\n                    }\n                  });\n                  return;\n                }\n              } catch (recurringError) {\n                console.error('Failed to query by reservation code (recurring):', recurringError);\n              }\n            }\n          }\n\n          // 如果没有预定码或预定码查询失败，尝试使用联系方式查询\n          if (this.personalQueryForm.userContact) {\n            try {\n              // 这里需要调用后端接口根据联系方式查询预定\n              const response = await reservationApi.getReservations({\n                user_contact: this.personalQueryForm.userContact,\n                limit: 50 // 查多一点\n              });\n              if (response.data.items && response.data.items.length > 0) {\n                if (response.data.items.length === 1) {\n                  // 只有一条，直接跳转\n                  const firstReservation = response.data.items[0];\n                  this.$router.push({\n                    path: `/reservation/${firstReservation.reservation_code}`,\n                    query: {\n                      userContact: this.personalQueryForm.userContact,\n                      from: 'query'\n                    }\n                  });\n                  return;\n                } else {\n                  // 多条，展示表格\n                  this.personalQueryResults = response.data.items;\n                  return;\n                }\n              }\n            } catch (contactError) {\n              console.error('Failed to query by contact:', contactError);\n            }\n          }\n\n          // 如果两种方式都查询失败，显示未找到\n          this.notFound = true;\n        } catch (error) {\n          console.error('Failed to query personal reservation:', error);\n          this.notFound = true;\n        } finally {\n          this.personalLoading = false;\n        }\n      });\n    },\n    // 格式化日期时间\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return '';\n      return formatDate(cellValue);\n    },\n    // 获取状态类型\n    getStatusType(reservation) {\n      // 统一小写处理，兼容后端大小写不一致\n      const status = (reservation.status || '').toLowerCase();\n      console.log('status for switch:', reservation.status, '->', status);\n      switch (status) {\n        case 'cancelled':\n          return 'danger';\n        // 已取消 - 红色\n        case 'expired':\n          return 'warning';\n        // 已过期 - 橙色\n        case 'in_use':\n          return 'primary';\n        // 使用中 - 蓝色\n        case 'confirmed':\n          return 'success';\n        // 已确认 - 绿色\n        default:\n          return 'info';\n        // 其他状态 - 灰色\n      }\n    },\n    // 获取状态文本\n    getStatusText(reservation) {\n      // 统一小写处理，兼容后端大小写不一致\n      const status = (reservation.status || '').toLowerCase();\n      console.log('status for switch:', reservation.status, '->', status);\n      switch (status) {\n        case 'cancelled':\n          return this.$t('reservation.cancelled');\n        // 已取消\n        case 'expired':\n          return this.$t('reservation.expired');\n        // 已过期\n        case 'in_use':\n          return this.$t('reservation.inUse');\n        // 使用中\n        case 'confirmed':\n          return this.$t('reservation.confirmed');\n        // 已确认\n        default:\n          return reservation.status;\n        // 其他状态直接显示\n      }\n    },\n    // 重置表单\n    resetForm() {\n      this.$refs.personalQueryForm.resetFields();\n      this.notFound = false;\n      this.showInstructions = true;\n      this.personalQueryResults = []; // 重置结果\n    },\n    // 查看预约详情\n    async viewReservationDetail(reservation) {\n      console.log('查看预约详情:', reservation);\n      try {\n        // 检查是否有预约序号，如果有，说明是子预约，直接跳转到子预约详情页面\n        if (reservation.reservation_number) {\n          console.log('检测到预约序号，直接跳转到子预约详情页面:', reservation.reservation_number);\n\n          // 构建查询参数\n          const query = {\n            userContact: this.personalQueryForm.userContact,\n            from: 'query'\n          };\n\n          // 如果有循环预约ID，添加到查询参数中\n          if (reservation.recurring_reservation_id) {\n            query.recurringId = reservation.recurring_reservation_id;\n            query.child = 'true';\n          }\n\n          // 跳转到子预约详情页面\n          this.$router.push({\n            path: `/reservation/number/${reservation.reservation_number}`,\n            query: query\n          });\n          return;\n        }\n\n        // 如果没有预约序号，按原有逻辑处理\n        // 先查询预约详情，检查是否是循环预约\n        const response = await reservationApi.getReservationByCode(reservation.reservation_code);\n        if (response.data.success) {\n          // 普通预约，导航到预定详情页\n          console.log('找到普通预约，跳转到预约详情页:', reservation.reservation_code);\n          this.$router.push({\n            path: `/reservation/${reservation.reservation_code}`,\n            query: {\n              userContact: this.personalQueryForm.userContact,\n              from: 'query'\n            }\n          });\n        } else {\n          // 检查是否是循环预约\n          if (response.data.data && response.data.data.is_recurring === true && response.data.data.recurring_id) {\n            // 这是一个循环预约，跳转到循环预约详情页\n            console.log('检测到循环预约标记，跳转到循环预约详情页:', response.data.data.recurring_id);\n            this.$router.push({\n              path: `/recurring-reservation/${response.data.data.recurring_id}`,\n              query: {\n                userContact: this.personalQueryForm.userContact,\n                from: 'query'\n              }\n            });\n          } else {\n            // 如果普通预约查不到，再查循环预约\n            try {\n              const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(reservation.reservation_code);\n              if (recurringResponse.data.success) {\n                // 导航到循环预约详情页\n                console.log('找到循环预约，跳转到循环预约详情页:', recurringResponse.data.data.id);\n                this.$router.push(`/recurring-reservation/${recurringResponse.data.data.id}`);\n              } else {\n                this.$message.error(this.$t('reservation.notFound'));\n              }\n            } catch (recurringError) {\n              console.error('Failed to query by reservation code (recurring):', recurringError);\n              this.$message.error(this.$t('reservation.notFound'));\n            }\n          }\n        }\n      } catch (error) {\n        // 检查错误是否包含循环预约信息\n        if (error.response && error.response.data && error.response.data.data && error.response.data.data.is_recurring === true && error.response.data.data.recurring_id) {\n          // 这是一个循环预约，跳转到循环预约详情页\n          console.log('错误响应中检测到循环预约标记，跳转到循环预约详情页:', error.response.data.data.recurring_id);\n          this.$router.push(`/recurring-reservation/${error.response.data.data.recurring_id}`);\n        } else {\n          console.error('查看预约详情失败:', error);\n          this.$message.error(this.$t('common.error'));\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["reservationApi","recurringReservationApi","isReservationExpired","name","data","personalLoading","showInstructions","notFound","personalQueryForm","reservationCode","userContact","personalQueryResults","personalQueryRules","required","message","$t","trigger","min","max","created","code","$route","query","$nextTick","handlePersonalQuery","methods","$message","error","$refs","validate","valid","response","getReservationByCode","success","console","log","$router","push","path","from","is_recurring","recurring_id","recurringResponse","getRecurringReservationByCode","id","recurringError","getReservations","user_contact","limit","items","length","firstReservation","reservation_code","contactError","formatDateTime","row","column","cellValue","formatDate","getStatusType","reservation","status","toLowerCase","getStatusText","resetForm","resetFields","viewReservationDetail","reservation_number","recurring_reservation_id","recurringId","child"],"sources":["src/views/reservation/ReservationQuery.vue"],"sourcesContent":["<template>\n  <div class=\"reservation-query\">\n    <h1 class=\"page-title\">{{ $t('reservation.personalManagement') }}</h1>\n\n    <div class=\"query-card\">\n      <el-card shadow=\"never\">\n        <!-- 个人预约管理表单 -->\n        <el-form\n          ref=\"personalQueryForm\"\n          :model=\"personalQueryForm\"\n          :rules=\"personalQueryRules\"\n          label-position=\"top\"\n          @submit.native.prevent=\"handlePersonalQuery\"\n        >\n          <el-form-item :label=\"$t('reservation.code')\" prop=\"reservationCode\">\n            <el-input\n              v-model=\"personalQueryForm.reservationCode\"\n              :placeholder=\"$t('reservation.codeOrContactRequired')\"\n            ></el-input>\n          </el-form-item>\n\n          <el-form-item :label=\"$t('reservation.userContact')\" prop=\"userContact\">\n            <el-input\n              v-model=\"personalQueryForm.userContact\"\n              :placeholder=\"$t('reservation.contactOrCodeRequired')\"\n            ></el-input>\n          </el-form-item>\n\n          <el-form-item>\n            <div class=\"form-tip\">\n              <i class=\"el-icon-info\"></i>\n              <span>{{ $t('reservation.queryTip') }}</span>\n            </div>\n          </el-form-item>\n\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              icon=\"el-icon-search\"\n              @click=\"handlePersonalQuery\"\n              :loading=\"personalLoading\"\n            >\n              {{ $t('reservation.queryButton') }}\n            </el-button>\n            <el-button @click=\"resetForm\" icon=\"el-icon-refresh-left\">{{ $t('common.reset') }}</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n    </div>\n\n    <!-- 个人预约结果表格 -->\n    <div v-if=\"personalQueryResults.length > 1\" class=\"query-results\">\n      <el-card shadow=\"never\">\n        <div slot=\"header\" style=\"font-size: 16px; font-weight: bold;\">\n          <i class=\"el-icon-document\"></i>\n          <span>{{ $t('reservation.queryResults') }}</span>\n        </div>\n        <el-table :data=\"personalQueryResults\" style=\"width: 100%\" border stripe>\n          <el-table-column prop=\"reservation_code\" :label=\"$t('reservation.code')\" min-width=\"120\" />\n          <el-table-column prop=\"equipment_name\" :label=\"$t('reservation.equipmentName')\" min-width=\"120\" />\n          <el-table-column prop=\"start_datetime\" :label=\"$t('reservation.startTime')\" min-width=\"160\" :formatter=\"formatDateTime\" />\n          <el-table-column prop=\"end_datetime\" :label=\"$t('reservation.endTime')\" min-width=\"160\" :formatter=\"formatDateTime\" />\n          <el-table-column prop=\"status\" :label=\"$t('common.status')\" width=\"80\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"getStatusType(scope.row)\">{{ getStatusText(scope.row) }}</el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column :label=\"$t('common.operation')\" width=\"120\">\n            <template slot-scope=\"scope\">\n              <el-button type=\"primary\" size=\"mini\" @click=\"viewReservationDetail(scope.row)\">\n                {{ $t('common.view') }}\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-card>\n    </div>\n\n    <!-- 个人预约管理说明 -->\n    <div v-if=\"showInstructions\" class=\"instructions-card\">\n      <el-card shadow=\"hover\">\n        <div slot=\"header\" style=\"font-size: 16px; font-weight: bold;\">\n          <i class=\"el-icon-info\" style=\"color: #409EFF; margin-right: 5px;\"></i>\n          <span>{{ $t('common.instructions') }}</span>\n        </div>\n\n        <div class=\"instructions-content\">\n          <p>{{ $t('reservation.queryInstructions') }}</p>\n          <ul>\n            <li><i class=\"el-icon-arrow-right\" style=\"color: #409EFF; margin-right: 5px;\"></i>{{ $t('reservation.queryInstruction1') }}</li>\n            <li><i class=\"el-icon-arrow-right\" style=\"color: #409EFF; margin-right: 5px;\"></i>{{ $t('reservation.queryInstruction2') }}</li>\n            <li><i class=\"el-icon-arrow-right\" style=\"color: #409EFF; margin-right: 5px;\"></i>{{ $t('reservation.queryInstruction3') }}</li>\n          </ul>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 个人预约未找到提示 -->\n    <div v-if=\"notFound\" class=\"not-found-card\">\n      <el-card shadow=\"never\">\n        <el-result\n          icon=\"error\"\n          :title=\"$t('reservation.reservationNotFound')\"\n          :sub-title=\"$t('reservation.checkCodeAndContact')\"\n        ></el-result>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { reservationApi, recurringReservationApi } from '@/api'\nimport { isReservationExpired } from '@/utils/date'\n\nexport default {\n  name: 'ReservationQuery',\n\n  data() {\n    return {\n      // 个人预约管理相关\n      personalLoading: false,\n      showInstructions: true,\n      notFound: false,\n      personalQueryForm: {\n        reservationCode: '',\n        userContact: ''\n      },\n      personalQueryResults: [], // 新增：存放多条预约结果\n\n      personalQueryRules: {\n        reservationCode: [\n          { required: false, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { min: 6, max: 20, message: this.$t('common.lengthLimit', { min: 6, max: 20 }), trigger: 'blur' }\n        ],\n        userContact: [\n          { required: false, message: this.$t('reservation.requiredField'), trigger: 'blur' }\n        ]\n      }\n    }\n  },\n\n  created() {\n    // 如果URL中有预定码参数，自动填充\n    const code = this.$route.query.code\n    const userContact = this.$route.query.userContact\n\n    if (code) {\n      this.personalQueryForm.reservationCode = code\n      // 自动查询\n      this.$nextTick(() => {\n        this.handlePersonalQuery()\n      })\n    } else if (userContact) {\n      this.personalQueryForm.userContact = userContact\n      // 自动查询\n      this.$nextTick(() => {\n        this.handlePersonalQuery()\n      })\n    }\n  },\n\n  methods: {\n\n    // 处理个人预约查询\n    handlePersonalQuery() {\n      // 自定义验证：预定码和联系方式至少填写一项\n      if (!this.personalQueryForm.reservationCode && !this.personalQueryForm.userContact) {\n        this.$message.error(this.$t('reservation.atLeastOneField'))\n        return false\n      }\n\n      this.$refs.personalQueryForm.validate(async (valid) => {\n        if (!valid) {\n          return false\n        }\n\n        this.personalLoading = true\n        this.showInstructions = false\n        this.notFound = false\n\n        try {\n          // 如果有预定码，优先使用预定码查询\n          if (this.personalQueryForm.reservationCode) {\n            try {\n              // 先查普通预约\n              const response = await reservationApi.getReservationByCode(this.personalQueryForm.reservationCode)\n              if (response.data.success) {\n                // 普通预约，导航到预定详情页\n                console.log('找到普通预约，跳转到预约详情页:', this.personalQueryForm.reservationCode)\n                this.$router.push({\n                  path: `/reservation/${this.personalQueryForm.reservationCode}`,\n                  query: {\n                    code: this.personalQueryForm.reservationCode,\n                    from: 'query'\n                  }\n                })\n                return\n              } else {\n                // 检查是否是循环预约\n                if (response.data.data && response.data.data.is_recurring === true && response.data.data.recurring_id) {\n                  // 这是一个循环预约，跳转到循环预约详情页\n                  console.log('检测到循环预约标记，跳转到循环预约详情页:', response.data.data.recurring_id)\n                  this.$router.push({\n                    path: `/recurring-reservation/${response.data.data.recurring_id}`,\n                    query: {\n                      code: this.personalQueryForm.reservationCode,\n                      from: 'query'\n                    }\n                  })\n                  return\n                }\n\n                // 如果普通预约查不到，再查循环预约\n                try {\n                  const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(this.personalQueryForm.reservationCode)\n                  if (recurringResponse.data.success) {\n                    // 导航到循环预约详情页\n                    console.log('找到循环预约，跳转到循环预约详情页:', recurringResponse.data.data.id)\n                    this.$router.push({\n                      path: `/recurring-reservation/${recurringResponse.data.data.id}`,\n                      query: {\n                        code: this.personalQueryForm.reservationCode,\n                        from: 'query'\n                      }\n                    })\n                    return\n                  }\n                } catch (recurringError) {\n                  console.error('Failed to query by reservation code (recurring):', recurringError)\n                }\n              }\n            } catch (error) {\n              // 检查错误是否包含循环预约信息\n              if (error.response && error.response.data && error.response.data.is_recurring === true && error.response.data.recurring_id) {\n                // 这是一个循环预约，跳转到循环预约详情页\n                console.log('错误响应中检测到循环预约标记，跳转到循环预约详情页:', error.response.data.recurring_id)\n                this.$router.push({\n                  path: `/recurring-reservation/${error.response.data.recurring_id}`,\n                  query: {\n                    code: this.personalQueryForm.reservationCode,\n                    from: 'query'\n                  }\n                })\n                return\n              }\n\n              // 普通预约接口报错时也查循环预约\n              try {\n                const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(this.personalQueryForm.reservationCode)\n                if (recurringResponse.data.success) {\n                  // 导航到循环预约详情页\n                  console.log('找到循环预约，跳转到循环预约详情页:', recurringResponse.data.data.id)\n                  this.$router.push({\n                    path: `/recurring-reservation/${recurringResponse.data.data.id}`,\n                    query: {\n                      code: this.personalQueryForm.reservationCode,\n                      from: 'query'\n                    }\n                  })\n                  return\n                }\n              } catch (recurringError) {\n                console.error('Failed to query by reservation code (recurring):', recurringError)\n              }\n            }\n          }\n\n          // 如果没有预定码或预定码查询失败，尝试使用联系方式查询\n          if (this.personalQueryForm.userContact) {\n            try {\n              // 这里需要调用后端接口根据联系方式查询预定\n              const response = await reservationApi.getReservations({\n                user_contact: this.personalQueryForm.userContact,\n                limit: 50 // 查多一点\n              })\n\n              if (response.data.items && response.data.items.length > 0) {\n                if (response.data.items.length === 1) {\n                  // 只有一条，直接跳转\n                  const firstReservation = response.data.items[0]\n                  this.$router.push({\n                    path: `/reservation/${firstReservation.reservation_code}`,\n                    query: {\n                      userContact: this.personalQueryForm.userContact,\n                      from: 'query'\n                    }\n                  })\n                  return\n                } else {\n                  // 多条，展示表格\n                  this.personalQueryResults = response.data.items\n                  return\n                }\n              }\n            } catch (contactError) {\n              console.error('Failed to query by contact:', contactError)\n            }\n          }\n\n          // 如果两种方式都查询失败，显示未找到\n          this.notFound = true\n\n        } catch (error) {\n          console.error('Failed to query personal reservation:', error)\n          this.notFound = true\n        } finally {\n          this.personalLoading = false\n        }\n      })\n    },\n\n    // 格式化日期时间\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return ''\n      return formatDate(cellValue)\n    },\n\n    // 获取状态类型\n    getStatusType(reservation) {\n      // 统一小写处理，兼容后端大小写不一致\n      const status = (reservation.status || '').toLowerCase()\n      console.log('status for switch:', reservation.status, '->', status)\n      switch (status) {\n        case 'cancelled':\n          return 'danger';  // 已取消 - 红色\n        case 'expired':\n          return 'warning'; // 已过期 - 橙色\n        case 'in_use':\n          return 'primary'; // 使用中 - 蓝色\n        case 'confirmed':\n          return 'success'; // 已确认 - 绿色\n        default:\n          return 'info';    // 其他状态 - 灰色\n      }\n    },\n\n    // 获取状态文本\n    getStatusText(reservation) {\n      // 统一小写处理，兼容后端大小写不一致\n      const status = (reservation.status || '').toLowerCase()\n      console.log('status for switch:', reservation.status, '->', status)\n      switch (status) {\n        case 'cancelled':\n          return this.$t('reservation.cancelled'); // 已取消\n        case 'expired':\n          return this.$t('reservation.expired');   // 已过期\n        case 'in_use':\n          return this.$t('reservation.inUse');     // 使用中\n        case 'confirmed':\n          return this.$t('reservation.confirmed'); // 已确认\n        default:\n          return reservation.status; // 其他状态直接显示\n      }\n    },\n\n    // 重置表单\n    resetForm() {\n      this.$refs.personalQueryForm.resetFields()\n      this.notFound = false\n      this.showInstructions = true\n      this.personalQueryResults = [] // 重置结果\n    },\n\n    // 查看预约详情\n    async viewReservationDetail(reservation) {\n      console.log('查看预约详情:', reservation);\n\n      try {\n        // 检查是否有预约序号，如果有，说明是子预约，直接跳转到子预约详情页面\n        if (reservation.reservation_number) {\n          console.log('检测到预约序号，直接跳转到子预约详情页面:', reservation.reservation_number);\n\n          // 构建查询参数\n          const query = {\n            userContact: this.personalQueryForm.userContact,\n            from: 'query'\n          };\n\n          // 如果有循环预约ID，添加到查询参数中\n          if (reservation.recurring_reservation_id) {\n            query.recurringId = reservation.recurring_reservation_id;\n            query.child = 'true';\n          }\n\n          // 跳转到子预约详情页面\n          this.$router.push({\n            path: `/reservation/number/${reservation.reservation_number}`,\n            query: query\n          });\n\n          return;\n        }\n\n        // 如果没有预约序号，按原有逻辑处理\n        // 先查询预约详情，检查是否是循环预约\n        const response = await reservationApi.getReservationByCode(reservation.reservation_code);\n\n        if (response.data.success) {\n          // 普通预约，导航到预定详情页\n          console.log('找到普通预约，跳转到预约详情页:', reservation.reservation_code);\n          this.$router.push({\n            path: `/reservation/${reservation.reservation_code}`,\n            query: {\n              userContact: this.personalQueryForm.userContact,\n              from: 'query'\n            }\n          });\n        } else {\n          // 检查是否是循环预约\n          if (response.data.data && response.data.data.is_recurring === true && response.data.data.recurring_id) {\n            // 这是一个循环预约，跳转到循环预约详情页\n            console.log('检测到循环预约标记，跳转到循环预约详情页:', response.data.data.recurring_id);\n            this.$router.push({\n              path: `/recurring-reservation/${response.data.data.recurring_id}`,\n              query: {\n                userContact: this.personalQueryForm.userContact,\n                from: 'query'\n              }\n            });\n          } else {\n            // 如果普通预约查不到，再查循环预约\n            try {\n              const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(reservation.reservation_code);\n              if (recurringResponse.data.success) {\n                // 导航到循环预约详情页\n                console.log('找到循环预约，跳转到循环预约详情页:', recurringResponse.data.data.id);\n                this.$router.push(`/recurring-reservation/${recurringResponse.data.data.id}`);\n              } else {\n                this.$message.error(this.$t('reservation.notFound'));\n              }\n            } catch (recurringError) {\n              console.error('Failed to query by reservation code (recurring):', recurringError);\n              this.$message.error(this.$t('reservation.notFound'));\n            }\n          }\n        }\n      } catch (error) {\n        // 检查错误是否包含循环预约信息\n        if (error.response && error.response.data && error.response.data.data &&\n            error.response.data.data.is_recurring === true && error.response.data.data.recurring_id) {\n          // 这是一个循环预约，跳转到循环预约详情页\n          console.log('错误响应中检测到循环预约标记，跳转到循环预约详情页:', error.response.data.data.recurring_id);\n          this.$router.push(`/recurring-reservation/${error.response.data.data.recurring_id}`);\n        } else {\n          console.error('查看预约详情失败:', error);\n          this.$message.error(this.$t('common.error'));\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.reservation-query {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.page-title {\n  margin-bottom: 20px;\n  font-size: 24px;\n  color: #303133;\n}\n\n.query-card {\n  margin-bottom: 20px;\n}\n\n.query-results,\n.no-results-card,\n.instructions-card,\n.not-found-card {\n  margin-top: 30px;\n}\n\n.result-card {\n  margin-bottom: 20px;\n}\n\n.instructions-content {\n  color: #606266;\n}\n\n.instructions-content p {\n  margin-top: 0;\n  margin-bottom: 20px;\n  font-size: 15px;\n  color: #606266;\n  font-weight: 500;\n}\n\n.instructions-content ul {\n  padding-left: 20px;\n  margin-top: 15px;\n}\n\n.instructions-content li {\n  margin-bottom: 15px;\n  line-height: 1.6;\n  color: #606266;\n}\n\n/* 表单提示样式 */\n.form-tip {\n  font-size: 13px;\n  color: #909399;\n  margin-bottom: 15px;\n  line-height: 1.5;\n  display: flex;\n  align-items: flex-start;\n}\n\n.form-tip i {\n  margin-right: 5px;\n  margin-top: 3px;\n  color: #409EFF;\n}\n\n/* 选项卡样式 */\n.el-tabs__item {\n  font-size: 16px;\n  padding: 0 20px;\n}\n\n/* 表格样式 */\n.el-table {\n  margin-top: 10px;\n}\n\n/* 日期选择器样式 */\n.el-date-editor--daterange {\n  width: 100% !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}