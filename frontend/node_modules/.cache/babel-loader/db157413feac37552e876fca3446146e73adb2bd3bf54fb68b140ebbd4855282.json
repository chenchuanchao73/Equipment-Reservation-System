{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport { equipmentApi, categoryApi } from '@/api';\nimport RichTextEditor from '@/components/common/RichTextEditor.vue';\nimport axios from 'axios';\nexport default {\n  name: 'AdminEquipment',\n  components: {\n    RichTextEditor\n  },\n  data() {\n    return {\n      loading: false,\n      submitting: false,\n      equipments: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 10,\n      categories: [],\n      filter: {\n        category: '',\n        status: '',\n        search: ''\n      },\n      dialogVisible: false,\n      dialogType: 'add',\n      // 'add' or 'edit'\n      form: {\n        id: null,\n        name: '',\n        category: '',\n        model: '',\n        location: '',\n        status: 'available',\n        description: '',\n        user_guide: '',\n        image_path: ''\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }],\n        category: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }],\n        status: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }]\n      },\n      uploadDialogVisible: false,\n      currentEquipment: {},\n      imageUrl: '',\n      // 上传相关\n      uploadUrl: axios.defaults.baseURL + '/api/equipment/upload-image',\n      // 视频相关\n      videoType: 'youtube',\n      // 富文本编辑器选项\n      editorOptions: {\n        modules: {\n          toolbar: [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n            'header': 1\n          }, {\n            'header': 2\n          }], [{\n            'list': 'ordered'\n          }, {\n            'list': 'bullet'\n          }], [{\n            'script': 'sub'\n          }, {\n            'script': 'super'\n          }], [{\n            'indent': '-1'\n          }, {\n            'indent': '+1'\n          }], [{\n            'direction': 'rtl'\n          }], [{\n            'size': ['small', false, 'large', 'huge']\n          }], [{\n            'header': [1, 2, 3, 4, 5, 6, false]\n          }], [{\n            'color': []\n          }, {\n            'background': []\n          }], [{\n            'font': []\n          }], [{\n            'align': []\n          }], ['clean'], ['link', 'image', 'video']]\n        },\n        placeholder: '',\n        theme: 'snow'\n      }\n    };\n  },\n  computed: {\n    // 获取token\n    getToken() {\n      return localStorage.getItem('token') || '';\n    },\n    uploadHeaders() {\n      return {\n        Authorization: `Bearer ${localStorage.getItem('token') || ''}`\n      };\n    },\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n  created() {\n    this.fetchData();\n    this.fetchCategories();\n  },\n  methods: {\n    // 获取设备列表\n    async fetchData() {\n      try {\n        this.loading = true;\n        const params = {\n          page: this.currentPage,\n          limit: this.pageSize,\n          category: this.filter.category || undefined,\n          status: this.filter.status || undefined,\n          search: this.filter.search || undefined\n        };\n        const response = await equipmentApi.getEquipments(params);\n        this.equipments = response.data.items;\n        this.total = response.data.total;\n      } catch (error) {\n        console.error('获取设备列表失败:', error);\n        this.$message.error(this.$t('error.serverError'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 获取设备类别\n    async fetchCategories() {\n      try {\n        const response = await categoryApi.getAllCategories();\n        this.categories = response.data.map(item => item.name);\n      } catch (error) {\n        console.error('获取设备类别失败:', error);\n      }\n    },\n    // 处理筛选条件变化\n    handleFilterChange() {\n      this.currentPage = 1;\n      this.fetchData();\n    },\n    // 处理页码变化\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.fetchData();\n    },\n    // 添加设备\n    handleAdd() {\n      this.dialogType = 'add';\n      this.form = {\n        id: null,\n        name: '',\n        category: '',\n        model: '',\n        location: '',\n        status: 'available',\n        description: '',\n        user_guide: '',\n        video_tutorial: '',\n        image_path: ''\n      };\n      this.dialogVisible = true;\n    },\n    // 编辑设备\n    handleEdit(row) {\n      this.dialogType = 'edit';\n      this.form = {\n        ...row\n      };\n      this.dialogVisible = true;\n    },\n    // 删除设备\n    handleDelete(row) {\n      this.$confirm(this.$t('admin.confirmDeleteEquipment'), this.$t('common.warning'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(async () => {\n        try {\n          this.loading = true;\n          await equipmentApi.deleteEquipment(row.id);\n          this.$message.success(this.$t('admin.equipmentDeleted'));\n          this.fetchData();\n        } catch (error) {\n          console.error('删除设备失败:', error);\n          this.$message.error(this.$t('error.serverError'));\n        } finally {\n          this.loading = false;\n        }\n      }).catch(() => {\n        // 取消删除，不做任何处理\n      });\n    },\n    // 上传设备图片\n    handleUploadImage(row) {\n      this.currentEquipment = row;\n      this.imageUrl = row.image_path || '';\n      this.uploadDialogVisible = true;\n    },\n    // 提交表单\n    submitForm() {\n      this.$refs.form.validate(async valid => {\n        if (!valid) return;\n        try {\n          this.submitting = true;\n          if (this.dialogType === 'add') {\n            // 创建设备\n            const response = await equipmentApi.createEquipment(this.form);\n            this.$message.success(this.$t('admin.equipmentAdded'));\n          } else {\n            // 更新设备\n            const response = await equipmentApi.updateEquipment(this.form.id, this.form);\n            this.$message.success(this.$t('admin.equipmentUpdated'));\n          }\n          this.dialogVisible = false;\n          this.fetchData();\n        } catch (error) {\n          console.error('保存设备失败:', error);\n          this.$message.error(this.$t('error.serverError'));\n        } finally {\n          this.submitting = false;\n        }\n      });\n    },\n    // 重置表单\n    resetForm() {\n      if (this.$refs.form) {\n        this.$refs.form.resetFields();\n      }\n    },\n    // 上传前验证\n    beforeUpload(file) {\n      const isImage = file.type.startsWith('image/');\n      const isLt8M = file.size / 1024 / 1024 < 8;\n      if (!isImage) {\n        this.$message.error(this.$t('admin.imageTypeError'));\n        return false;\n      }\n      if (!isLt8M) {\n        this.$message.error(this.$t('admin.imageSizeError').replace('2MB', '8MB'));\n        return false;\n      }\n      return true;\n    },\n    // 上传成功（添加/编辑表单中）\n    handleUploadSuccess(response) {\n      this.form.image_path = response.data.image_url;\n      this.$message.success(this.$t('admin.imageUploadSuccess'));\n    },\n    // 上传成功（单独上传图片对话框）\n    handleImageUploadSuccess(response) {\n      this.imageUrl = response.data.image_url;\n      this.currentEquipment.image_path = response.data.image_url;\n\n      // 更新设备列表中的图片URL\n      const index = this.equipments.findIndex(item => item.id === this.currentEquipment.id);\n      if (index !== -1) {\n        this.$set(this.equipments, index, {\n          ...this.currentEquipment\n        });\n      }\n      this.$message.success(this.$t('admin.imageUploadSuccess'));\n\n      // 关闭对话框\n      setTimeout(() => {\n        this.uploadDialogVisible = false;\n      }, 1500);\n    },\n    // 上传失败\n    handleUploadError(error, file) {\n      console.error('上传图片失败:', error);\n      console.log('文件信息:', file ? {\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        lastModified: file.lastModified\n      } : 'No file info');\n\n      // 尝试获取更详细的错误信息\n      let errorMessage = this.$t('admin.imageUploadError');\n      if (error.response && error.response.data) {\n        console.error('错误响应数据:', error.response.data);\n        if (error.response.data.detail) {\n          errorMessage += ': ' + error.response.data.detail;\n        }\n      }\n      this.$message.error(errorMessage);\n    },\n    // 处理视频类型变化\n    handleVideoTypeChange() {\n      // 如果已经有视频URL，则根据新的视频类型进行转换\n      if (this.form.video_tutorial) {\n        // 提取视频ID\n        let videoId = '';\n\n        // 尝试从当前的URL中提取视频ID\n        if (this.form.video_tutorial.includes('youtube.com') || this.form.video_tutorial.includes('youtu.be')) {\n          // 从 YouTube URL 提取视频ID\n          const match = this.form.video_tutorial.match(/(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/ ]{11})/);\n          if (match && match[1]) {\n            videoId = match[1];\n          }\n        } else if (this.form.video_tutorial.includes('bilibili.com')) {\n          // 从 Bilibili URL 提取视频ID\n          const match = this.form.video_tutorial.match(/bilibili\\.com\\/video\\/([^\\/?]+)/);\n          if (match && match[1]) {\n            videoId = match[1].replace('BV', '');\n          }\n        }\n\n        // 如果成功提取到视频ID，则根据新的视频类型生成URL\n        if (videoId) {\n          switch (this.videoType) {\n            case 'youtube':\n              this.form.video_tutorial = `https://www.youtube.com/embed/${videoId}`;\n              break;\n            case 'bilibili':\n              this.form.video_tutorial = `https://player.bilibili.com/player.html?bvid=BV${videoId}`;\n              break;\n            default:\n              // 其他类型不做处理\n              break;\n          }\n        }\n      }\n    },\n    // 获取完整的图片URL\n    getFullImageUrl(url) {\n      if (!url) return '';\n\n      // 如果已经是完整URL，直接返回\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        return url;\n      }\n\n      // 如果是相对路径，添加基础URL\n      if (url.startsWith('/')) {\n        return this.baseUrl + url;\n      }\n\n      // 其他情况，添加基础URL和斜杠\n      return this.baseUrl + '/' + url;\n    },\n    // 触发手动上传\n    triggerManualUpload() {\n      this.$refs.manualFileInput.click();\n    },\n    // 处理手动文件选择\n    async handleManualFileChange(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 验证文件\n      const isImage = file.type.startsWith('image/');\n      const isLt8M = file.size / 1024 / 1024 < 8;\n      if (!isImage) {\n        this.$message.error(this.$t('admin.imageTypeError'));\n        return;\n      }\n      if (!isLt8M) {\n        this.$message.error(this.$t('admin.imageSizeError').replace('2MB', '8MB'));\n        return;\n      }\n\n      // 创建 FormData\n      const formData = new FormData();\n      formData.append('file', file);\n      try {\n        this.loading = true;\n\n        // 直接使用 axios 发送请求\n        const response = await axios.post(this.uploadUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n          }\n        });\n\n        // 处理成功响应\n        this.form.image_path = response.data.data.image_url;\n        this.$message.success(this.$t('admin.imageUploadSuccess'));\n      } catch (error) {\n        console.error('手动上传图片失败:', error);\n        console.log('文件信息:', {\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          lastModified: file.lastModified\n        });\n\n        // 尝试获取更详细的错误信息\n        let errorMessage = this.$t('admin.imageUploadError');\n        if (error.response && error.response.data) {\n          console.error('错误响应数据:', error.response.data);\n          if (error.response.data.detail) {\n            errorMessage += ': ' + error.response.data.detail;\n          }\n        }\n        this.$message.error(errorMessage);\n      } finally {\n        this.loading = false;\n        // 清空文件输入框，允许再次选择同一文件\n        this.$refs.manualFileInput.value = '';\n      }\n    },\n    // 触发对话框手动上传\n    triggerDialogManualUpload() {\n      this.$refs.dialogManualFileInput.click();\n    },\n    // 处理图片加载失败\n    handleImageLoadError(row) {\n      console.log('图片加载失败，使用默认图片', row);\n      // 如果图片加载失败，将image_path设置为空，这样会显示默认图片\n      if (row && row.image_path) {\n        // 在Vue中安全地更新对象属性\n        this.$set(row, 'image_path', '');\n      }\n    },\n    // 处理对话框手动文件选择\n    async handleDialogManualFileChange(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 验证文件\n      const isImage = file.type.startsWith('image/');\n      const isLt8M = file.size / 1024 / 1024 < 8;\n      if (!isImage) {\n        this.$message.error(this.$t('admin.imageTypeError'));\n        return;\n      }\n      if (!isLt8M) {\n        this.$message.error(this.$t('admin.imageSizeError').replace('2MB', '8MB'));\n        return;\n      }\n\n      // 创建 FormData\n      const formData = new FormData();\n      formData.append('file', file);\n      if (this.currentEquipment.id) {\n        formData.append('equipment_id', this.currentEquipment.id);\n      }\n      try {\n        this.loading = true;\n\n        // 直接使用 axios 发送请求\n        const response = await axios.post(this.uploadUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\n          }\n        });\n\n        // 处理成功响应\n        this.imageUrl = response.data.data.image_url;\n        this.currentEquipment.image_path = response.data.data.image_url;\n\n        // 更新设备列表中的图片URL\n        const index = this.equipments.findIndex(item => item.id === this.currentEquipment.id);\n        if (index !== -1) {\n          this.$set(this.equipments, index, {\n            ...this.currentEquipment\n          });\n        }\n        this.$message.success(this.$t('admin.imageUploadSuccess'));\n\n        // 关闭对话框\n        setTimeout(() => {\n          this.uploadDialogVisible = false;\n        }, 1500);\n      } catch (error) {\n        console.error('手动上传图片失败:', error);\n        console.log('文件信息:', {\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          lastModified: file.lastModified\n        });\n\n        // 尝试获取更详细的错误信息\n        let errorMessage = this.$t('admin.imageUploadError');\n        if (error.response && error.response.data) {\n          console.error('错误响应数据:', error.response.data);\n          if (error.response.data.detail) {\n            errorMessage += ': ' + error.response.data.detail;\n          }\n        }\n        this.$message.error(errorMessage);\n      } finally {\n        this.loading = false;\n        // 清空文件输入框，允许再次选择同一文件\n        this.$refs.dialogManualFileInput.value = '';\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}