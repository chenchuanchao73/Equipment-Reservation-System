{"ast":null,"code":"import { formatDateTime } from '@/utils/dateUtils';\nimport equipmentApi from '@/api/equipment';\nimport reservationApi from '@/api/reservation';\nimport { categoryApi } from '@/api';\nexport default {\n  name: 'HomePage',\n  data() {\n    return {\n      // 公共查询相关\n      loading: false,\n      querySubmitted: false,\n      reservations: [],\n      categories: [],\n      queryForm: {\n        category: '',\n        status: '',\n        dateRange: null\n      },\n      // 分页相关\n      currentPage: 1,\n      pageSize: 10\n    };\n  },\n  computed: {\n    // 根据当前页码和每页显示条数计算当前页的数据\n    paginatedReservations() {\n      const startIndex = (this.currentPage - 1) * this.pageSize;\n      const endIndex = startIndex + this.pageSize;\n      return this.reservations.slice(startIndex, endIndex);\n    }\n  },\n  created() {\n    // 获取设备类别\n    this.fetchCategories();\n\n    // 默认加载公开查询数据\n    this.handleQuery();\n  },\n  methods: {\n    goToEquipment() {\n      this.$router.push('/equipment');\n    },\n    goToQuery() {\n      this.$router.push('/reservation/query');\n    },\n    goToReservationManage() {\n      this.$router.push('/reservation/query');\n    },\n    goToCalendar() {\n      this.$router.push('/calendar');\n    },\n    // 获取设备类别\n    async fetchCategories() {\n      try {\n        // 使用类别管理API获取完整的类别信息\n        const response = await categoryApi.getAllCategories();\n        if (response.data && Array.isArray(response.data)) {\n          // 使用类别的完整名称\n          this.categories = response.data.map(item => item.name);\n        } else {\n          console.error('Invalid categories data format:', response.data);\n          this.categories = [];\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment categories:', error);\n        this.categories = [];\n      }\n    },\n    // 处理公共查询\n    async handleQuery() {\n      this.loading = true;\n      this.querySubmitted = true;\n      try {\n        // 准备查询参数\n        const params = {\n          limit: 1000 // 设置为显示最多1000条结果，确保能显示所有记录\n        };\n\n        // 添加类别过滤\n        if (this.queryForm.category) {\n          // 需要先获取该类别的所有设备ID\n          const equipmentResponse = await equipmentApi.getEquipments({\n            category: this.queryForm.category,\n            limit: 100 // 增加限制，确保能获取所有设备\n          });\n          if (equipmentResponse.data && equipmentResponse.data.items && equipmentResponse.data.items.length > 0) {\n            // 如果有设备，使用类别参数进行查询\n            params.category = this.queryForm.category;\n          }\n        }\n\n        // 添加状态过滤\n        if (this.queryForm.status) {\n          // 直接使用选择的状态值，因为后端现在支持所有状态\n          params.status = this.queryForm.status;\n          console.log(`设置状态参数为 \"${this.queryForm.status}\"`);\n        }\n\n        // 添加日期范围过滤\n        if (this.queryForm.dateRange && this.queryForm.dateRange.length === 2) {\n          const [startDate, endDate] = this.queryForm.dateRange;\n          params.from_date = startDate.toISOString();\n\n          // 将结束日期调整为当天的最后一秒\n          const endDateObj = new Date(endDate);\n          endDateObj.setHours(23, 59, 59, 999);\n          params.to_date = endDateObj.toISOString();\n        }\n\n        // 发送请求\n        const response = await reservationApi.getReservations(params);\n        let reservations = response.data.items;\n\n        // 不再需要在前端进行筛选，因为后端已经返回了正确的状态\n        // 只记录日志，帮助调试\n        if (this.queryForm.status) {\n          console.log(`获取到状态为 ${this.queryForm.status} 的预约数量: ${reservations.length}`);\n\n          // 记录每个预约的状态，帮助调试\n          reservations.forEach(reservation => {\n            console.log(`预约ID=${reservation.id}, 状态=${reservation.status}, 开始时间=${reservation.start_datetime}, 结束时间=${reservation.end_datetime}`);\n          });\n        }\n\n        // 按照ID降序排序，使最新的预约显示在前面\n        reservations.sort((a, b) => b.id - a.id);\n        console.log(`按ID降序排序后的预约数量: ${reservations.length}`);\n        this.reservations = reservations;\n      } catch (error) {\n        console.error('Failed to query public reservations:', error);\n        this.$message.error(this.$t('error.queryFailed'));\n        this.reservations = [];\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 重置查询表单\n    resetQuery() {\n      this.queryForm.category = '';\n      this.queryForm.status = '';\n      this.queryForm.dateRange = null;\n      this.handleQuery();\n    },\n    // 格式化日期时间\n    formatDateTime(_, __, cellValue) {\n      return formatDateTime(cellValue);\n    },\n    // 获取状态类型\n    getStatusType(reservation) {\n      // 直接根据后端返回的状态返回对应的类型\n      switch (reservation.status) {\n        case 'cancelled':\n          return 'danger';\n        // 已取消 - 红色\n        case 'expired':\n          return 'warning';\n        // 已过期 - 橙色\n        case 'in_use':\n          return 'primary';\n        // 使用中 - 蓝色\n        case 'confirmed':\n          return 'success';\n        // 已确认 - 绿色\n        default:\n          return 'info';\n        // 其他状态 - 灰色\n      }\n    },\n    // 获取状态文本\n    getStatusText(reservation) {\n      // 直接根据后端返回的状态返回对应的文本\n      switch (reservation.status) {\n        case 'cancelled':\n          return this.$t('reservation.statusCancelled');\n        // 已取消\n        case 'expired':\n          return this.$t('reservation.statusExpired');\n        // 已过期\n        case 'in_use':\n          return this.$t('reservation.statusInUse');\n        // 使用中\n        case 'confirmed':\n          return this.$t('reservation.statusConfirmed');\n        // 已确认\n        default:\n          return reservation.status;\n        // 其他状态直接显示\n      }\n    },\n    // 处理每页显示条数变化\n    handleSizeChange(size) {\n      this.pageSize = size;\n      // 如果当前页码超出了总页数，重置为第一页\n      const totalPages = Math.ceil(this.reservations.length / this.pageSize);\n      if (this.currentPage > totalPages) {\n        this.currentPage = 1;\n      }\n    },\n    // 处理页码变化\n    handleCurrentChange(page) {\n      this.currentPage = page;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}