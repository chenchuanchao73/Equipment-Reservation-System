{"ast":null,"code":"import { equipmentApi, recurringReservationApi } from '@/api';\nimport axios from 'axios';\nexport default {\n  name: 'RecurringReservationForm',\n  computed: {\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n  data() {\n    // 表单验证规则\n    const validateTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(this.$t('reservation.requiredField')));\n      } else if (this.form.startTime && this.form.endTime) {\n        const start = new Date(this.form.startTime);\n        const end = new Date(this.form.endTime);\n        if (start >= end) {\n          callback(new Error(this.$t('reservation.invalidTime')));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n    const validateDateRange = (rule, value, callback) => {\n      if (!value || !value[0] || !value[1]) {\n        callback(new Error(this.$t('reservation.requiredField')));\n      } else {\n        callback();\n      }\n    };\n    const validateDaysOfWeek = (rule, value, callback) => {\n      if (this.form.patternType === 'weekly' && (!value || value.length === 0)) {\n        callback(new Error(this.$t('reservation.selectDaysOfWeek')));\n      } else {\n        callback();\n      }\n    };\n    const validateDaysOfMonth = (rule, value, callback) => {\n      if (this.form.patternType === 'monthly' && (!value || value.length === 0)) {\n        callback(new Error(this.$t('reservation.selectDaysOfMonth')));\n      } else {\n        callback();\n      }\n    };\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback();\n      } else {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(value)) {\n          callback(new Error(this.$t('reservation.emailFormat')));\n        } else {\n          callback();\n        }\n      }\n    };\n    return {\n      loading: false,\n      submitting: false,\n      equipment: null,\n      timeConflict: false,\n      successDialogVisible: false,\n      recurringReservationId: null,\n      form: {\n        patternType: 'weekly',\n        daysOfWeek: [],\n        daysOfMonth: [],\n        dateRange: [],\n        startTime: '',\n        endTime: '',\n        userName: '',\n        userDepartment: '',\n        userContact: '',\n        userEmail: '',\n        purpose: ''\n      },\n      rules: {\n        patternType: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }],\n        daysOfWeek: [{\n          validator: validateDaysOfWeek,\n          trigger: 'change'\n        }],\n        daysOfMonth: [{\n          validator: validateDaysOfMonth,\n          trigger: 'change'\n        }],\n        dateRange: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }, {\n          validator: validateDateRange,\n          trigger: 'change'\n        }],\n        startTime: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }, {\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        endTime: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'change'\n        }, {\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        userName: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 2,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userDepartment: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 2,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userContact: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 5,\n          max: 50,\n          message: this.$t('common.lengthLimit', {\n            min: 5,\n            max: 50\n          }),\n          trigger: 'blur'\n        }],\n        userEmail: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          validator: validateEmail,\n          trigger: 'blur'\n        }],\n        purpose: [{\n          max: 500,\n          message: this.$t('common.lengthLimit', {\n            max: 500\n          }),\n          trigger: 'blur'\n        }]\n      },\n      dateRangePickerOptions: {\n        disabledDate(time) {\n          return time.getTime() < Date.now() - 8.64e7; // 不能选择过去的日期\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchEquipment();\n  },\n  methods: {\n    async fetchEquipment() {\n      this.loading = true;\n      try {\n        const equipmentId = this.$route.params.id;\n        const response = await equipmentApi.getEquipment(equipmentId);\n        this.equipment = response.data;\n        if (this.equipment.status !== 'available') {\n          this.$message.warning(this.$t('equipment.notAvailable'));\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment:', error);\n        this.$message.error(this.$t('common.error'));\n        this.equipment = null;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async checkTimeAvailability() {\n      if (!this.form.dateRange || !this.form.dateRange[0] || !this.form.dateRange[1] || !this.form.startTime || !this.form.endTime) {\n        this.timeConflict = false;\n        return;\n      }\n      const start = new Date(this.form.startTime);\n      const end = new Date(this.form.endTime);\n      if (start >= end) {\n        this.timeConflict = true;\n        return;\n      }\n\n      // 对于循环预约，我们只检查第一天的可用性作为示例\n      try {\n        const equipmentId = this.equipment.id;\n        const startDate = this.formatDate(this.form.dateRange[0]);\n        const endDate = this.formatDate(this.form.dateRange[0]); // 只检查第一天\n\n        const response = await equipmentApi.getAvailability(equipmentId, startDate, endDate);\n\n        // 检查是否有冲突\n        this.timeConflict = response.data.available.includes(false);\n        if (this.timeConflict) {\n          this.$message.warning(this.$t('reservation.timeConflictWarning'));\n        }\n      } catch (error) {\n        console.error('Failed to check availability:', error);\n        this.$message.error(this.$t('common.error'));\n        this.timeConflict = true;\n      }\n    },\n    submitForm() {\n      this.$refs.reservationForm.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        if (this.timeConflict) {\n          this.$message.error(this.$t('reservation.timeConflict'));\n          return false;\n        }\n        this.submitting = true;\n        try {\n          // 准备开始日期和结束日期\n          const startDate = this.formatDate(this.form.dateRange[0]);\n          const endDate = this.formatDate(this.form.dateRange[1]);\n\n          // 准备开始时间和结束时间\n          const startTime = this.formatTime(this.form.startTime);\n          const endTime = this.formatTime(this.form.endTime);\n          const recurringReservationData = {\n            equipment_id: this.equipment.id,\n            pattern_type: this.form.patternType,\n            days_of_week: this.form.patternType === 'weekly' ? this.form.daysOfWeek : undefined,\n            days_of_month: this.form.patternType === 'monthly' ? this.form.daysOfMonth : undefined,\n            start_date: startDate,\n            end_date: endDate,\n            start_time: startTime,\n            end_time: endTime,\n            user_name: this.form.userName,\n            user_department: this.form.userDepartment,\n            user_contact: this.form.userContact,\n            user_email: this.form.userEmail || undefined,\n            purpose: this.form.purpose || undefined,\n            lang: this.$i18n.locale\n          };\n          const response = await recurringReservationApi.createRecurringReservation(recurringReservationData);\n          if (response.data.success) {\n            // 保存循环预约ID\n            this.recurringReservationId = response.data.data.id;\n\n            // 显示成功对话框\n            this.successDialogVisible = true;\n          } else {\n            this.$message.error(response.data.message || this.$t('common.error'));\n          }\n        } catch (error) {\n          console.error('Failed to create recurring reservation:', error);\n          this.$message.error(this.$t('common.error'));\n        } finally {\n          this.submitting = false;\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.reservationForm.resetFields();\n      this.timeConflict = false;\n    },\n    viewEquipment() {\n      this.$router.push(`/equipment/${this.equipment.id}`);\n    },\n    closeSuccessDialog() {\n      this.successDialogVisible = false;\n      this.resetForm();\n      this.$router.push('/equipment');\n    },\n    // 格式化日期为 YYYY-MM-DD\n    formatDate(date) {\n      if (!date) return '';\n      const d = new Date(date);\n      const year = d.getFullYear();\n      const month = String(d.getMonth() + 1).padStart(2, '0');\n      const day = String(d.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    // 格式化时间为 HH:MM\n    formatTime(time) {\n      if (!time) return '';\n      const d = new Date(time);\n      const hours = String(d.getHours()).padStart(2, '0');\n      const minutes = String(d.getMinutes()).padStart(2, '0');\n      return `${hours}:${minutes}`;\n    },\n    // 获取模式类型文本\n    getPatternTypeText() {\n      const types = {\n        'daily': this.$t('reservation.daily'),\n        'weekly': this.$t('reservation.weekly'),\n        'monthly': this.$t('reservation.monthly')\n      };\n      return types[this.form.patternType] || this.form.patternType;\n    },\n    // 获取星期几文本\n    getWeekdaysText() {\n      if (!this.form.daysOfWeek || this.form.daysOfWeek.length === 0) return '';\n      const weekdays = [this.$t('reservation.sunday'), this.$t('reservation.monday'), this.$t('reservation.tuesday'), this.$t('reservation.wednesday'), this.$t('reservation.thursday'), this.$t('reservation.friday'), this.$t('reservation.saturday')];\n      return this.form.daysOfWeek.map(day => weekdays[day]).join(', ');\n    },\n    // 获取每月几号文本\n    getDaysOfMonthText() {\n      if (!this.form.daysOfMonth || this.form.daysOfMonth.length === 0) return '';\n      return this.form.daysOfMonth.sort((a, b) => a - b).join(', ');\n    },\n    // 获取完整的图片URL\n    getFullImageUrl(url) {\n      if (!url) return '';\n\n      // 如果已经是完整URL，直接返回\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        return url;\n      }\n\n      // 如果是相对路径，添加基础URL\n      if (url.startsWith('/')) {\n        return this.baseUrl + url;\n      }\n\n      // 其他情况，添加基础URL和斜杠\n      return this.baseUrl + '/' + url;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}