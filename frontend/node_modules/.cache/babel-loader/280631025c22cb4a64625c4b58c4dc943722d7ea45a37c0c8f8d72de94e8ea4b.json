{"ast":null,"code":"import { reservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'AdminReservation',\n  data() {\n    return {\n      loading: false,\n      reservations: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 10,\n      filter: {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      }\n    };\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true;\n      console.log('Fetching data with filter:', this.filter);\n      console.log('Current page:', this.currentPage);\n      try {\n        const params = {\n          skip: (this.currentPage - 1) * this.pageSize,\n          // 将页码转换为skip参数\n          limit: this.pageSize,\n          code: this.filter.code || undefined,\n          user_name: this.filter.userName || undefined,\n          _t: new Date().getTime() // 添加时间戳，防止缓存\n        };\n\n        // 添加日期范围过滤\n        if (this.filter.dateRange && this.filter.dateRange.length === 2) {\n          params.from_date = this.filter.dateRange[0];\n          params.to_date = this.filter.dateRange[1];\n        }\n\n        // 处理不同的状态筛选\n        if (this.filter.status) {\n          console.log('Filtering by status:', this.filter.status);\n          if (this.filter.status === 'in_use' || this.filter.status === 'confirmed') {\n            // 这些状态需要特殊处理，因为后端没有这些细分状态\n            // 我们获取所有已确认的预约，然后在前端筛选\n            params.status = 'confirmed';\n            console.log('Setting status parameter to \"confirmed\"');\n          } else if (this.filter.status === 'expired') {\n            // 对于已过期状态，我们需要获取所有可能已过期的预约\n            // 由于我们在当前页只能获取一种状态的预约，我们选择获取\"已确认\"状态的预约\n            // 总数会在fetchTotalForSpecialStatus中计算\n            params.status = 'confirmed';\n            console.log('Setting status parameter to \"confirmed\" for expired filter');\n          } else {\n            // 其他状态直接传递给后端\n            params.status = this.filter.status;\n            console.log(`Setting status parameter to \"${this.filter.status}\"`);\n          }\n        }\n        console.log('Fetching reservations with params:', params);\n        const response = await reservationApi.getReservations(params);\n        console.log('API Response:', response);\n        let reservations = response.data.items || [];\n        console.log('Received reservations:', reservations);\n\n        // 如果选择了特殊状态，需要在前端进行筛选\n        if (this.filter.status === 'in_use') {\n          // 筛选出“使用中”的预约\n          const now = new Date();\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            return now >= start && now <= end;\n          });\n        } else if (this.filter.status === 'expired') {\n          // 筛选出“已过期”的预约\n          reservations = reservations.filter(reservation => {\n            return isReservationExpired(reservation.end_datetime);\n          });\n        } else if (this.filter.status === 'confirmed') {\n          // 筛选出真正的“已确认”预约（未开始的预约）\n          const now = new Date();\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime);\n            // 未开始且未过期\n            return start > now && !isReservationExpired(reservation.end_datetime);\n          });\n        }\n        console.log('Filtered reservations:', reservations);\n        this.reservations = reservations;\n\n        // 如果是特殊状态，总数需要重新计算\n        if (this.filter.status === 'in_use' || this.filter.status === 'expired') {\n          // 对于特殊状态，我们需要获取所有页的数据来计算总数\n          // 这里我们先使用当前页的数据计算一个临时总数\n          this.total = reservations.length;\n          console.log(`Temporary total based on current page: ${this.total}`);\n\n          // 无论当前页是否有数据，都获取所有数据来计算真实总数\n          this.fetchTotalForSpecialStatus();\n        } else {\n          this.total = response.data.total;\n          console.log(`Total from API response: ${this.total}`);\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservations:', error);\n        this.$message.error(this.$t('error.serverError'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return '';\n      const date = new Date(cellValue);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning';\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return 'primary';\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success';\n    },\n    getStatusText(reservation) {\n      // 如果预约已取消，显示“已取消”\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled');\n      }\n\n      // 如果预约已过期，显示“已过期”\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.expired');\n      }\n\n      // 如果预约正在进行中，显示“使用中”\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return this.$t('reservation.inUse');\n      }\n\n      // 如果预约已确认且未开始，显示“已确认”\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return this.$t('reservation.confirmed');\n    },\n    handleFilterChange() {\n      this.currentPage = 1;\n      this.fetchData();\n    },\n    resetFilter() {\n      this.filter = {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      };\n      this.handleFilterChange();\n    },\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.fetchData();\n    },\n    viewReservation(reservation) {\n      // 构建URL，只包含预约码和时间参数，不再包含状态参数\n      // 这样详情页面将始终从API获取最新状态，而不是依赖URL参数\n      const url = {\n        path: `/admin/reservation/${reservation.reservation_code}`,\n        query: {\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime\n        }\n      };\n      this.$router.push(url);\n    },\n    // 获取特殊状态的总记录数并更新当前页面的预约列表\n    async fetchTotalForSpecialStatus() {\n      try {\n        console.log('Fetching total for special status:', this.filter.status);\n\n        // 构建查询参数，不包含分页参数\n        const params = {\n          // 不设置limit，获取所有记录\n          skip: 0,\n          code: this.filter.code || undefined,\n          user_name: this.filter.userName || undefined\n        };\n\n        // 添加日期范围过滤\n        if (this.filter.dateRange && this.filter.dateRange.length === 2) {\n          params.from_date = this.filter.dateRange[0];\n          params.to_date = this.filter.dateRange[1];\n        }\n        let allReservations = [];\n        if (this.filter.status === 'expired') {\n          // 对于\"已过期\"状态，我们需要获取所有状态的预约\n          // 分别获取\"已确认\"和\"已取消\"状态的预约\n          const confirmedParams = {\n            ...params,\n            status: 'confirmed'\n          };\n          const cancelledParams = {\n            ...params,\n            status: 'cancelled'\n          };\n          console.log('Fetching confirmed reservations for expired status');\n          const confirmedResponse = await reservationApi.getReservations(confirmedParams);\n          console.log('Fetching cancelled reservations for expired status');\n          const cancelledResponse = await reservationApi.getReservations(cancelledParams);\n\n          // 合并结果\n          allReservations = [...confirmedResponse.data.items, ...cancelledResponse.data.items];\n          console.log(`Total reservations before filtering: ${allReservations.length}`);\n\n          // 筛选出\"已过期\"的预约\n          allReservations = allReservations.filter(reservation => {\n            // 使用当前日期检查是否已过期\n            const now = new Date();\n            const end = new Date(reservation.end_datetime);\n            console.log(`检查预约是否过期: ID=${reservation.id}, 结束时间=${end}, 当前时间=${now}, 是否过期=${now > end}, 状态=${reservation.status}`);\n\n            // 只有当预约结束时间早于当前时间时，才认为预约已过期\n            return now > end;\n          });\n          console.log(`Total expired reservations: ${allReservations.length}`);\n\n          // 如果找到了过期预约，更新当前页面的预约列表\n          if (allReservations.length > 0) {\n            // 计算当前页应该显示的预约\n            const startIndex = (this.currentPage - 1) * this.pageSize;\n            const endIndex = Math.min(startIndex + this.pageSize, allReservations.length);\n\n            // 更新当前页面的预约列表\n            this.reservations = allReservations.slice(startIndex, endIndex);\n            console.log(`更新当前页面的预约列表: ${this.reservations.length} 条记录`);\n          }\n        } else if (this.filter.status === 'in_use') {\n          // 对于\"使用中\"状态，只获取已确认的预约\n          params.status = 'confirmed';\n          console.log('Fetching confirmed reservations for in_use status');\n          const response = await reservationApi.getReservations(params);\n          allReservations = response.data.items;\n          console.log(`Total reservations before filtering: ${allReservations.length}`);\n\n          // 筛选出\"使用中\"的预约\n          const now = new Date();\n          allReservations = allReservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            return now >= start && now <= end;\n          });\n          console.log(`Total in_use reservations: ${allReservations.length}`);\n        }\n\n        // 更新总数\n        this.total = allReservations.length;\n        console.log(`Updated total to: ${this.total}`);\n      } catch (error) {\n        console.error('Failed to fetch total for special status:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["reservationApi","isReservationExpired","name","data","loading","reservations","total","currentPage","pageSize","filter","code","userName","status","dateRange","created","fetchData","methods","console","log","params","skip","limit","undefined","user_name","_t","Date","getTime","length","from_date","to_date","response","getReservations","items","now","reservation","start","start_datetime","end","end_datetime","fetchTotalForSpecialStatus","error","$message","$t","formatDateTime","row","column","cellValue","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getStatusType","getStatusText","handleFilterChange","resetFilter","handlePageChange","page","viewReservation","url","path","reservation_code","query","startTime","endTime","$router","push","allReservations","confirmedParams","cancelledParams","confirmedResponse","cancelledResponse","id","startIndex","endIndex","Math","min","slice"],"sources":["src/views/admin/AdminReservation.vue"],"sourcesContent":["<template>\n  <div class=\"admin-reservation\">\n    <div class=\"page-header\">\n      <h1 class=\"page-title\">{{ $t('admin.reservation') }}</h1>\n    </div>\n\n    <!-- 筛选卡片 -->\n    <el-card shadow=\"hover\" class=\"filter-card\">\n      <el-form :inline=\"true\" :model=\"filter\" class=\"filter-form\">\n        <el-form-item :label=\"$t('reservation.code')\">\n          <el-input\n            v-model=\"filter.code\"\n            :placeholder=\"$t('reservation.queryPlaceholder')\"\n            clearable\n            @keyup.enter.native=\"handleFilterChange\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.userName')\">\n          <el-input\n            v-model=\"filter.userName\"\n            :placeholder=\"$t('reservation.userName')\"\n            clearable\n            @keyup.enter.native=\"handleFilterChange\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.status')\">\n          <el-select\n            v-model=\"filter.status\"\n            :placeholder=\"$t('equipment.allStatus')\"\n            clearable\n            @change=\"handleFilterChange\"\n          >\n            <el-option\n              :label=\"$t('reservation.confirmed')\"\n              value=\"confirmed\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.inUse')\"\n              value=\"in_use\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.expired')\"\n              value=\"expired\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.cancelled')\"\n              value=\"cancelled\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.dateRange')\">\n          <el-date-picker\n            v-model=\"filter.dateRange\"\n            type=\"daterange\"\n            range-separator=\"至\"\n            :start-placeholder=\"$t('reservation.startDate')\"\n            :end-placeholder=\"$t('reservation.endDate')\"\n            value-format=\"yyyy-MM-dd\"\n            @change=\"handleFilterChange\"\n          >\n          </el-date-picker>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilterChange\">\n            {{ $t('common.search') }}\n          </el-button>\n          <el-button @click=\"resetFilter\" icon=\"el-icon-refresh-left\">\n            {{ $t('common.reset') }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <!-- 预定列表 -->\n    <el-card shadow=\"hover\" class=\"reservation-list\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n\n      <div v-else-if=\"reservations.length === 0\" class=\"empty-data\">\n        <el-empty :description=\"$t('common.noData')\"></el-empty>\n      </div>\n\n      <el-table\n        v-else\n        :data=\"reservations\"\n        style=\"width: 100%\"\n        :default-sort=\"{ prop: 'created_at', order: 'descending' }\"\n        header-align=\"center\"\n        cell-class-name=\"text-center\"\n        border\n        stripe\n      >\n        <el-table-column\n          prop=\"reservation_code\"\n          :label=\"$t('reservation.code')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <span style=\"color: #F56C6C; font-weight: bold;\">{{ scope.row.reservation_code }}</span>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n          prop=\"equipment_name\"\n          :label=\"$t('reservation.equipmentName')\"\n          min-width=\"120\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_name\"\n          :label=\"$t('reservation.userName')\"\n          min-width=\"100\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_department\"\n          :label=\"$t('reservation.userDepartment')\"\n          min-width=\"100\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_contact\"\n          :label=\"$t('reservation.userContact')\"\n          min-width=\"120\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"start_datetime\"\n          :label=\"$t('reservation.startTime')\"\n          min-width=\"150\"\n          :formatter=\"formatDateTime\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"end_datetime\"\n          :label=\"$t('reservation.endTime')\"\n          min-width=\"150\"\n          :formatter=\"formatDateTime\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"status\"\n          :label=\"$t('reservation.status')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <el-tag\n              :type=\"getStatusType(scope.row)\"\n              size=\"medium\"\n              style=\"font-weight: bold; padding: 0px 10px; font-size: 14px;\"\n            >\n              {{ getStatusText(scope.row) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n          :label=\"$t('common.operation')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <el-button\n              type=\"text\"\n              size=\"small\"\n              @click=\"viewReservation(scope.row)\"\n            >\n              {{ $t('admin.viewReservation') }}\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页 -->\n      <div class=\"pagination-container\" v-if=\"reservations.length > 0\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"total\"\n          :page-size=\"pageSize\"\n          :current-page.sync=\"currentPage\"\n          @current-change=\"handlePageChange\"\n        ></el-pagination>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { reservationApi } from '@/api'\nimport { isReservationExpired } from '@/utils/date'\n\nexport default {\n  name: 'AdminReservation',\n\n  data() {\n    return {\n      loading: false,\n      reservations: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 10,\n      filter: {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      }\n    }\n  },\n\n  created() {\n    this.fetchData()\n  },\n\n  methods: {\n    async fetchData() {\n      this.loading = true\n      console.log('Fetching data with filter:', this.filter);\n      console.log('Current page:', this.currentPage);\n\n      try {\n        const params = {\n          skip: (this.currentPage - 1) * this.pageSize, // 将页码转换为skip参数\n          limit: this.pageSize,\n          code: this.filter.code || undefined,\n          user_name: this.filter.userName || undefined,\n          _t: new Date().getTime() // 添加时间戳，防止缓存\n        }\n\n        // 添加日期范围过滤\n        if (this.filter.dateRange && this.filter.dateRange.length === 2) {\n          params.from_date = this.filter.dateRange[0]\n          params.to_date = this.filter.dateRange[1]\n        }\n\n        // 处理不同的状态筛选\n        if (this.filter.status) {\n          console.log('Filtering by status:', this.filter.status);\n\n          if (this.filter.status === 'in_use' || this.filter.status === 'confirmed') {\n            // 这些状态需要特殊处理，因为后端没有这些细分状态\n            // 我们获取所有已确认的预约，然后在前端筛选\n            params.status = 'confirmed'\n            console.log('Setting status parameter to \"confirmed\"');\n          } else if (this.filter.status === 'expired') {\n            // 对于已过期状态，我们需要获取所有可能已过期的预约\n            // 由于我们在当前页只能获取一种状态的预约，我们选择获取\"已确认\"状态的预约\n            // 总数会在fetchTotalForSpecialStatus中计算\n            params.status = 'confirmed'\n            console.log('Setting status parameter to \"confirmed\" for expired filter');\n          } else {\n            // 其他状态直接传递给后端\n            params.status = this.filter.status\n            console.log(`Setting status parameter to \"${this.filter.status}\"`);\n          }\n        }\n\n        console.log('Fetching reservations with params:', params)\n        const response = await reservationApi.getReservations(params)\n        console.log('API Response:', response)\n        let reservations = response.data.items || []\n        console.log('Received reservations:', reservations)\n\n        // 如果选择了特殊状态，需要在前端进行筛选\n        if (this.filter.status === 'in_use') {\n          // 筛选出“使用中”的预约\n          const now = new Date()\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime)\n            const end = new Date(reservation.end_datetime)\n            return now >= start && now <= end\n          })\n        } else if (this.filter.status === 'expired') {\n          // 筛选出“已过期”的预约\n          reservations = reservations.filter(reservation => {\n            return isReservationExpired(reservation.end_datetime)\n          })\n        } else if (this.filter.status === 'confirmed') {\n          // 筛选出真正的“已确认”预约（未开始的预约）\n          const now = new Date()\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime)\n            // 未开始且未过期\n            return start > now && !isReservationExpired(reservation.end_datetime)\n          })\n        }\n\n        console.log('Filtered reservations:', reservations)\n        this.reservations = reservations\n\n        // 如果是特殊状态，总数需要重新计算\n        if (this.filter.status === 'in_use' || this.filter.status === 'expired') {\n          // 对于特殊状态，我们需要获取所有页的数据来计算总数\n          // 这里我们先使用当前页的数据计算一个临时总数\n          this.total = reservations.length\n          console.log(`Temporary total based on current page: ${this.total}`);\n\n          // 无论当前页是否有数据，都获取所有数据来计算真实总数\n          this.fetchTotalForSpecialStatus()\n        } else {\n          this.total = response.data.total\n          console.log(`Total from API response: ${this.total}`);\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservations:', error)\n        this.$message.error(this.$t('error.serverError'))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return ''\n\n      const date = new Date(cellValue)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    },\n\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger'\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning'\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return 'primary'\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success'\n    },\n\n    getStatusText(reservation) {\n      // 如果预约已取消，显示“已取消”\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled')\n      }\n\n      // 如果预约已过期，显示“已过期”\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.expired')\n      }\n\n      // 如果预约正在进行中，显示“使用中”\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return this.$t('reservation.inUse')\n      }\n\n      // 如果预约已确认且未开始，显示“已确认”\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return this.$t('reservation.confirmed')\n    },\n\n    handleFilterChange() {\n      this.currentPage = 1\n      this.fetchData()\n    },\n\n    resetFilter() {\n      this.filter = {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      }\n      this.handleFilterChange()\n    },\n\n    handlePageChange(page) {\n      this.currentPage = page\n      this.fetchData()\n    },\n\n    viewReservation(reservation) {\n      // 构建URL，只包含预约码和时间参数，不再包含状态参数\n      // 这样详情页面将始终从API获取最新状态，而不是依赖URL参数\n      const url = {\n        path: `/admin/reservation/${reservation.reservation_code}`,\n        query: {\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime\n        }\n      }\n      this.$router.push(url)\n    },\n\n    // 获取特殊状态的总记录数并更新当前页面的预约列表\n    async fetchTotalForSpecialStatus() {\n      try {\n        console.log('Fetching total for special status:', this.filter.status);\n\n        // 构建查询参数，不包含分页参数\n        const params = {\n          // 不设置limit，获取所有记录\n          skip: 0,\n          code: this.filter.code || undefined,\n          user_name: this.filter.userName || undefined\n        }\n\n        // 添加日期范围过滤\n        if (this.filter.dateRange && this.filter.dateRange.length === 2) {\n          params.from_date = this.filter.dateRange[0]\n          params.to_date = this.filter.dateRange[1]\n        }\n\n        let allReservations = [];\n\n        if (this.filter.status === 'expired') {\n          // 对于\"已过期\"状态，我们需要获取所有状态的预约\n          // 分别获取\"已确认\"和\"已取消\"状态的预约\n          const confirmedParams = { ...params, status: 'confirmed' };\n          const cancelledParams = { ...params, status: 'cancelled' };\n\n          console.log('Fetching confirmed reservations for expired status');\n          const confirmedResponse = await reservationApi.getReservations(confirmedParams);\n\n          console.log('Fetching cancelled reservations for expired status');\n          const cancelledResponse = await reservationApi.getReservations(cancelledParams);\n\n          // 合并结果\n          allReservations = [\n            ...confirmedResponse.data.items,\n            ...cancelledResponse.data.items\n          ];\n\n          console.log(`Total reservations before filtering: ${allReservations.length}`);\n\n          // 筛选出\"已过期\"的预约\n          allReservations = allReservations.filter(reservation => {\n            // 使用当前日期检查是否已过期\n            const now = new Date();\n            const end = new Date(reservation.end_datetime);\n            console.log(`检查预约是否过期: ID=${reservation.id}, 结束时间=${end}, 当前时间=${now}, 是否过期=${now > end}, 状态=${reservation.status}`);\n\n            // 只有当预约结束时间早于当前时间时，才认为预约已过期\n            return now > end;\n          });\n\n          console.log(`Total expired reservations: ${allReservations.length}`);\n\n          // 如果找到了过期预约，更新当前页面的预约列表\n          if (allReservations.length > 0) {\n            // 计算当前页应该显示的预约\n            const startIndex = (this.currentPage - 1) * this.pageSize;\n            const endIndex = Math.min(startIndex + this.pageSize, allReservations.length);\n\n            // 更新当前页面的预约列表\n            this.reservations = allReservations.slice(startIndex, endIndex);\n            console.log(`更新当前页面的预约列表: ${this.reservations.length} 条记录`);\n          }\n        } else if (this.filter.status === 'in_use') {\n          // 对于\"使用中\"状态，只获取已确认的预约\n          params.status = 'confirmed';\n\n          console.log('Fetching confirmed reservations for in_use status');\n          const response = await reservationApi.getReservations(params);\n          allReservations = response.data.items;\n\n          console.log(`Total reservations before filtering: ${allReservations.length}`);\n\n          // 筛选出\"使用中\"的预约\n          const now = new Date();\n          allReservations = allReservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            return now >= start && now <= end;\n          });\n\n          console.log(`Total in_use reservations: ${allReservations.length}`);\n        }\n\n        // 更新总数\n        this.total = allReservations.length;\n        console.log(`Updated total to: ${this.total}`);\n      } catch (error) {\n        console.error('Failed to fetch total for special status:', error);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.admin-reservation {\n  padding: 20px;\n}\n\n.page-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding: 15px 20px;\n  background-color: #FFFFFF;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  color: #303133;\n}\n\n.filter-card {\n  margin-bottom: 20px;\n}\n\n.reservation-list {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 40px 0;\n}\n\n.empty-data {\n  padding: 40px 0;\n  text-align: center;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n.text-center {\n  text-align: center !important;\n}\n\n@media (max-width: 768px) {\n  .filter-form .el-form-item {\n    margin-right: 0;\n    margin-bottom: 10px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}