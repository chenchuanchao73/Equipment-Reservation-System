{"ast":null,"code":"import { equipmentApi, reservationApi } from '@/api';\nimport axios from 'axios';\nexport default {\n  name: 'ReservationForm',\n  computed: {\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n  data() {\n    // 表单验证规则\n    const validateTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(this.$t('reservation.requiredField')));\n      } else if (this.form.startDateTime && this.form.endDateTime) {\n        if (this.form.startDateTime >= this.form.endDateTime) {\n          callback(new Error(this.$t('reservation.invalidTime')));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback();\n      } else {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(value)) {\n          callback(new Error(this.$t('reservation.emailFormat')));\n        } else {\n          callback();\n        }\n      }\n    };\n    return {\n      loading: true,\n      equipment: null,\n      submitting: false,\n      timeConflict: false,\n      successDialogVisible: false,\n      reservationCode: '',\n      qrcodeUrl: null,\n      // 二维码功能已移除\n\n      // 表单数据\n      form: {\n        reservationType: 'single',\n        startDateTime: null,\n        endDateTime: null,\n        userName: '',\n        userDepartment: '',\n        userContact: '',\n        userEmail: '',\n        purpose: ''\n      },\n      // 表单验证规则\n      rules: {\n        startDateTime: [{\n          required: true,\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        endDateTime: [{\n          required: true,\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        userName: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: this.$t('reservation.nameLength'),\n          trigger: 'blur'\n        }],\n        userDepartment: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }],\n        userContact: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }],\n        userEmail: [{\n          validator: validateEmail,\n          trigger: 'blur'\n        }]\n      },\n      // 日期选择器配置\n      startPickerOptions: {\n        disabledDate: time => {\n          return time.getTime() < Date.now() - 8.64e7; // 禁用过去的日期\n        }\n      },\n      endPickerOptions: {\n        disabledDate: time => {\n          // 如果没有选择开始时间，禁用过去的日期\n          if (!this.form.startDateTime) {\n            return time.getTime() < Date.now() - 8.64e7;\n          }\n\n          // 获取选择日期的年月日部分（不含时间）\n          const selectedDate = new Date(time.getFullYear(), time.getMonth(), time.getDate());\n          const startDate = new Date(this.form.startDateTime.getFullYear(), this.form.startDateTime.getMonth(), this.form.startDateTime.getDate());\n\n          // 如果日期早于开始日期，则禁用\n          if (selectedDate < startDate) {\n            return true;\n          }\n\n          // 如果是同一天，检查一下当前是否为00:00（一天的开始）\n          // 如果是00:00，可以选择，因为用户可以设置晚于开始时间的结束时间\n          // 如果不是00:00，说明这是日期选择器显示的时间，不是用户最终选择的时间，可以允许选择\n          if (selectedDate.getTime() === startDate.getTime()) {\n            return false; // 同一天也可以选择\n          }\n          return false; // 允许选择晚于开始日期的所有日期\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchEquipment();\n  },\n  methods: {\n    // 获取设备信息\n    async fetchEquipment() {\n      this.loading = true;\n      try {\n        const equipmentId = this.$route.params.id;\n        const response = await equipmentApi.getEquipment(equipmentId);\n        this.equipment = response.data;\n        if (this.equipment.status !== 'available') {\n          this.$message.warning(this.$t('equipment.notAvailable'));\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment:', error);\n        this.$message.error(this.$t('common.error'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 检查时间可用性\n    async checkTimeAvailability() {\n      if (!this.form.startDateTime || !this.form.endDateTime) {\n        return;\n      }\n      try {\n        const equipmentId = this.equipment.id;\n        const startDate = this.formatDateTime(this.form.startDateTime);\n        const endDate = this.formatDateTime(this.form.endDateTime);\n        const response = await equipmentApi.getAvailability(equipmentId, startDate, endDate);\n\n        // 检查是否有冲突\n        this.timeConflict = response.data.available.includes(false);\n      } catch (error) {\n        console.error('Failed to check availability:', error);\n        this.timeConflict = true;\n      }\n    },\n    // 处理预约类型变更\n    handleReservationTypeChange(value) {\n      if (value === 'recurring') {\n        // 跳转到循环预约表单页面\n        this.$router.push(`/equipment/${this.equipment.id}/recurring-reserve`);\n      }\n    },\n    // 格式化日期时间\n    formatDateTime(date) {\n      if (!date) return null;\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:00`;\n    },\n    // 提交表单\n    submitForm() {\n      this.$refs.reservationForm.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        this.submitting = true;\n        try {\n          const reservationData = {\n            equipment_id: this.equipment.id,\n            user_name: this.form.userName,\n            user_department: this.form.userDepartment,\n            user_contact: this.form.userContact,\n            user_email: this.form.userEmail || undefined,\n            start_datetime: this.formatDateTime(this.form.startDateTime),\n            end_datetime: this.formatDateTime(this.form.endDateTime),\n            purpose: this.form.purpose || undefined,\n            lang: this.$i18n.locale\n          };\n          const response = await reservationApi.createReservation(reservationData);\n          if (response.data.success) {\n            this.reservationCode = response.data.data.reservation_code;\n            this.successDialogVisible = true;\n            this.$refs.reservationForm.resetFields();\n          } else {\n            this.$message.error(response.data.message || this.$t('reservation.createFailed'));\n          }\n        } catch (error) {\n          console.error('Failed to create reservation:', error);\n          this.$message.error(this.$t('reservation.createFailed'));\n        } finally {\n          this.submitting = false;\n        }\n      });\n    },\n    // 重置表单\n    resetForm() {\n      this.$refs.reservationForm.resetFields();\n      this.timeConflict = false;\n    },\n    // 查看预定详情\n    viewReservation() {\n      this.$router.push(`/reservation/${this.reservationCode}`);\n    },\n    // 关闭成功对话框\n    closeSuccessDialog() {\n      this.successDialogVisible = false;\n      this.$router.push('/equipment');\n    },\n    // 获取完整图片URL\n    getFullImageUrl(url) {\n      if (!url) return '';\n\n      // 如果已经是完整URL，直接返回\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        return url;\n      }\n\n      // 否则拼接基础URL\n      return `${this.baseUrl}${url}`;\n    }\n  }\n};","map":{"version":3,"names":["equipmentApi","reservationApi","axios","name","computed","baseUrl","defaults","baseURL","data","validateTime","rule","value","callback","Error","$t","form","startDateTime","endDateTime","validateEmail","emailRegex","test","loading","equipment","submitting","timeConflict","successDialogVisible","reservationCode","qrcodeUrl","reservationType","userName","userDepartment","userContact","userEmail","purpose","rules","required","validator","trigger","message","min","max","startPickerOptions","disabledDate","time","getTime","Date","now","endPickerOptions","selectedDate","getFullYear","getMonth","getDate","startDate","created","fetchEquipment","methods","equipmentId","$route","params","id","response","getEquipment","status","$message","warning","error","console","checkTimeAvailability","formatDateTime","endDate","getAvailability","available","includes","handleReservationTypeChange","$router","push","date","year","month","String","padStart","day","hours","getHours","minutes","getMinutes","submitForm","$refs","reservationForm","validate","valid","reservationData","equipment_id","user_name","user_department","user_contact","user_email","undefined","start_datetime","end_datetime","lang","$i18n","locale","createReservation","success","reservation_code","resetFields","resetForm","viewReservation","closeSuccessDialog","getFullImageUrl","url","startsWith"],"sources":["src/views/reservation/ReservationForm.vue"],"sourcesContent":["<template>\n  <div class=\"reservation-form\">\n    <div v-if=\"loading\" class=\"loading-container\">\n      <el-skeleton :rows=\"10\" animated />\n    </div>\n\n    <div v-else-if=\"!equipment\" class=\"error-container\">\n      <el-result\n        icon=\"error\"\n        :title=\"$t('error.errorMessage')\"\n        :sub-title=\"$t('equipment.notFound')\"\n      >\n        <template #extra>\n          <el-button type=\"primary\" @click=\"$router.push('/equipment')\">\n            {{ $t('equipment.list') }}\n          </el-button>\n        </template>\n      </el-result>\n    </div>\n\n    <div v-else>\n      <!-- 返回按钮 -->\n      <div class=\"back-link\">\n        <el-button icon=\"el-icon-arrow-left\" @click=\"$router.push(`/equipment/${equipment.id}`)\">\n          {{ $t('common.back') }}\n        </el-button>\n      </div>\n\n      <h1 class=\"page-title\">{{ $t('reservation.form') }}</h1>\n\n      <!-- 设备信息 -->\n      <el-card shadow=\"never\" class=\"equipment-card\">\n        <div class=\"equipment-info\">\n          <div class=\"equipment-image-container\">\n            <img\n              :src=\"equipment.image_path ? getFullImageUrl(equipment.image_path) : require('@/assets/upload.png')\"\n              :alt=\"equipment.name\"\n              class=\"equipment-image\"\n            />\n          </div>\n\n          <div class=\"equipment-details\">\n            <h2 class=\"equipment-name\">{{ equipment.name }}</h2>\n            <p class=\"equipment-category\">{{ equipment.category }}</p>\n\n            <div v-if=\"equipment.location\" class=\"equipment-location\">\n              <i class=\"el-icon-location\"></i> {{ equipment.location }}\n            </div>\n\n            <el-tag\n              :type=\"equipment.status === 'available' ? 'success' : 'warning'\"\n              size=\"medium\"\n              style=\"font-weight: bold; padding: 0px 10px; font-size: 14px;\"\n            >\n              {{ equipment.status === 'available' ? $t('equipment.available') : $t('equipment.maintenance') }}\n            </el-tag>\n          </div>\n        </div>\n      </el-card>\n\n      <!-- 预定表单 -->\n      <el-card shadow=\"never\" class=\"form-card\">\n        <el-form\n          ref=\"reservationForm\"\n          :model=\"form\"\n          :rules=\"rules\"\n          label-position=\"top\"\n          size=\"medium\"\n        >\n          <!-- 预约类型选择 -->\n          <el-divider>{{ $t('reservation.reservationType') }}</el-divider>\n\n          <el-form-item :label=\"$t('reservation.reservationType')\" prop=\"reservationType\">\n            <el-radio-group v-model=\"form.reservationType\" @change=\"handleReservationTypeChange\">\n              <el-radio label=\"single\">{{ $t('reservation.singleReservation') }}</el-radio>\n              <el-radio label=\"recurring\">{{ $t('reservation.recurringReservation') }}</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <!-- 时间选择 -->\n          <el-divider>{{ $t('reservation.selectTime') }}</el-divider>\n\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.startTime')\" prop=\"startDateTime\">\n                <el-date-picker\n                  v-model=\"form.startDateTime\"\n                  type=\"datetime\"\n                  :placeholder=\"$t('reservation.startTime')\"\n                  style=\"width: 100%\"\n                  :picker-options=\"startPickerOptions\"\n                  @change=\"checkTimeAvailability\"\n                ></el-date-picker>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.endTime')\" prop=\"endDateTime\">\n                <el-date-picker\n                  v-model=\"form.endDateTime\"\n                  type=\"datetime\"\n                  :placeholder=\"$t('reservation.endTime')\"\n                  style=\"width: 100%\"\n                  :picker-options=\"endPickerOptions\"\n                  @change=\"checkTimeAvailability\"\n                ></el-date-picker>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <div v-if=\"timeConflict\" class=\"time-conflict-warning\">\n            <el-alert\n              :title=\"$t('reservation.timeConflict')\"\n              type=\"error\"\n              :closable=\"false\"\n              show-icon\n            ></el-alert>\n          </div>\n\n          <!-- 用户信息 -->\n          <el-divider>{{ $t('common.userInfo') }}</el-divider>\n\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userName')\" prop=\"userName\">\n                <el-input v-model=\"form.userName\"></el-input>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userDepartment')\" prop=\"userDepartment\">\n                <el-input v-model=\"form.userDepartment\"></el-input>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <el-row :gutter=\"20\">\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userContact')\" prop=\"userContact\">\n                <el-input v-model=\"form.userContact\"></el-input>\n              </el-form-item>\n            </el-col>\n\n            <el-col :xs=\"24\" :sm=\"12\">\n              <el-form-item :label=\"$t('reservation.userEmail')\" prop=\"userEmail\">\n                <el-input v-model=\"form.userEmail\" type=\"email\"></el-input>\n              </el-form-item>\n            </el-col>\n          </el-row>\n\n          <el-form-item :label=\"$t('reservation.purpose')\" prop=\"purpose\">\n            <el-input\n              v-model=\"form.purpose\"\n              type=\"textarea\"\n              :rows=\"3\"\n            ></el-input>\n          </el-form-item>\n\n          <el-form-item>\n            <el-button\n              type=\"primary\"\n              :loading=\"submitting\"\n              @click=\"submitForm\"\n              :disabled=\"timeConflict\"\n              icon=\"el-icon-plus\"\n            >\n              {{ $t('reservation.createReservation') }}\n            </el-button>\n            <el-button @click=\"resetForm\" icon=\"el-icon-refresh-left\">{{ $t('common.reset') }}</el-button>\n          </el-form-item>\n        </el-form>\n      </el-card>\n\n      <!-- 预定成功对话框 -->\n      <el-dialog\n        :title=\"$t('reservation.createSuccess')\"\n        :visible.sync=\"successDialogVisible\"\n        width=\"500px\"\n        :close-on-click-modal=\"false\"\n        :close-on-press-escape=\"false\"\n        :show-close=\"false\"\n      >\n        <div class=\"success-content\">\n          <i class=\"el-icon-success success-icon\"></i>\n\n          <p class=\"success-message\">{{ $t('reservation.saveReservationCode') }}</p>\n\n          <div class=\"reservation-code\">\n            {{ reservationCode }}\n          </div>\n\n          <p class=\"reservation-tip\">{{ $t('reservation.reservationCodeTip') }}</p>\n\n          <div class=\"dialog-footer\">\n            <el-button @click=\"viewReservation\">{{ $t('reservation.viewDetail') }}</el-button>\n            <el-button type=\"primary\" @click=\"closeSuccessDialog\">{{ $t('common.confirm') }}</el-button>\n          </div>\n        </div>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { equipmentApi, reservationApi } from '@/api'\nimport axios from 'axios'\n\nexport default {\n  name: 'ReservationForm',\n\n  computed: {\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n\n  data() {\n    // 表单验证规则\n    const validateTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(this.$t('reservation.requiredField')))\n      } else if (this.form.startDateTime && this.form.endDateTime) {\n        if (this.form.startDateTime >= this.form.endDateTime) {\n          callback(new Error(this.$t('reservation.invalidTime')))\n        } else {\n          callback()\n        }\n      } else {\n        callback()\n      }\n    }\n\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback()\n      } else {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        if (!emailRegex.test(value)) {\n          callback(new Error(this.$t('reservation.emailFormat')))\n        } else {\n          callback()\n        }\n      }\n    }\n\n    return {\n      loading: true,\n      equipment: null,\n      submitting: false,\n      timeConflict: false,\n      successDialogVisible: false,\n      reservationCode: '',\n      qrcodeUrl: null, // 二维码功能已移除\n\n      // 表单数据\n      form: {\n        reservationType: 'single',\n        startDateTime: null,\n        endDateTime: null,\n        userName: '',\n        userDepartment: '',\n        userContact: '',\n        userEmail: '',\n        purpose: ''\n      },\n\n      // 表单验证规则\n      rules: {\n        startDateTime: [\n          { required: true, validator: validateTime, trigger: 'change' }\n        ],\n        endDateTime: [\n          { required: true, validator: validateTime, trigger: 'change' }\n        ],\n        userName: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' },\n          { min: 2, max: 50, message: this.$t('reservation.nameLength'), trigger: 'blur' }\n        ],\n        userDepartment: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' }\n        ],\n        userContact: [\n          { required: true, message: this.$t('reservation.requiredField'), trigger: 'blur' }\n        ],\n        userEmail: [\n          { validator: validateEmail, trigger: 'blur' }\n        ]\n      },\n\n      // 日期选择器配置\n      startPickerOptions: {\n        disabledDate: (time) => {\n          return time.getTime() < Date.now() - 8.64e7; // 禁用过去的日期\n        }\n      },\n      endPickerOptions: {\n        disabledDate: (time) => {\n          // 如果没有选择开始时间，禁用过去的日期\n          if (!this.form.startDateTime) {\n            return time.getTime() < Date.now() - 8.64e7;\n          }\n          \n          // 获取选择日期的年月日部分（不含时间）\n          const selectedDate = new Date(time.getFullYear(), time.getMonth(), time.getDate());\n          const startDate = new Date(\n            this.form.startDateTime.getFullYear(),\n            this.form.startDateTime.getMonth(),\n            this.form.startDateTime.getDate()\n          );\n          \n          // 如果日期早于开始日期，则禁用\n          if (selectedDate < startDate) {\n            return true;\n          }\n          \n          // 如果是同一天，检查一下当前是否为00:00（一天的开始）\n          // 如果是00:00，可以选择，因为用户可以设置晚于开始时间的结束时间\n          // 如果不是00:00，说明这是日期选择器显示的时间，不是用户最终选择的时间，可以允许选择\n          if (selectedDate.getTime() === startDate.getTime()) {\n            return false; // 同一天也可以选择\n          }\n          \n          return false; // 允许选择晚于开始日期的所有日期\n        }\n      }\n    }\n  },\n\n  created() {\n    this.fetchEquipment()\n  },\n\n  methods: {\n    // 获取设备信息\n    async fetchEquipment() {\n      this.loading = true\n      try {\n        const equipmentId = this.$route.params.id\n        const response = await equipmentApi.getEquipment(equipmentId)\n        this.equipment = response.data\n\n        if (this.equipment.status !== 'available') {\n          this.$message.warning(this.$t('equipment.notAvailable'))\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment:', error)\n        this.$message.error(this.$t('common.error'))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 检查时间可用性\n    async checkTimeAvailability() {\n      if (!this.form.startDateTime || !this.form.endDateTime) {\n        return\n      }\n\n      try {\n        const equipmentId = this.equipment.id\n        const startDate = this.formatDateTime(this.form.startDateTime)\n        const endDate = this.formatDateTime(this.form.endDateTime)\n\n        const response = await equipmentApi.getAvailability(equipmentId, startDate, endDate)\n\n        // 检查是否有冲突\n        this.timeConflict = response.data.available.includes(false)\n      } catch (error) {\n        console.error('Failed to check availability:', error)\n        this.timeConflict = true\n      }\n    },\n\n    // 处理预约类型变更\n    handleReservationTypeChange(value) {\n      if (value === 'recurring') {\n        // 跳转到循环预约表单页面\n        this.$router.push(`/equipment/${this.equipment.id}/recurring-reserve`)\n      }\n    },\n\n    // 格式化日期时间\n    formatDateTime(date) {\n      if (!date) return null\n      const year = date.getFullYear()\n      const month = String(date.getMonth() + 1).padStart(2, '0')\n      const day = String(date.getDate()).padStart(2, '0')\n      const hours = String(date.getHours()).padStart(2, '0')\n      const minutes = String(date.getMinutes()).padStart(2, '0')\n      return `${year}-${month}-${day} ${hours}:${minutes}:00`\n    },\n\n    // 提交表单\n    submitForm() {\n      this.$refs.reservationForm.validate(async (valid) => {\n        if (!valid) {\n          return false\n        }\n\n        this.submitting = true\n\n        try {\n          const reservationData = {\n            equipment_id: this.equipment.id,\n            user_name: this.form.userName,\n            user_department: this.form.userDepartment,\n            user_contact: this.form.userContact,\n            user_email: this.form.userEmail || undefined,\n            start_datetime: this.formatDateTime(this.form.startDateTime),\n            end_datetime: this.formatDateTime(this.form.endDateTime),\n            purpose: this.form.purpose || undefined,\n            lang: this.$i18n.locale\n          }\n\n          const response = await reservationApi.createReservation(reservationData)\n\n          if (response.data.success) {\n            this.reservationCode = response.data.data.reservation_code\n            this.successDialogVisible = true\n            this.$refs.reservationForm.resetFields()\n          } else {\n            this.$message.error(response.data.message || this.$t('reservation.createFailed'))\n          }\n        } catch (error) {\n          console.error('Failed to create reservation:', error)\n          this.$message.error(this.$t('reservation.createFailed'))\n        } finally {\n          this.submitting = false\n        }\n      })\n    },\n\n    // 重置表单\n    resetForm() {\n      this.$refs.reservationForm.resetFields()\n      this.timeConflict = false\n    },\n\n    // 查看预定详情\n    viewReservation() {\n      this.$router.push(`/reservation/${this.reservationCode}`)\n    },\n\n    // 关闭成功对话框\n    closeSuccessDialog() {\n      this.successDialogVisible = false\n      this.$router.push('/equipment')\n    },\n\n    // 获取完整图片URL\n    getFullImageUrl(url) {\n      if (!url) return '';\n\n      // 如果已经是完整URL，直接返回\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        return url;\n      }\n\n      // 否则拼接基础URL\n      return `${this.baseUrl}${url}`;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.reservation-form {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.page-title {\n  font-size: 24px;\n  margin-bottom: 20px;\n  color: #303133;\n}\n\n.back-link {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 40px;\n}\n\n.error-container {\n  padding: 40px;\n}\n\n.equipment-card {\n  margin-bottom: 20px;\n}\n\n.equipment-info {\n  display: flex;\n  align-items: center;\n}\n\n.equipment-image-container {\n  width: 120px;\n  height: 120px;\n  margin-right: 20px;\n  overflow: hidden;\n  border-radius: 4px;\n  flex-shrink: 0;\n}\n\n.equipment-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.equipment-details {\n  flex-grow: 1;\n}\n\n.equipment-name {\n  font-size: 20px;\n  margin: 0 0 10px 0;\n  color: #303133;\n}\n\n.equipment-category {\n  color: #606266;\n  margin: 0 0 10px 0;\n}\n\n.equipment-location {\n  color: #606266;\n  margin-bottom: 10px;\n}\n\n.form-card {\n  margin-bottom: 20px;\n}\n\n.time-conflict-warning {\n  margin: 10px 0;\n}\n\n.success-content {\n  text-align: center;\n  padding: 20px 0;\n}\n\n.success-icon {\n  font-size: 72px;\n  color: #67c23a;\n  margin-bottom: 20px;\n}\n\n.success-message {\n  font-size: 18px;\n  margin-bottom: 20px;\n}\n\n.reservation-code {\n  font-size: 24px;\n  font-weight: bold;\n  color: #409eff;\n  padding: 10px;\n  background-color: white;\n  margin-bottom: 10px;\n}\n\n.reservation-tip {\n  color: #909399;\n  margin-bottom: 20px;\n}\n\n.dialog-footer {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}