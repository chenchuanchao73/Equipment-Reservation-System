{"ast":null,"code":"import { getDbTables, getDbTableColumns, getDbTableRows } from '@/api/dbAdmin';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'DatabaseViewer',\n  data() {\n    return {\n      tables: [],\n      selectedTable: '',\n      columns: [],\n      rows: [],\n      total: 0,\n      page: 1,\n      pageSize: 20,\n      loading: false,\n      inited: false,\n      // 表字段注释对照表\n      fieldComments: {\n        // admin表：系统管理员\n        'admin.id': '管理员唯一ID',\n        'admin.username': '管理员登录账号',\n        'admin.password_hash': '加密后的登录密码',\n        'admin.name': '管理员姓名',\n        'admin.role': '管理员角色（如superadmin）',\n        'admin.is_active': '账号是否激活（1激活，0禁用）',\n        'admin.created_at': '账号创建时间',\n        // email_logs表：系统邮件发送日志\n        'email_logs.id': '日志唯一ID',\n        'email_logs.recipient': '收件人邮箱',\n        'email_logs.subject': '邮件主题',\n        'email_logs.template_key': '邮件模板标识',\n        'email_logs.event_type': '触发邮件的事件类型',\n        'email_logs.status': '发送状态（如success/failed）',\n        'email_logs.error_message': '发送失败时的错误信息',\n        'email_logs.reservation_code': '关联预约的编码',\n        'email_logs.reservation_number': '关联预约的编号',\n        'email_logs.created_at': '日志创建时间',\n        'email_logs.content_html': '邮件HTML内容',\n        // email_settings表：邮件服务器配置\n        'email_settings.id': '配置唯一ID',\n        'email_settings.smtp_server': 'SMTP服务器地址',\n        'email_settings.smtp_port': 'SMTP服务器端口',\n        'email_settings.sender_email': '发件人邮箱',\n        'email_settings.sender_name': '发件人显示名称',\n        'email_settings.smtp_username': 'SMTP登录用户名',\n        'email_settings.smtp_password': 'SMTP登录密码',\n        'email_settings.use_ssl': '是否使用SSL加密（1是，0否）',\n        'email_settings.enabled': '配置是否启用（1启用，0禁用）',\n        'email_settings.created_at': '配置创建时间',\n        'email_settings.updated_at': '配置更新时间',\n        // email_templates表：邮件模板\n        'email_templates.id': '模板唯一ID',\n        'email_templates.name': '模板名称',\n        'email_templates.template_key': '模板标识（代码）',\n        'email_templates.subject': '邮件主题模板',\n        'email_templates.content_html': 'HTML格式邮件内容',\n        'email_templates.content_text': '纯文本邮件内容',\n        'email_templates.variables': '可用变量说明',\n        'email_templates.language': '模板语言',\n        'email_templates.created_at': '模板创建时间',\n        'email_templates.updated_at': '模板更新时间',\n        // equipment表：可预约设备\n        'equipment.id': '设备唯一ID',\n        'equipment.name': '设备名称',\n        'equipment.category': '设备类别名称',\n        'equipment.model': '设备型号',\n        'equipment.location': '设备存放位置',\n        'equipment.status': '设备状态（如可用/维修/借出）',\n        'equipment.description': '设备详细描述',\n        'equipment.image_path': '设备图片路径',\n        'equipment.user_guide': '设备使用说明',\n        'equipment.created_at': '设备信息创建时间',\n        'equipment.updated_at': '设备信息更新时间',\n        'equipment.video_tutorial': '设备视频教程地址',\n        'equipment.category_id': '设备类别ID',\n        // equipment_category表：设备类别\n        'equipment_category.id': '类别唯一ID',\n        'equipment_category.name': '类别名称',\n        'equipment_category.description': '类别描述',\n        // recurring_reservation表：周期性预约\n        'recurring_reservation.id': '周期预约唯一ID',\n        'recurring_reservation.equipment_id': '设备ID',\n        'recurring_reservation.pattern_type': '重复模式类型（如每周/每月）',\n        'recurring_reservation.days_of_week': '每周重复的星期（如1,3,5）',\n        'recurring_reservation.days_of_month': '每月重复的日期（如5,15,25）',\n        'recurring_reservation.start_date': '预约周期开始日期',\n        'recurring_reservation.end_date': '预约周期结束日期',\n        'recurring_reservation.start_time': '每天预约开始时间',\n        'recurring_reservation.end_time': '每天预约结束时间',\n        'recurring_reservation.user_name': '预约人姓名',\n        'recurring_reservation.user_department': '预约人部门',\n        'recurring_reservation.user_contact': '预约人联系方式',\n        'recurring_reservation.user_email': '预约人邮箱',\n        'recurring_reservation.purpose': '预约用途',\n        'recurring_reservation.status': '周期预约状态',\n        'recurring_reservation.created_at': '创建时间',\n        'recurring_reservation.reservation_code': '周期预约编码',\n        // reservation表：单次预约\n        'reservation.id': '预约唯一ID',\n        'reservation.equipment_id': '设备ID',\n        'reservation.reservation_code': '预约编码',\n        'reservation.user_name': '预约人姓名',\n        'reservation.user_department': '预约人部门',\n        'reservation.user_contact': '预约人联系方式',\n        'reservation.user_email': '预约人邮箱',\n        'reservation.start_datetime': '预约开始时间',\n        'reservation.end_datetime': '预约结束时间',\n        'reservation.purpose': '预约用途',\n        'reservation.status': '预约状态',\n        'reservation.created_at': '预约创建时间',\n        'reservation.recurring_reservation_id': '关联的周期预约ID',\n        'reservation.is_exception': '是否为周期预约的特例',\n        'reservation.reservation_number': '预约编号',\n        // system_settings表：系统设置\n        'system_settings.id': '设置唯一ID',\n        'system_settings.site_name': '系统站点名称',\n        'system_settings.maintenance_mode': '维护模式开关（1开启，0关闭）',\n        'system_settings.reservation_limit_per_day': '单日预约上限',\n        'system_settings.allow_equipment_conflict': '是否允许设备冲突预约（1允许，0不允许）',\n        'system_settings.advance_reservation_days': '可提前预约天数',\n        'system_settings.created_at': '设置创建时间',\n        'system_settings.updated_at': '设置更新时间'\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    }),\n    isSuperAdmin() {\n      return this.user && this.user.role === 'superadmin';\n    },\n    // 判断是否为小表格（列少的表格）\n    isSmallTable() {\n      const smallTables = ['admin', 'equipment_category', 'system_settings'];\n      return !smallTables.includes(this.selectedTable);\n    }\n  },\n  created() {\n    console.log(\"DatabaseViewer 组件 created\");\n  },\n  mounted() {\n    console.log(\"DatabaseViewer 组件 mounted, 调用 initIfNeeded\");\n    this.initIfNeeded();\n\n    // 强制显示滚动条的额外处理\n    this.$nextTick(() => {\n      this.forceShowScrollbars();\n    });\n  },\n  updated() {\n    // 当数据更新后，确保滚动条显示\n    this.$nextTick(() => {\n      this.forceShowScrollbars();\n    });\n  },\n  methods: {\n    // 添加新方法：强制显示滚动条\n    forceShowScrollbars() {\n      if (this.$refs.tableScrollContainer) {\n        const container = this.$refs.tableScrollContainer;\n\n        // 临时添加内容强制显示滚动条\n        const currentWidth = container.scrollWidth;\n        if (currentWidth <= container.clientWidth) {\n          // 如果内容不需要滚动，强制内容宽度大于容器\n          const tables = container.querySelectorAll('.el-table');\n          if (tables && tables.length > 0) {\n            tables[0].style.width = container.clientWidth + 100 + 'px';\n          }\n        }\n      }\n      if (this.$refs.columnsScrollContainer) {\n        const container = this.$refs.columnsScrollContainer;\n        const tables = container.querySelectorAll('.el-table');\n        if (tables && tables.length > 0 && tables[0].scrollWidth <= container.clientWidth) {\n          tables[0].style.width = container.clientWidth + 100 + 'px';\n        }\n      }\n    },\n    // 添加滚动控制方法\n    scrollLeft() {\n      if (this.$refs.tableScrollContainer) {\n        this.$refs.tableScrollContainer.scrollLeft -= 200;\n      }\n    },\n    scrollRight() {\n      if (this.$refs.tableScrollContainer) {\n        this.$refs.tableScrollContainer.scrollLeft += 200;\n      }\n    },\n    scrollColumnsLeft() {\n      if (this.$refs.columnsScrollContainer) {\n        this.$refs.columnsScrollContainer.scrollLeft -= 200;\n      }\n    },\n    scrollColumnsRight() {\n      if (this.$refs.columnsScrollContainer) {\n        this.$refs.columnsScrollContainer.scrollLeft += 200;\n      }\n    },\n    async initIfNeeded() {\n      console.log(\"initIfNeeded 被调用，inited=\", this.inited, \"isSuperAdmin=\", this.isSuperAdmin);\n      if (!this.inited && this.isSuperAdmin) {\n        this.inited = true;\n        await this.fetchTables();\n      }\n    },\n    async fetchTables() {\n      console.log(\"开始获取数据库表名...\");\n      try {\n        console.log(\"调用 getDbTables()\");\n        const res = await getDbTables();\n        console.log(\"获取表名结果:\", res);\n        this.tables = res.data.tables || [];\n        if (this.tables.length > 0) {\n          this.handleTableSelect(this.tables[0]);\n        }\n      } catch (e) {\n        console.error(\"获取表名失败:\", e);\n        this.$message.error('获取表名失败: ' + (e.message || e));\n      }\n    },\n    async handleTableSelect(table) {\n      this.selectedTable = table;\n      this.page = 1;\n      await this.fetchTableColumns();\n      await this.fetchTableRows();\n\n      // 添加这一行，确保表格更新后强制显示滚动条\n      this.$nextTick(() => {\n        this.forceShowScrollbars();\n      });\n    },\n    async fetchTableColumns() {\n      try {\n        const res = await getDbTableColumns(this.selectedTable);\n        // 兼容不同数据库字段名\n        this.columns = (res.data.columns || []).map(col => ({\n          name: col.name || col.column_name,\n          type: col.type || col.type_name,\n          nullable: col.nullable !== undefined ? col.nullable : col.nullable_,\n          default: col.default,\n          comment: col.comment || ''\n        }));\n      } catch (e) {\n        this.columns = [];\n        this.$message.error('获取字段信息失败');\n      }\n    },\n    async fetchTableRows() {\n      this.loading = true;\n      try {\n        const res = await getDbTableRows(this.selectedTable, {\n          skip: (this.page - 1) * this.pageSize,\n          limit: this.pageSize\n        });\n        this.rows = res.data.rows || [];\n\n        // 使用后端返回的总行数\n        if (res.data.total !== undefined) {\n          this.total = res.data.total;\n        } else {\n          // 兼容旧版API，如果后端没有返回总行数，则使用简单估算\n          if (this.rows.length < this.pageSize) {\n            // 当前页不满，可能是最后一页\n            this.total = (this.page - 1) * this.pageSize + this.rows.length;\n          } else {\n            // 当前页是满的，假设至少还有一页\n            this.total = this.page * this.pageSize + this.pageSize;\n          }\n        }\n      } catch (e) {\n        this.rows = [];\n        this.$message.error('获取表数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    handlePageChange(page) {\n      this.page = page;\n      this.fetchTableRows();\n    },\n    handleSizeChange(size) {\n      this.pageSize = size;\n      this.page = 1;\n      this.fetchTableRows();\n    },\n    refreshTable() {\n      this.fetchTableColumns();\n      this.fetchTableRows();\n    },\n    // 获取字段注释 - 简化版本\n    getFieldComment(fieldName) {\n      const key = `${this.selectedTable}.${fieldName}`;\n      return this.fieldComments[key] || '暂无注释';\n    },\n    // 获取最小列宽（用于自适应模式的表格）\n    getColumnMinWidth(columnName) {\n      const lowerColumnName = columnName.toLowerCase();\n\n      // 针对特定表格中的特定列进行特殊处理\n      if (this.selectedTable === 'admin') {\n        if (lowerColumnName === 'id') return 80;\n        if (lowerColumnName === 'username') return 150;\n        if (lowerColumnName === 'password_hash') return 300;\n        if (lowerColumnName === 'name') return 150;\n        if (lowerColumnName === 'role') return 120;\n        if (lowerColumnName === 'is_active') return 100;\n        if (lowerColumnName === 'created_at') return 180;\n        return 150;\n      }\n      if (this.selectedTable === 'equipment_category') {\n        if (lowerColumnName === 'id') return 80;\n        if (lowerColumnName === 'name') return 200;\n        if (lowerColumnName === 'description') return 300;\n        if (lowerColumnName === 'created_at') return 180;\n        return 200;\n      }\n      if (this.selectedTable === 'system_settings') {\n        if (lowerColumnName === 'id') return 80;\n        if (lowerColumnName === 'key') return 200;\n        if (lowerColumnName === 'value') return 400;\n        if (lowerColumnName === 'description') return 300;\n        return 200;\n      }\n\n      // 默认最小列宽\n      if (lowerColumnName.includes('content_html') || lowerColumnName.includes('html')) {\n        return 300;\n      } else if (lowerColumnName === 'id') {\n        return 80;\n      } else if (lowerColumnName.includes('date') || lowerColumnName.includes('time')) {\n        return 160;\n      } else {\n        return 120;\n      }\n    },\n    // 标准列宽（用于固定模式的表格）\n    getColumnWidth(columnName) {\n      const lowerColumnName = columnName.toLowerCase();\n\n      // 特殊表格特殊处理\n      if (this.selectedTable === 'email_logs' && lowerColumnName === 'content_html') {\n        return 500;\n      }\n\n      // 根据列名类型分配宽度\n      if (lowerColumnName.includes('content_html') || lowerColumnName.includes('html') || lowerColumnName.includes('content')) {\n        return 300;\n      } else if (lowerColumnName === 'id') {\n        return 80;\n      } else if (lowerColumnName.includes('date') || lowerColumnName.includes('time')) {\n        return 160;\n      } else if (lowerColumnName.includes('name')) {\n        return 120;\n      } else if (lowerColumnName.includes('code') || lowerColumnName.includes('number')) {\n        return 140;\n      } else if (lowerColumnName.includes('title')) {\n        return 120;\n      } else if (lowerColumnName.includes('email')) {\n        return 180;\n      } else if (lowerColumnName.includes('description') || lowerColumnName.includes('comment')) {\n        return 200;\n      } else if (lowerColumnName.includes('status')) {\n        return 120;\n      } else if (lowerColumnName.includes('password') || lowerColumnName.includes('hash')) {\n        return 250;\n      } else {\n        return 120;\n      }\n    },\n    // 格式化单元格内容\n    formatCell(row, column, cellValue) {\n      if (cellValue === null || cellValue === undefined) {\n        return '';\n      }\n\n      // 如果是HTML内容，只显示部分文本并添加提示\n      if (column.property.toLowerCase().includes('content_html') || column.property.toLowerCase().includes('html')) {\n        if (typeof cellValue === 'string' && cellValue.length > 100) {\n          return cellValue.substring(0, 100) + '...';\n        }\n      }\n\n      // 对日期时间格式化\n      if ((column.property.toLowerCase().includes('date') || column.property.toLowerCase().includes('time')) && !isNaN(Date.parse(cellValue))) {\n        try {\n          return new Date(cellValue).toLocaleString();\n        } catch (e) {\n          return cellValue;\n        }\n      }\n      return cellValue;\n    }\n  }\n};","map":{"version":3,"names":["getDbTables","getDbTableColumns","getDbTableRows","mapState","name","data","tables","selectedTable","columns","rows","total","page","pageSize","loading","inited","fieldComments","computed","user","state","isSuperAdmin","role","isSmallTable","smallTables","includes","created","console","log","mounted","initIfNeeded","$nextTick","forceShowScrollbars","updated","methods","$refs","tableScrollContainer","container","currentWidth","scrollWidth","clientWidth","querySelectorAll","length","style","width","columnsScrollContainer","scrollLeft","scrollRight","scrollColumnsLeft","scrollColumnsRight","fetchTables","res","handleTableSelect","e","error","$message","message","table","fetchTableColumns","fetchTableRows","map","col","column_name","type","type_name","nullable","undefined","nullable_","default","comment","skip","limit","handlePageChange","handleSizeChange","size","refreshTable","getFieldComment","fieldName","key","getColumnMinWidth","columnName","lowerColumnName","toLowerCase","getColumnWidth","formatCell","row","column","cellValue","property","substring","isNaN","Date","parse","toLocaleString"],"sources":["src/views/admin/DatabaseViewer.vue"],"sourcesContent":["<template>\r\n  <div class=\"db-viewer\" v-if=\"isSuperAdmin\">\r\n    <el-row>\r\n      <el-col :span=\"4\" class=\"db-tables-list\">\r\n        <el-card shadow=\"never\" style=\"height: 100%\">\r\n          <div slot=\"header\"><b>数据库表</b></div>\r\n          <el-scrollbar style=\"height: 70vh\">\r\n            <el-menu :default-active=\"selectedTable\" @select=\"handleTableSelect\">\r\n              <el-menu-item v-for=\"table in tables\" :key=\"table\" :index=\"table\">\r\n                {{ table }}\r\n              </el-menu-item>\r\n            </el-menu>\r\n          </el-scrollbar>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"20\" class=\"db-table-content\">\r\n        <el-card shadow=\"never\" style=\"min-height: 70vh\">\r\n          <div slot=\"header\" class=\"db-table-header\">\r\n            <span v-if=\"selectedTable\"><b>{{ selectedTable }}</b>（共 {{ total }} 条）</span>\r\n            <el-button v-if=\"selectedTable\" size=\"mini\" icon=\"el-icon-refresh\" @click=\"refreshTable\" style=\"float: right;\">刷新</el-button>\r\n          </div>\r\n          <div v-if=\"selectedTable\" class=\"table-container\">\r\n            <!-- 修改这里：添加一个独立的水平滚动容器 -->\r\n            <div class=\"horizontal-scroll-container\" ref=\"tableScrollContainer\">\r\n              <el-table \r\n                :data=\"rows\" \r\n                border \r\n                size=\"small\" \r\n                :table-layout=\"isSmallTable ? 'fixed' : 'auto'\"\r\n                style=\"width: 100%\" \r\n                :height=\"540\"\r\n                class=\"custom-table\"\r\n                highlight-current-row\r\n              >\r\n                <el-table-column\r\n                  v-for=\"col in columns\" \r\n                  :key=\"col.name\" \r\n                  :prop=\"col.name\" \r\n                  :label=\"col.name\" \r\n                  :width=\"isSmallTable ? getColumnWidth(col.name) : ''\"\r\n                  :min-width=\"isSmallTable ? '' : getColumnMinWidth(col.name)\"\r\n                  :formatter=\"formatCell\"\r\n                  show-overflow-tooltip\r\n                  header-align=\"center\"\r\n                  align=\"center\"\r\n                />\r\n              </el-table>\r\n              <!-- 添加滚动控制按钮 -->\r\n              <div class=\"scroll-controls\">\r\n                <button class=\"scroll-button\" @click=\"scrollLeft\">&lt;&lt; 向左滚动</button>\r\n                <button class=\"scroll-button\" @click=\"scrollRight\">向右滚动 &gt;&gt;</button>\r\n              </div>\r\n            </div>\r\n            <el-pagination\r\n              v-if=\"total > 0\"\r\n              background\r\n              layout=\"total, sizes, prev, pager, next, jumper\"\r\n              :current-page.sync=\"page\"\r\n              :page-size=\"pageSize\"\r\n              :page-sizes=\"[10, 20, 50, 100]\"\r\n              :pager-count=\"7\"\r\n              :total=\"total\"\r\n              @current-change=\"handlePageChange\"\r\n              @size-change=\"handleSizeChange\"\r\n              style=\"margin-top: 16px; text-align: right;\"\r\n            />\r\n            <div class=\"db-table-columns-info\" style=\"margin-top: 16px;\">\r\n              <b>字段信息：</b>\r\n              <!-- 修改这里：为字段信息表格也添加水平滚动容器 -->\r\n              <div class=\"horizontal-scroll-container\" ref=\"columnsScrollContainer\">\r\n                <el-table :data=\"columns\" border size=\"mini\" table-layout=\"fixed\" style=\"width: 100%; margin-top: 8px;\">\r\n                  <el-table-column prop=\"name\" label=\"字段名\" width=\"150\" />\r\n                  <el-table-column prop=\"type\" label=\"类型\" width=\"150\" />\r\n                  <el-table-column prop=\"nullable\" label=\"可空\" width=\"80\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-tag :type=\"scope.row.nullable ? 'info' : 'success'\">{{ scope.row.nullable ? '是' : '否' }}</el-tag>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column prop=\"comment\" label=\"注释\" min-width=\"250\">\r\n                    <template slot-scope=\"scope\">\r\n                      {{ getFieldComment(scope.row.name) }}\r\n                    </template>\r\n                  </el-table-column>\r\n                </el-table>\r\n                <!-- 字段信息表格的滚动控制按钮 -->\r\n                <div class=\"scroll-controls\">\r\n                  <button class=\"scroll-button\" @click=\"scrollColumnsLeft\">&lt;&lt; 向左滚动</button>\r\n                  <button class=\"scroll-button\" @click=\"scrollColumnsRight\">向右滚动 &gt;&gt;</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div v-else style=\"text-align:center; color:#888; padding: 60px 0;\">请选择左侧表名</div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n  <div v-else style=\"text-align:center; color:#888; padding: 60px 0;\">无权限，仅超级管理员可访问</div>\r\n</template>\r\n\r\n<script>\r\nimport { getDbTables, getDbTableColumns, getDbTableRows } from '@/api/dbAdmin'\r\nimport { mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'DatabaseViewer',\r\n  data() {\r\n    return {\r\n      tables: [],\r\n      selectedTable: '',\r\n      columns: [],\r\n      rows: [],\r\n      total: 0,\r\n      page: 1,\r\n      pageSize: 20,\r\n      loading: false,\r\n      inited: false,\r\n      // 表字段注释对照表\r\n      fieldComments: {\r\n        // admin表：系统管理员\r\n        'admin.id': '管理员唯一ID',\r\n        'admin.username': '管理员登录账号',\r\n        'admin.password_hash': '加密后的登录密码',\r\n        'admin.name': '管理员姓名',\r\n        'admin.role': '管理员角色（如superadmin）',\r\n        'admin.is_active': '账号是否激活（1激活，0禁用）',\r\n        'admin.created_at': '账号创建时间',\r\n\r\n        // email_logs表：系统邮件发送日志\r\n        'email_logs.id': '日志唯一ID',\r\n        'email_logs.recipient': '收件人邮箱',\r\n        'email_logs.subject': '邮件主题',\r\n        'email_logs.template_key': '邮件模板标识',\r\n        'email_logs.event_type': '触发邮件的事件类型',\r\n        'email_logs.status': '发送状态（如success/failed）',\r\n        'email_logs.error_message': '发送失败时的错误信息',\r\n        'email_logs.reservation_code': '关联预约的编码',\r\n        'email_logs.reservation_number': '关联预约的编号',\r\n        'email_logs.created_at': '日志创建时间',\r\n        'email_logs.content_html': '邮件HTML内容',\r\n\r\n        // email_settings表：邮件服务器配置\r\n        'email_settings.id': '配置唯一ID',\r\n        'email_settings.smtp_server': 'SMTP服务器地址',\r\n        'email_settings.smtp_port': 'SMTP服务器端口',\r\n        'email_settings.sender_email': '发件人邮箱',\r\n        'email_settings.sender_name': '发件人显示名称',\r\n        'email_settings.smtp_username': 'SMTP登录用户名',\r\n        'email_settings.smtp_password': 'SMTP登录密码',\r\n        'email_settings.use_ssl': '是否使用SSL加密（1是，0否）',\r\n        'email_settings.enabled': '配置是否启用（1启用，0禁用）',\r\n        'email_settings.created_at': '配置创建时间',\r\n        'email_settings.updated_at': '配置更新时间',\r\n\r\n        // email_templates表：邮件模板\r\n        'email_templates.id': '模板唯一ID',\r\n        'email_templates.name': '模板名称',\r\n        'email_templates.template_key': '模板标识（代码）',\r\n        'email_templates.subject': '邮件主题模板',\r\n        'email_templates.content_html': 'HTML格式邮件内容',\r\n        'email_templates.content_text': '纯文本邮件内容',\r\n        'email_templates.variables': '可用变量说明',\r\n        'email_templates.language': '模板语言',\r\n        'email_templates.created_at': '模板创建时间',\r\n        'email_templates.updated_at': '模板更新时间',\r\n\r\n        // equipment表：可预约设备\r\n        'equipment.id': '设备唯一ID',\r\n        'equipment.name': '设备名称',\r\n        'equipment.category': '设备类别名称',\r\n        'equipment.model': '设备型号',\r\n        'equipment.location': '设备存放位置',\r\n        'equipment.status': '设备状态（如可用/维修/借出）',\r\n        'equipment.description': '设备详细描述',\r\n        'equipment.image_path': '设备图片路径',\r\n        'equipment.user_guide': '设备使用说明',\r\n        'equipment.created_at': '设备信息创建时间',\r\n        'equipment.updated_at': '设备信息更新时间',\r\n        'equipment.video_tutorial': '设备视频教程地址',\r\n        'equipment.category_id': '设备类别ID',\r\n\r\n        // equipment_category表：设备类别\r\n        'equipment_category.id': '类别唯一ID',\r\n        'equipment_category.name': '类别名称',\r\n        'equipment_category.description': '类别描述',\r\n\r\n        // recurring_reservation表：周期性预约\r\n        'recurring_reservation.id': '周期预约唯一ID',\r\n        'recurring_reservation.equipment_id': '设备ID',\r\n        'recurring_reservation.pattern_type': '重复模式类型（如每周/每月）',\r\n        'recurring_reservation.days_of_week': '每周重复的星期（如1,3,5）',\r\n        'recurring_reservation.days_of_month': '每月重复的日期（如5,15,25）',\r\n        'recurring_reservation.start_date': '预约周期开始日期',\r\n        'recurring_reservation.end_date': '预约周期结束日期',\r\n        'recurring_reservation.start_time': '每天预约开始时间',\r\n        'recurring_reservation.end_time': '每天预约结束时间',\r\n        'recurring_reservation.user_name': '预约人姓名',\r\n        'recurring_reservation.user_department': '预约人部门',\r\n        'recurring_reservation.user_contact': '预约人联系方式',\r\n        'recurring_reservation.user_email': '预约人邮箱',\r\n        'recurring_reservation.purpose': '预约用途',\r\n        'recurring_reservation.status': '周期预约状态',\r\n        'recurring_reservation.created_at': '创建时间',\r\n        'recurring_reservation.reservation_code': '周期预约编码',\r\n\r\n        // reservation表：单次预约\r\n        'reservation.id': '预约唯一ID',\r\n        'reservation.equipment_id': '设备ID',\r\n        'reservation.reservation_code': '预约编码',\r\n        'reservation.user_name': '预约人姓名',\r\n        'reservation.user_department': '预约人部门',\r\n        'reservation.user_contact': '预约人联系方式',\r\n        'reservation.user_email': '预约人邮箱',\r\n        'reservation.start_datetime': '预约开始时间',\r\n        'reservation.end_datetime': '预约结束时间',\r\n        'reservation.purpose': '预约用途',\r\n        'reservation.status': '预约状态',\r\n        'reservation.created_at': '预约创建时间',\r\n        'reservation.recurring_reservation_id': '关联的周期预约ID',\r\n        'reservation.is_exception': '是否为周期预约的特例',\r\n        'reservation.reservation_number': '预约编号',\r\n\r\n        // system_settings表：系统设置\r\n        'system_settings.id': '设置唯一ID',\r\n        'system_settings.site_name': '系统站点名称',\r\n        'system_settings.maintenance_mode': '维护模式开关（1开启，0关闭）',\r\n        'system_settings.reservation_limit_per_day': '单日预约上限',\r\n        'system_settings.allow_equipment_conflict': '是否允许设备冲突预约（1允许，0不允许）',\r\n        'system_settings.advance_reservation_days': '可提前预约天数',\r\n        'system_settings.created_at': '设置创建时间',\r\n        'system_settings.updated_at': '设置更新时间'\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      user: state => state.user,\r\n    }),\r\n    isSuperAdmin() {\r\n      return this.user && this.user.role === 'superadmin'\r\n    },\r\n    // 判断是否为小表格（列少的表格）\r\n    isSmallTable() {\r\n      const smallTables = ['admin', 'equipment_category', 'system_settings'];\r\n      return !smallTables.includes(this.selectedTable);\r\n    }\r\n  },\r\n  created() {\r\n    console.log(\"DatabaseViewer 组件 created\")\r\n  },\r\n  mounted() {\r\n    console.log(\"DatabaseViewer 组件 mounted, 调用 initIfNeeded\")\r\n    this.initIfNeeded()\r\n    \r\n    // 强制显示滚动条的额外处理\r\n    this.$nextTick(() => {\r\n      this.forceShowScrollbars();\r\n    })\r\n  },\r\n  updated() {\r\n    // 当数据更新后，确保滚动条显示\r\n    this.$nextTick(() => {\r\n      this.forceShowScrollbars();\r\n    })\r\n  },\r\n  methods: {\r\n    // 添加新方法：强制显示滚动条\r\n    forceShowScrollbars() {\r\n      if (this.$refs.tableScrollContainer) {\r\n        const container = this.$refs.tableScrollContainer;\r\n        \r\n        // 临时添加内容强制显示滚动条\r\n        const currentWidth = container.scrollWidth;\r\n        if (currentWidth <= container.clientWidth) {\r\n          // 如果内容不需要滚动，强制内容宽度大于容器\r\n          const tables = container.querySelectorAll('.el-table');\r\n          if (tables && tables.length > 0) {\r\n            tables[0].style.width = (container.clientWidth + 100) + 'px';\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (this.$refs.columnsScrollContainer) {\r\n        const container = this.$refs.columnsScrollContainer;\r\n        const tables = container.querySelectorAll('.el-table');\r\n        if (tables && tables.length > 0 && tables[0].scrollWidth <= container.clientWidth) {\r\n          tables[0].style.width = (container.clientWidth + 100) + 'px';\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 添加滚动控制方法\r\n    scrollLeft() {\r\n      if (this.$refs.tableScrollContainer) {\r\n        this.$refs.tableScrollContainer.scrollLeft -= 200;\r\n      }\r\n    },\r\n    \r\n    scrollRight() {\r\n      if (this.$refs.tableScrollContainer) {\r\n        this.$refs.tableScrollContainer.scrollLeft += 200;\r\n      }\r\n    },\r\n    \r\n    scrollColumnsLeft() {\r\n      if (this.$refs.columnsScrollContainer) {\r\n        this.$refs.columnsScrollContainer.scrollLeft -= 200;\r\n      }\r\n    },\r\n    \r\n    scrollColumnsRight() {\r\n      if (this.$refs.columnsScrollContainer) {\r\n        this.$refs.columnsScrollContainer.scrollLeft += 200;\r\n      }\r\n    },\r\n    \r\n    async initIfNeeded() {\r\n      console.log(\"initIfNeeded 被调用，inited=\", this.inited, \"isSuperAdmin=\", this.isSuperAdmin)\r\n      if (!this.inited && this.isSuperAdmin) {\r\n        this.inited = true\r\n        await this.fetchTables()\r\n      }\r\n    },\r\n    async fetchTables() {\r\n      console.log(\"开始获取数据库表名...\")\r\n      try {\r\n        console.log(\"调用 getDbTables()\")\r\n        const res = await getDbTables()\r\n        console.log(\"获取表名结果:\", res)\r\n        this.tables = res.data.tables || []\r\n        if (this.tables.length > 0) {\r\n          this.handleTableSelect(this.tables[0])\r\n        }\r\n      } catch (e) {\r\n        console.error(\"获取表名失败:\", e)\r\n        this.$message.error('获取表名失败: ' + (e.message || e))\r\n      }\r\n    },\r\n    async handleTableSelect(table) {\r\n      this.selectedTable = table\r\n      this.page = 1\r\n      await this.fetchTableColumns()\r\n      await this.fetchTableRows()\r\n      \r\n      // 添加这一行，确保表格更新后强制显示滚动条\r\n      this.$nextTick(() => {\r\n        this.forceShowScrollbars();\r\n      })\r\n    },\r\n    async fetchTableColumns() {\r\n      try {\r\n        const res = await getDbTableColumns(this.selectedTable)\r\n        // 兼容不同数据库字段名\r\n        this.columns = (res.data.columns || []).map(col => ({\r\n          name: col.name || col.column_name,\r\n          type: col.type || col.type_name,\r\n          nullable: col.nullable !== undefined ? col.nullable : col.nullable_,\r\n          default: col.default,\r\n          comment: col.comment || ''\r\n        }))\r\n      } catch (e) {\r\n        this.columns = []\r\n        this.$message.error('获取字段信息失败')\r\n      }\r\n    },\r\n    async fetchTableRows() {\r\n      this.loading = true\r\n      try {\r\n        const res = await getDbTableRows(this.selectedTable, {\r\n          skip: (this.page - 1) * this.pageSize,\r\n          limit: this.pageSize,\r\n        })\r\n        this.rows = res.data.rows || []\r\n        \r\n        // 使用后端返回的总行数\r\n        if (res.data.total !== undefined) {\r\n          this.total = res.data.total;\r\n        } else {\r\n          // 兼容旧版API，如果后端没有返回总行数，则使用简单估算\r\n          if (this.rows.length < this.pageSize) {\r\n            // 当前页不满，可能是最后一页\r\n            this.total = (this.page - 1) * this.pageSize + this.rows.length;\r\n          } else {\r\n            // 当前页是满的，假设至少还有一页\r\n            this.total = this.page * this.pageSize + this.pageSize;\r\n          }\r\n        }\r\n      } catch (e) {\r\n        this.rows = []\r\n        this.$message.error('获取表数据失败')\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    handlePageChange(page) {\r\n      this.page = page\r\n      this.fetchTableRows()\r\n    },\r\n    handleSizeChange(size) {\r\n      this.pageSize = size\r\n      this.page = 1\r\n      this.fetchTableRows()\r\n    },\r\n    refreshTable() {\r\n      this.fetchTableColumns()\r\n      this.fetchTableRows()\r\n    },\r\n    // 获取字段注释 - 简化版本\r\n    getFieldComment(fieldName) {\r\n      const key = `${this.selectedTable}.${fieldName}`;\r\n      return this.fieldComments[key] || '暂无注释';\r\n    },\r\n    // 获取最小列宽（用于自适应模式的表格）\r\n    getColumnMinWidth(columnName) {\r\n      const lowerColumnName = columnName.toLowerCase();\r\n      \r\n      // 针对特定表格中的特定列进行特殊处理\r\n      if (this.selectedTable === 'admin') {\r\n        if (lowerColumnName === 'id') return 80;\r\n        if (lowerColumnName === 'username') return 150;\r\n        if (lowerColumnName === 'password_hash') return 300;\r\n        if (lowerColumnName === 'name') return 150;\r\n        if (lowerColumnName === 'role') return 120;\r\n        if (lowerColumnName === 'is_active') return 100;\r\n        if (lowerColumnName === 'created_at') return 180;\r\n        return 150;\r\n      }\r\n      \r\n      if (this.selectedTable === 'equipment_category') {\r\n        if (lowerColumnName === 'id') return 80;\r\n        if (lowerColumnName === 'name') return 200;\r\n        if (lowerColumnName === 'description') return 300;\r\n        if (lowerColumnName === 'created_at') return 180;\r\n        return 200;\r\n      }\r\n      \r\n      if (this.selectedTable === 'system_settings') {\r\n        if (lowerColumnName === 'id') return 80;\r\n        if (lowerColumnName === 'key') return 200;\r\n        if (lowerColumnName === 'value') return 400;\r\n        if (lowerColumnName === 'description') return 300;\r\n        return 200;\r\n      }\r\n      \r\n      // 默认最小列宽\r\n      if (lowerColumnName.includes('content_html') || lowerColumnName.includes('html')) {\r\n        return 300;\r\n      } else if (lowerColumnName === 'id') {\r\n        return 80;\r\n      } else if (lowerColumnName.includes('date') || lowerColumnName.includes('time')) {\r\n        return 160;\r\n      } else {\r\n        return 120;\r\n      }\r\n    },\r\n    \r\n    // 标准列宽（用于固定模式的表格）\r\n    getColumnWidth(columnName) {\r\n      const lowerColumnName = columnName.toLowerCase();\r\n      \r\n      // 特殊表格特殊处理\r\n      if (this.selectedTable === 'email_logs' && lowerColumnName === 'content_html') {\r\n        return 500;\r\n      }\r\n      \r\n      // 根据列名类型分配宽度\r\n      if (lowerColumnName.includes('content_html') || lowerColumnName.includes('html') || lowerColumnName.includes('content')) {\r\n        return 300;\r\n      } else if (lowerColumnName === 'id') {\r\n        return 80;\r\n      } else if (lowerColumnName.includes('date') || lowerColumnName.includes('time')) {\r\n        return 160;\r\n      } else if (lowerColumnName.includes('name')) {\r\n        return 120;\r\n      } else if (lowerColumnName.includes('code') || lowerColumnName.includes('number')) {\r\n        return 140;\r\n      } else if (lowerColumnName.includes('title')) {\r\n        return 120;\r\n      } else if (lowerColumnName.includes('email')) {\r\n        return 180;\r\n      } else if (lowerColumnName.includes('description') || lowerColumnName.includes('comment')) {\r\n        return 200;\r\n      } else if (lowerColumnName.includes('status')) {\r\n        return 120;\r\n      } else if (lowerColumnName.includes('password') || lowerColumnName.includes('hash')) {\r\n        return 250;\r\n      } else {\r\n        return 120;\r\n      }\r\n    },\r\n    \r\n    // 格式化单元格内容\r\n    formatCell(row, column, cellValue) {\r\n      if (cellValue === null || cellValue === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 如果是HTML内容，只显示部分文本并添加提示\r\n      if (column.property.toLowerCase().includes('content_html') || column.property.toLowerCase().includes('html')) {\r\n        if (typeof cellValue === 'string' && cellValue.length > 100) {\r\n          return cellValue.substring(0, 100) + '...';\r\n        }\r\n      }\r\n      \r\n      // 对日期时间格式化\r\n      if ((column.property.toLowerCase().includes('date') || column.property.toLowerCase().includes('time')) && \r\n          !isNaN(Date.parse(cellValue))) {\r\n        try {\r\n          return new Date(cellValue).toLocaleString();\r\n        } catch (e) {\r\n          return cellValue;\r\n        }\r\n      }\r\n      \r\n      return cellValue;\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n.db-viewer {\r\n  padding: 24px;\r\n}\r\n.db-tables-list {\r\n  border-right: 1px solid #eee;\r\n  min-height: 70vh;\r\n}\r\n.db-table-content {\r\n  padding-left: 24px;\r\n}\r\n.db-table-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n.table-container {\r\n  position: relative;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n/* 修改水平滚动容器样式，确保滚动条始终显示 */\r\n.horizontal-scroll-container {\r\n  width: 100%;\r\n  overflow-x: scroll !important; /* 改为scroll，强制始终显示滚动条 */\r\n  overflow-y: hidden;\r\n  border: 1px solid #ebeef5;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  position: relative;\r\n  margin-bottom: 5px;\r\n  /* 添加内边距，确保内容不被滚动条遮挡 */\r\n  padding-bottom: 15px;\r\n}\r\n\r\n/* 滚动提示样式调整 */\r\n.horizontal-scroll-container::after {\r\n  content: '← 左右滑动可查看更多数据 →';\r\n  position: absolute;\r\n  bottom: 5px;\r\n  right: 10px;\r\n  font-size: 12px;\r\n  color: #409EFF; /* 使用Element UI主色调，更加醒目 */\r\n  background: rgba(255,255,255,0.9);\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n  opacity: 0.9;\r\n  z-index: 100;\r\n}\r\n\r\n/* 滚动条样式强化，确保在各种浏览器中可见 */\r\n::-webkit-scrollbar {\r\n  width: 14px !important;\r\n  height: 14px !important;\r\n  background-color: #f5f7fa !important;\r\n  display: block !important; /* 强制显示 */\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background-color: #409EFF !important; /* 使用Element UI主色调 */\r\n  border-radius: 7px !important;\r\n  border: 3px solid #f5f7fa !important;\r\n  min-height: 40px !important;\r\n  min-width: 40px !important;\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n  background-color: #337ecc !important;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n  background-color: #f5f7fa !important;\r\n  border-radius: 7px !重要;\r\n  display: block !重要;\r\n}\r\n\r\n::-webkit-scrollbar-corner {\r\n  background-color: #f5f7fa !重要;\r\n}\r\n\r\n/* Firefox滚动条样式 */\r\n.horizontal-scroll-container {\r\n  scrollbar-width: auto !important; /* 'auto'或'thin'或'none' */\r\n  scrollbar-color: #409EFF #f5f7fa !important; /* 滑块和轨道颜色 */\r\n}\r\n\r\n/* 强制表格显示滚动条 */\r\n.el-table__body-wrapper {\r\n  overflow: auto !important;\r\n}\r\n\r\n/* 针对Edge/IE浏览器的滚动条设置 */\r\n@supports (-ms-overflow-style: none) {\r\n  .horizontal-scroll-container {\r\n    -ms-overflow-style: auto !important;\r\n    scrollbar-width: auto !important;\r\n  }\r\n}\r\n\r\n/* 表格样式优化 */\r\n.el-table__header th {\r\n  background-color: #f5f7fa !important;\r\n  color: #606266 !important;\r\n  font-weight: bold !important;\r\n  padding: 8px 0 !important;\r\n  white-space: nowrap;\r\n}\r\n\r\n/* 确保单元格内容不换行，允许水平滚动 */\r\n.el-table .cell {\r\n  white-space: nowrap !important;\r\n}\r\n\r\n/* 修复行高问题 */\r\n.el-table__row {\r\n  height: auto !important;\r\n}\r\n\r\n/* 修改tooltip样式 */\r\n.el-tooltip__popper {\r\n  max-width: 400px !important;\r\n  white-space: pre-wrap !important;\r\n  word-break: break-word !important;\r\n}\r\n\r\n/* 改进分页器外观 */\r\n.el-pagination {\r\n  padding: 16px 6px !important;\r\n  background-color: #f9f9f9 !important;\r\n  border-radius: 4px !important;\r\n}\r\n\r\n/* 字段信息表样式 */\r\n.db-table-columns-info .el-table {\r\n  margin-top: 10px !important;\r\n}\r\n.db-table-columns-info .el-table__header th {\r\n  background-color: #f5f7fa !important;\r\n  color: #606266 !important;\r\n  padding: 8px !important;\r\n}\r\n.db-table-columns-info .el-table__cell {\r\n  padding: 8px !important;\r\n}\r\n\r\n/* 添加滚动控制按钮样式 */\r\n.scroll-controls {\r\n  position: absolute;\r\n  bottom: 5px;\r\n  left: 10px;\r\n  z-index: 101;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n.scroll-button {\r\n  background: #409EFF;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 2px 10px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n  opacity: 0.8;\r\n}\r\n.scroll-button:hover {\r\n  opacity: 1;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}