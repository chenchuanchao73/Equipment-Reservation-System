{"ast":null,"code":"import { equipmentApi, reservationApi } from '@/api';\nimport axios from 'axios';\nexport default {\n  name: 'ReservationForm',\n  computed: {\n    // 获取完整的图片URL\n    baseUrl() {\n      return axios.defaults.baseURL || 'http://localhost:8000';\n    }\n  },\n  data() {\n    // 表单验证规则\n    const validateTime = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(this.$t('reservation.requiredField')));\n      } else if (this.form.startDateTime && this.form.endDateTime) {\n        if (this.form.startDateTime >= this.form.endDateTime) {\n          callback(new Error(this.$t('reservation.invalidTime')));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n    const validateEmail = (rule, value, callback) => {\n      if (!value) {\n        callback();\n      } else {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(value)) {\n          callback(new Error(this.$t('reservation.emailFormat')));\n        } else {\n          callback();\n        }\n      }\n    };\n    return {\n      loading: true,\n      equipment: null,\n      submitting: false,\n      timeConflict: false,\n      successDialogVisible: false,\n      reservationCode: '',\n      qrcodeUrl: null,\n      // 二维码功能已移除\n\n      // 表单数据\n      form: {\n        reservationType: 'single',\n        startDateTime: null,\n        endDateTime: null,\n        userName: '',\n        userDepartment: '',\n        userContact: '',\n        userEmail: '',\n        purpose: ''\n      },\n      // 表单验证规则\n      rules: {\n        startDateTime: [{\n          required: true,\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        endDateTime: [{\n          required: true,\n          validator: validateTime,\n          trigger: 'change'\n        }],\n        userName: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 50,\n          message: this.$t('reservation.nameLength'),\n          trigger: 'blur'\n        }],\n        userDepartment: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }],\n        userContact: [{\n          required: true,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }],\n        userEmail: [{\n          validator: validateEmail,\n          trigger: 'blur'\n        }]\n      },\n      // 日期选择器配置\n      startPickerOptions: {\n        disabledDate: time => {\n          return time.getTime() < Date.now() - 8.64e7; // 禁用过去的日期\n        }\n      },\n      endPickerOptions: {\n        disabledDate: time => {\n          if (!this.form.startDateTime) {\n            return time.getTime() < Date.now() - 8.64e7; // 如果没有选择开始时间，禁用过去的日期\n          }\n          return time.getTime() < this.form.startDateTime.getTime(); // 禁用早于开始时间的日期\n        }\n      }\n    };\n  },\n  created() {\n    this.fetchEquipment();\n  },\n  methods: {\n    // 获取设备信息\n    async fetchEquipment() {\n      this.loading = true;\n      try {\n        const equipmentId = this.$route.params.id;\n        const response = await equipmentApi.getEquipment(equipmentId);\n        this.equipment = response.data;\n        if (this.equipment.status !== 'available') {\n          this.$message.warning(this.$t('equipment.notAvailable'));\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment:', error);\n        this.$message.error(this.$t('common.error'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 检查时间可用性\n    async checkTimeAvailability() {\n      if (!this.form.startDateTime || !this.form.endDateTime) {\n        return;\n      }\n      try {\n        const equipmentId = this.equipment.id;\n        const startDate = this.formatDateTime(this.form.startDateTime);\n        const endDate = this.formatDateTime(this.form.endDateTime);\n        const response = await equipmentApi.getAvailability(equipmentId, startDate, endDate);\n\n        // 检查是否有冲突\n        this.timeConflict = response.data.available.includes(false);\n      } catch (error) {\n        console.error('Failed to check availability:', error);\n        this.timeConflict = true;\n      }\n    },\n    // 处理预约类型变更\n    handleReservationTypeChange(value) {\n      if (value === 'recurring') {\n        this.$message.info(this.$t('reservation.recurringNotSupported'));\n        this.form.reservationType = 'single';\n      }\n    },\n    // 格式化日期时间\n    formatDateTime(date) {\n      if (!date) return null;\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:00`;\n    },\n    // 提交表单\n    submitForm() {\n      this.$refs.reservationForm.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        this.submitting = true;\n        try {\n          const reservationData = {\n            equipment_id: this.equipment.id,\n            user_name: this.form.userName,\n            user_department: this.form.userDepartment,\n            user_contact: this.form.userContact,\n            user_email: this.form.userEmail || undefined,\n            start_datetime: this.formatDateTime(this.form.startDateTime),\n            end_datetime: this.formatDateTime(this.form.endDateTime),\n            purpose: this.form.purpose || undefined,\n            lang: this.$i18n.locale\n          };\n          const response = await reservationApi.createReservation(reservationData);\n          if (response.data.success) {\n            this.reservationCode = response.data.data.reservation_code;\n            this.successDialogVisible = true;\n            this.$refs.reservationForm.resetFields();\n          } else {\n            this.$message.error(response.data.message || this.$t('reservation.createFailed'));\n          }\n        } catch (error) {\n          console.error('Failed to create reservation:', error);\n          this.$message.error(this.$t('reservation.createFailed'));\n        } finally {\n          this.submitting = false;\n        }\n      });\n    },\n    // 重置表单\n    resetForm() {\n      this.$refs.reservationForm.resetFields();\n      this.timeConflict = false;\n    },\n    // 查看预定详情\n    viewReservation() {\n      this.$router.push(`/reservation/${this.reservationCode}`);\n    },\n    // 关闭成功对话框\n    closeSuccessDialog() {\n      this.successDialogVisible = false;\n      this.$router.push('/equipment');\n    },\n    // 获取完整图片URL\n    getFullImageUrl(url) {\n      if (!url) return '';\n\n      // 如果已经是完整URL，直接返回\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        return url;\n      }\n\n      // 否则拼接基础URL\n      return `${this.baseUrl}${url}`;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}