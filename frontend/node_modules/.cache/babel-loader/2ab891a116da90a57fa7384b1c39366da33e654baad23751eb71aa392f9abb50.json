{"ast":null,"code":"import { reservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'AdminReservation',\n  data() {\n    return {\n      loading: false,\n      reservations: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 10,\n      filter: {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      },\n      // 添加一个保存页面状态的变量\n      savedState: null\n    };\n  },\n  created() {\n    // 检查是否有保存的状态并恢复它\n    this.restoreState();\n  },\n  // 添加activated钩子函数，在组件被激活时调用（如从预定详情页面返回）\n  activated() {\n    // 检查是否需要强制刷新\n    const forceRefresh = localStorage.getItem('force_refresh_reservation_list');\n    if (forceRefresh === 'true') {\n      console.log('检测到强制刷新标记，重新获取数据');\n      localStorage.removeItem('force_refresh_reservation_list');\n      this.fetchData();\n      return;\n    }\n\n    // 当从其他页面返回时，尝试恢复状态\n    this.restoreState();\n    // 检查预约状态更新\n    this.checkReservationUpdates();\n  },\n  // 添加deactivated钩子函数，在组件被停用时调用（如进入预定详情页面）\n  deactivated() {\n    // 保存当前页面状态\n    this.saveState();\n  },\n  // 添加beforeRouteLeave导航守卫，在离开组件时调用\n  beforeRouteLeave(to, from, next) {\n    // 如果是跳转到预定详情页面，保存状态\n    if (to.path.includes('/admin/reservation/') && to.path !== '/admin/reservation') {\n      this.saveState();\n    }\n    next();\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true;\n      console.log('Fetching data with filter:', this.filter);\n      console.log('Current page:', this.currentPage);\n      try {\n        // 添加时间戳参数，确保每次都获取最新数据\n        const timestamp = new Date().getTime();\n        console.log('添加时间戳参数:', timestamp);\n        const params = {\n          skip: (this.currentPage - 1) * this.pageSize,\n          // 将页码转换为skip参数\n          limit: this.pageSize,\n          reservation_code: this.filter.code || undefined,\n          user_name: this.filter.userName || undefined,\n          _t: timestamp // 添加时间戳，防止缓存\n        };\n\n        // 添加日期范围过滤\n        if (this.filter.dateRange && this.filter.dateRange.length === 2) {\n          params.from_date = this.filter.dateRange[0];\n          params.to_date = this.filter.dateRange[1];\n        }\n\n        // 处理不同的状态筛选\n        if (this.filter.status) {\n          console.log('Filtering by status:', this.filter.status);\n          if (this.filter.status === 'in_use' || this.filter.status === 'expired') {\n            // 这些状态需要特殊处理，因为后端没有这些细分状态\n            // 我们获取所有已确认的预约，然后在前端筛选\n            params.status = 'confirmed';\n            console.log(`Setting status parameter to \"confirmed\" for ${this.filter.status} filter`);\n          } else if (this.filter.status === 'confirmed') {\n            // 对于已确认状态，我们需要获取所有已确认的预约，然后在前端筛选出未开始的预约\n            params.status = 'confirmed';\n            console.log(`Setting status parameter to \"confirmed\" for confirmed filter`);\n          } else if (this.filter.status === 'cancelled') {\n            // 对于已取消状态，直接从后端获取\n            params.status = 'cancelled';\n            console.log(`Setting status parameter to \"cancelled\" for cancelled filter`);\n          } else {\n            // 其他状态直接传递给后端\n            params.status = this.filter.status;\n            console.log(`Setting status parameter to \"${this.filter.status}\"`);\n          }\n        }\n        console.log('Fetching reservations with params:', params);\n        const response = await reservationApi.getReservations(params);\n        console.log('API Response:', response);\n        let reservations = response.data.items || [];\n        console.log('Received reservations:', reservations);\n\n        // 如果选择了特殊状态，需要在前端进行筛选\n        if (this.filter.status === 'in_use') {\n          // 筛选出\"使用中\"的预约\n          const now = new Date();\n          console.log('筛选\"使用中\"的预约，当前时间:', now);\n\n          // 记录筛选前的预约数量\n          console.log('筛选前的预约数量:', reservations.length);\n\n          // 筛选\"使用中\"的预约\n          reservations = reservations.filter(reservation => {\n            // 如果预约已取消，不应该显示为\"使用中\"\n            if (reservation.status === 'cancelled') {\n              return false;\n            }\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            const isInUse = now >= start && now <= end;\n\n            // 记录每个预约的筛选结果\n            console.log(`预约ID=${reservation.id}, 开始时间=${start}, 结束时间=${end}, 是否使用中=${isInUse}`);\n            return isInUse;\n          });\n\n          // 记录筛选后的预约数量\n          console.log('筛选后的\"使用中\"预约数量:', reservations.length);\n        } else if (this.filter.status === 'expired') {\n          // 筛选出\"已过期\"的预约\n          const now = new Date();\n          console.log('筛选\"已过期\"的预约，当前时间:', now);\n\n          // 记录筛选前的预约数量\n          console.log('筛选前的预约数量:', reservations.length);\n\n          // 筛选\"已过期\"的预约\n          reservations = reservations.filter(reservation => {\n            // 如果预约已取消，不应该显示为\"已过期\"\n            if (reservation.status === 'cancelled') {\n              return false;\n            }\n            const end = new Date(reservation.end_datetime);\n            const isExpired = now > end;\n\n            // 记录每个预约的筛选结果\n            console.log(`预约ID=${reservation.id}, 结束时间=${end}, 是否已过期=${isExpired}`);\n            return isExpired;\n          });\n\n          // 记录筛选后的\"已过期\"预约数量\n          console.log('筛选后的\"已过期\"预约数量:', reservations.length);\n        } else if (this.filter.status === 'confirmed') {\n          // 筛选出真正的\"已确认\"预约（未开始的预约）\n          const now = new Date();\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime);\n            // 未开始且未过期\n            return start > now && !isReservationExpired(reservation.end_datetime);\n          });\n        }\n        console.log('Filtered reservations:', reservations);\n        this.reservations = reservations;\n\n        // 如果是特殊状态，总数需要重新计算\n        if (this.filter.status === 'in_use' || this.filter.status === 'expired' || this.filter.status === 'confirmed' || this.filter.status === 'cancelled') {\n          // 对于特殊状态，我们需要获取所有页的数据来计算总数\n          // 这里我们先使用当前页的数据计算一个临时总数\n          this.total = reservations.length;\n          console.log(`Temporary total based on current page: ${this.total}`);\n\n          // 无论当前页是否有数据，都获取所有数据来计算真实总数\n          this.fetchTotalForSpecialStatus();\n        } else {\n          this.total = response.data.total;\n          console.log(`Total from API response: ${this.total}`);\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservations:', error);\n        this.$message.error(this.$t('error.serverError'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    formatDateTime(_row, _column, cellValue) {\n      if (!cellValue) return '';\n      const date = new Date(cellValue);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning';\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return 'primary';\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // \"已确认\"状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success';\n    },\n    getStatusText(reservation) {\n      // 如果预约已取消，显示\"已取消\"\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.statusCancelled');\n      }\n\n      // 如果预约已过期，显示\"已过期\"\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.statusExpired');\n      }\n\n      // 如果预约正在进行中，显示\"使用中\"\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return this.$t('reservation.statusInUse');\n      }\n\n      // 如果预约已确认且未开始，显示\"已确认\"\n      // \"已确认\"状态出现在预约被管理员批准，但还未开始使用的情况\n      return this.$t('reservation.statusConfirmed');\n    },\n    handleFilterChange() {\n      this.currentPage = 1;\n      this.fetchData();\n    },\n    resetFilter() {\n      this.filter = {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      };\n      this.handleFilterChange();\n    },\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.fetchData();\n    },\n    viewReservation(reservation) {\n      // 计算当前预约的实际状态文本和类型\n      const statusText = this.getStatusText(reservation);\n      const statusType = this.getStatusType(reservation);\n      console.log('计算的状态信息:', {\n        statusText,\n        statusType,\n        dbStatus: reservation.status,\n        startTime: reservation.start_datetime,\n        endTime: reservation.end_datetime,\n        reservationNumber: reservation.reservation_number\n      });\n\n      // 构建URL，添加预约码、时间参数、预约序号和计算好的状态信息\n      const url = {\n        path: `/admin/reservation/${reservation.reservation_code}`,\n        query: {\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime,\n          displayStatus: statusText,\n          displayStatusType: statusType,\n          reservationNumber: reservation.reservation_number // 添加预约序号参数\n        }\n      };\n\n      // 将预约序号保存到localStorage，以便在页面刷新后仍然可以使用\n      if (reservation.reservation_number) {\n        localStorage.setItem('current_reservation_number', reservation.reservation_number);\n        console.log('保存预约序号到localStorage:', reservation.reservation_number);\n      }\n      this.$router.push(url);\n    },\n    // 获取特殊状态的总记录数并更新当前页面的预约列表\n    async fetchTotalForSpecialStatus() {\n      try {\n        console.log('Fetching total for special status:', this.filter.status);\n        console.log('Current page before fetchTotal:', this.currentPage);\n\n        // 保存当前页码，以便后续恢复\n        const savedCurrentPage = this.currentPage;\n\n        // 添加时间戳参数，确保每次都获取最新数据\n        const timestamp = new Date().getTime();\n        console.log('添加时间戳参数:', timestamp);\n\n        // 构建查询参数，不包含分页参数\n        const params = {\n          // 不设置limit，获取所有记录\n          limit: 1000,\n          // 设置一个较大的值以获取尽可能多的记录\n          skip: 0,\n          reservation_code: this.filter.code || undefined,\n          // 使用reservation_code而不是code\n          user_name: this.filter.userName || undefined,\n          _t: timestamp // 添加时间戳，防止缓存\n        };\n\n        // 添加日期范围过滤\n        if (this.filter.dateRange && this.filter.dateRange.length === 2) {\n          params.from_date = this.filter.dateRange[0];\n          params.to_date = this.filter.dateRange[1];\n        }\n\n        // 获取所有状态的预约（confirmed 和 cancelled）\n        const confirmedParams = {\n          ...params,\n          status: 'confirmed'\n        };\n        const cancelledParams = {\n          ...params,\n          status: 'cancelled'\n        };\n        console.log('Fetching all reservations for filtering');\n        const confirmedResponse = await reservationApi.getReservations(confirmedParams);\n        const cancelledResponse = await reservationApi.getReservations(cancelledParams);\n\n        // 合并结果\n        let allReservations = [...(confirmedResponse.data.items || []), ...(cancelledResponse.data.items || [])];\n        console.log(`Total reservations before filtering: ${allReservations.length}`);\n        const now = new Date();\n        console.log(`当前日期: ${now}`);\n\n        // 根据不同状态筛选\n        if (this.filter.status === 'expired') {\n          // 筛选出\"已过期\"的预约 (已结束且未取消的预约)\n          console.log('筛选\"已过期\"的预约，当前时间:', now);\n          console.log('筛选前的预约数量:', allReservations.length);\n          allReservations = allReservations.filter(reservation => {\n            // 如果预约已取消，不应该显示为\"已过期\"\n            if (reservation.status === 'cancelled') {\n              console.log(`预约ID=${reservation.id} 已取消，不显示为已过期`);\n              return false;\n            }\n\n            // 检查预约是否已过期（结束时间早于当前时间）\n            const end = new Date(reservation.end_datetime);\n            const isExpired = now > end;\n            console.log(`检查预约是否过期: ID=${reservation.id}, 结束时间=${end}, 是否过期=${isExpired}, 状态=${reservation.status}`);\n            return isExpired;\n          });\n          console.log(`过滤后的过期预约数量: ${allReservations.length}`);\n        } else if (this.filter.status === 'in_use') {\n          // 筛选出\"使用中\"的预约 (已开始、未结束、未取消的预约)\n          allReservations = allReservations.filter(reservation => {\n            // 只检查确认状态的预约是否使用中\n            if (reservation.status !== 'confirmed') {\n              return false;\n            }\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            const isInUse = now >= start && now <= end;\n            console.log(`检查预约是否使用中: ID=${reservation.id}, 开始时间=${start}, 结束时间=${end}, 是否使用中=${isInUse}, 状态=${reservation.status}`);\n            return isInUse;\n          });\n          console.log(`过滤后的使用中预约数量: ${allReservations.length}`);\n        } else if (this.filter.status === 'confirmed') {\n          // 筛选出真正的\"已确认\"预约（未开始且未过期的预约）\n          allReservations = allReservations.filter(reservation => {\n            if (reservation.status !== 'confirmed') {\n              return false;\n            }\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            const isConfirmed = start > now && end > now;\n            console.log(`检查预约是否已确认: ID=${reservation.id}, 开始时间=${start}, 是否已确认=${isConfirmed}, 状态=${reservation.status}`);\n            return isConfirmed;\n          });\n          console.log(`过滤后的已确认预约数量: ${allReservations.length}`);\n        } else if (this.filter.status === 'cancelled') {\n          // 对于\"已取消\"状态，直接筛选取消状态的预约\n          allReservations = allReservations.filter(reservation => {\n            return reservation.status === 'cancelled';\n          });\n          console.log(`过滤后的已取消预约数量: ${allReservations.length}`);\n        }\n\n        // 更新总数\n        this.total = allReservations.length;\n        console.log(`Updated total to: ${this.total}`);\n\n        // 对筛选后的结果进行排序\n        if (this.filter.status === 'expired') {\n          // 对于已过期，按结束时间倒序排列\n          allReservations.sort((a, b) => new Date(b.end_datetime) - new Date(a.end_datetime));\n        } else if (this.filter.status === 'in_use') {\n          // 对于使用中，按开始时间倒序排列\n          allReservations.sort((a, b) => new Date(b.start_datetime) - new Date(a.start_datetime));\n        } else if (this.filter.status === 'confirmed') {\n          // 对于已确认，按开始时间升序排列\n          allReservations.sort((a, b) => new Date(a.start_datetime) - new Date(b.start_datetime));\n        } else if (this.filter.status === 'cancelled') {\n          // 对于已取消，按结束时间倒序排列\n          allReservations.sort((a, b) => new Date(b.end_datetime) - new Date(a.end_datetime));\n        }\n\n        // 计算当前页应该显示的预约\n        const maxPage = Math.ceil(allReservations.length / this.pageSize) || 1;\n\n        // 确保页码不超过最大页数\n        const targetPage = Math.min(savedCurrentPage, maxPage);\n        console.log(`计算页数: 总记录数=${allReservations.length}, 每页记录数=${this.pageSize}, 最大页数=${maxPage}, 目标页码=${targetPage}`);\n        const startIndex = (targetPage - 1) * this.pageSize;\n        const endIndex = Math.min(startIndex + this.pageSize, allReservations.length);\n        const currentPageReservations = allReservations.slice(startIndex, endIndex);\n        console.log(`当前页数据范围: 开始索引=${startIndex}, 结束索引=${endIndex}, 当前页记录数=${currentPageReservations.length}`);\n\n        // 更新当前页面的预约列表\n        if (currentPageReservations.length > 0) {\n          // 先更新数据\n          this.reservations = currentPageReservations;\n          // 然后更新页码，避免触发不必要的重新获取数据\n          if (this.currentPage !== targetPage) {\n            console.log(`更新页码: 从 ${this.currentPage} 到 ${targetPage}`);\n            this.$nextTick(() => {\n              this.currentPage = targetPage;\n            });\n          }\n          console.log(`更新当前页面的预约列表: ${this.reservations.length} 条记录`);\n        } else if (allReservations.length > 0) {\n          // 如果当前页没有数据但总数据不为空，自动回到第一页\n          console.log(`当前页没有数据，回到第一页`);\n          this.reservations = allReservations.slice(0, this.pageSize);\n          if (this.currentPage !== 1) {\n            this.$nextTick(() => {\n              this.currentPage = 1;\n            });\n          }\n        } else {\n          // 如果没有找到任何预约\n          this.reservations = [];\n          console.log('没有找到符合条件的预约');\n        }\n        console.log('Current page after fetchTotal:', this.currentPage);\n      } catch (error) {\n        console.error('Failed to fetch total for special status:', error);\n      }\n    },\n    // 保存当前页面状态\n    saveState() {\n      this.savedState = {\n        filter: {\n          ...this.filter\n        },\n        currentPage: this.currentPage\n      };\n      console.log('Saved state:', this.savedState);\n    },\n    // 恢复保存的页面状态\n    restoreState() {\n      if (this.savedState) {\n        this.filter = {\n          ...this.savedState.filter\n        };\n        this.currentPage = this.savedState.currentPage;\n        console.log('Restored state:', this.savedState);\n        this.fetchData();\n      } else {\n        this.fetchData();\n      }\n    },\n    // 打开预约详情\n    openReservationDetail(reservation) {\n      console.log('打开预约详情:', reservation);\n\n      // 计算当前状态\n      const statusText = this.getStatusText(reservation);\n      const statusType = this.getStatusType(reservation);\n      const dbStatus = reservation.status || 'confirmed';\n      const startTime = reservation.start_datetime;\n      const endTime = reservation.end_datetime;\n      console.log('计算的状态信息:', {\n        statusText,\n        statusType,\n        dbStatus,\n        startTime,\n        endTime\n      });\n\n      // 将状态保存到localStorage，以便详情页面使用\n      const stateKey = `reservation_status_${reservation.reservation_code}`;\n      const state = {\n        statusText,\n        statusType,\n        dbStatus,\n        timestamp: new Date().getTime()\n      };\n      console.log('Saved state:', state);\n      localStorage.setItem(stateKey, JSON.stringify(state));\n\n      // 导航到详情页面，并传递状态和时间参数\n      this.$router.push({\n        name: 'AdminReservationDetail',\n        params: {\n          code: reservation.reservation_code\n        },\n        query: {\n          displayStatus: statusText,\n          displayStatusType: statusType,\n          startTime: startTime,\n          endTime: endTime\n        }\n      });\n    },\n    // 在激活（从其他页面返回）时，检查预约状态是否需要更新\n    async checkReservationUpdates() {\n      // 如果当前显示的是预约列表，则检查是否需要刷新\n      if (this.reservations.length > 0) {\n        // 检查localStorage中是否有任何预约状态发生了变化\n        for (let i = 0; i < this.reservations.length; i++) {\n          const reservation = this.reservations[i];\n          const stateKey = `reservation_status_${reservation.reservation_code}`;\n          const savedStateStr = localStorage.getItem(stateKey);\n          if (savedStateStr) {\n            try {\n              const savedState = JSON.parse(savedStateStr);\n\n              // 检查保存的状态是否还是新鲜的（5分钟内）\n              const now = new Date().getTime();\n              const fiveMinutes = 5 * 60 * 1000;\n              if (now - savedState.timestamp <= fiveMinutes) {\n                console.log(`检测到预约 ${reservation.reservation_code} 的状态可能已更改，保存的状态:`, savedState);\n\n                // 检查是否有强制状态更新，特别是已取消状态\n                if (savedState.forcedStatus === 'cancelled' || savedState.statusText === this.$t('reservation.cancelled') && savedState.statusType === 'danger') {\n                  console.log(`预约 ${reservation.reservation_code} 已被标记为已取消，将在界面上更新`);\n\n                  // 更新当前列表中的预约状态\n                  this.reservations[i].status = 'cancelled';\n\n                  // 强制更新UI\n                  this.$forceUpdate();\n                }\n              } else {\n                // 如果状态过期，则移除它\n                console.log(`预约 ${reservation.reservation_code} 的保存状态已过期，移除`);\n                localStorage.removeItem(stateKey);\n              }\n            } catch (e) {\n              console.error('解析保存的状态时出错:', e);\n            }\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["reservationApi","isReservationExpired","name","data","loading","reservations","total","currentPage","pageSize","filter","code","userName","status","dateRange","savedState","created","restoreState","activated","forceRefresh","localStorage","getItem","console","log","removeItem","fetchData","checkReservationUpdates","deactivated","saveState","beforeRouteLeave","to","from","next","path","includes","methods","timestamp","Date","getTime","params","skip","limit","reservation_code","undefined","user_name","_t","length","from_date","to_date","response","getReservations","items","now","reservation","start","start_datetime","end","end_datetime","isInUse","id","isExpired","fetchTotalForSpecialStatus","error","$message","$t","formatDateTime","_row","_column","cellValue","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getStatusType","getStatusText","handleFilterChange","resetFilter","handlePageChange","page","viewReservation","statusText","statusType","dbStatus","startTime","endTime","reservationNumber","reservation_number","url","query","displayStatus","displayStatusType","setItem","$router","push","savedCurrentPage","confirmedParams","cancelledParams","confirmedResponse","cancelledResponse","allReservations","isConfirmed","sort","a","b","maxPage","Math","ceil","targetPage","min","startIndex","endIndex","currentPageReservations","slice","$nextTick","openReservationDetail","stateKey","state","JSON","stringify","i","savedStateStr","parse","fiveMinutes","forcedStatus","$forceUpdate","e"],"sources":["src/views/admin/AdminReservation.vue"],"sourcesContent":["<template>\n  <div class=\"admin-reservation\">\n    <div class=\"page-header\">\n      <h1 class=\"page-title\">{{ $t('admin.reservation') }}</h1>\n    </div>\n\n    <!-- 筛选卡片 -->\n    <el-card shadow=\"hover\" class=\"filter-card\">\n      <el-form :inline=\"true\" :model=\"filter\" class=\"filter-form\">\n        <el-form-item :label=\"$t('reservation.code')\">\n          <el-input\n            v-model=\"filter.code\"\n            :placeholder=\"$t('reservation.queryPlaceholder')\"\n            clearable\n            @keyup.enter.native=\"handleFilterChange\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.userName')\">\n          <el-input\n            v-model=\"filter.userName\"\n            :placeholder=\"$t('reservation.userName')\"\n            clearable\n            @keyup.enter.native=\"handleFilterChange\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.status')\">\n          <el-select\n            v-model=\"filter.status\"\n            :placeholder=\"$t('equipment.allStatus')\"\n            clearable\n            @change=\"handleFilterChange\"\n          >\n            <el-option\n              :label=\"$t('reservation.confirmed')\"\n              value=\"confirmed\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.inUse')\"\n              value=\"in_use\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.expired')\"\n              value=\"expired\"\n            ></el-option>\n            <el-option\n              :label=\"$t('reservation.cancelled')\"\n              value=\"cancelled\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item :label=\"$t('reservation.dateRange')\">\n          <el-date-picker\n            v-model=\"filter.dateRange\"\n            type=\"daterange\"\n            range-separator=\"至\"\n            :start-placeholder=\"$t('reservation.startDate')\"\n            :end-placeholder=\"$t('reservation.endDate')\"\n            value-format=\"yyyy-MM-dd\"\n            @change=\"handleFilterChange\"\n          >\n          </el-date-picker>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilterChange\">\n            {{ $t('common.search') }}\n          </el-button>\n          <el-button @click=\"resetFilter\" icon=\"el-icon-refresh-left\">\n            {{ $t('common.reset') }}\n          </el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <!-- 预定列表 -->\n    <el-card shadow=\"hover\" class=\"reservation-list\">\n      <div v-if=\"loading\" class=\"loading-container\">\n        <el-skeleton :rows=\"10\" animated />\n      </div>\n\n      <div v-else-if=\"reservations.length === 0\" class=\"empty-data\">\n        <el-empty :description=\"$t('common.noData')\"></el-empty>\n      </div>\n\n      <el-table\n        v-else\n        :data=\"reservations\"\n        style=\"width: 100%\"\n        :default-sort=\"{ prop: 'created_at', order: 'descending' }\"\n        header-align=\"center\"\n        cell-class-name=\"text-center\"\n        border\n        stripe\n      >\n        <!-- 添加预约序号列 -->\n        <el-table-column\n          prop=\"reservation_number\"\n          :label=\"$t('reservation.number')\"\n          min-width=\"80\"\n        >\n          <template slot-scope=\"scope\">\n            <span style=\"font-weight: bold;\">{{ scope.row.reservation_number || '-' }}</span>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n          prop=\"reservation_code\"\n          :label=\"$t('reservation.code')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <span style=\"color: #F56C6C; font-weight: bold;\">{{ scope.row.reservation_code }}</span>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n          prop=\"equipment_name\"\n          :label=\"$t('reservation.equipmentName')\"\n          min-width=\"120\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_name\"\n          :label=\"$t('reservation.userName')\"\n          min-width=\"100\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_department\"\n          :label=\"$t('reservation.userDepartment')\"\n          min-width=\"100\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"user_contact\"\n          :label=\"$t('reservation.userContact')\"\n          min-width=\"120\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"start_datetime\"\n          :label=\"$t('reservation.startTime')\"\n          min-width=\"150\"\n          :formatter=\"formatDateTime\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"end_datetime\"\n          :label=\"$t('reservation.endTime')\"\n          min-width=\"150\"\n          :formatter=\"formatDateTime\"\n        ></el-table-column>\n\n        <el-table-column\n          prop=\"status\"\n          :label=\"$t('reservation.status')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <el-tag\n              :type=\"getStatusType(scope.row)\"\n              size=\"medium\"\n              style=\"font-weight: bold; padding: 0px 10px; font-size: 14px;\"\n            >\n              {{ getStatusText(scope.row) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n          :label=\"$t('common.operation')\"\n          min-width=\"100\"\n        >\n          <template slot-scope=\"scope\">\n            <el-button\n              type=\"text\"\n              size=\"small\"\n              @click=\"viewReservation(scope.row)\"\n            >\n              {{ $t('admin.viewReservation') }}\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页 -->\n      <div class=\"pagination-container\" v-if=\"reservations.length > 0\">\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :total=\"total\"\n          :page-size=\"pageSize\"\n          :current-page.sync=\"currentPage\"\n          @current-change=\"handlePageChange\"\n        ></el-pagination>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { reservationApi } from '@/api'\nimport { isReservationExpired } from '@/utils/date'\n\nexport default {\n  name: 'AdminReservation',\n\n  data() {\n    return {\n      loading: false,\n      reservations: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 10,\n      filter: {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      },\n      // 添加一个保存页面状态的变量\n      savedState: null\n    }\n  },\n\n  created() {\n    // 检查是否有保存的状态并恢复它\n    this.restoreState();\n  },\n\n  // 添加activated钩子函数，在组件被激活时调用（如从预定详情页面返回）\n  activated() {\n    // 检查是否需要强制刷新\n    const forceRefresh = localStorage.getItem('force_refresh_reservation_list');\n    if (forceRefresh === 'true') {\n      console.log('检测到强制刷新标记，重新获取数据');\n      localStorage.removeItem('force_refresh_reservation_list');\n      this.fetchData();\n      return;\n    }\n\n    // 当从其他页面返回时，尝试恢复状态\n    this.restoreState();\n    // 检查预约状态更新\n    this.checkReservationUpdates();\n  },\n\n  // 添加deactivated钩子函数，在组件被停用时调用（如进入预定详情页面）\n  deactivated() {\n    // 保存当前页面状态\n    this.saveState();\n  },\n\n  // 添加beforeRouteLeave导航守卫，在离开组件时调用\n  beforeRouteLeave(to, from, next) {\n    // 如果是跳转到预定详情页面，保存状态\n    if (to.path.includes('/admin/reservation/') && to.path !== '/admin/reservation') {\n      this.saveState();\n    }\n    next();\n  },\n\n  methods: {\n    async fetchData() {\n      this.loading = true\n      console.log('Fetching data with filter:', this.filter);\n      console.log('Current page:', this.currentPage);\n\n      try {\n        // 添加时间戳参数，确保每次都获取最新数据\n        const timestamp = new Date().getTime()\n        console.log('添加时间戳参数:', timestamp)\n\n        const params = {\n          skip: (this.currentPage - 1) * this.pageSize, // 将页码转换为skip参数\n          limit: this.pageSize,\n          reservation_code: this.filter.code || undefined,\n          user_name: this.filter.userName || undefined,\n          _t: timestamp // 添加时间戳，防止缓存\n        }\n\n        // 添加日期范围过滤\n        if (this.filter.dateRange && this.filter.dateRange.length === 2) {\n          params.from_date = this.filter.dateRange[0]\n          params.to_date = this.filter.dateRange[1]\n        }\n\n        // 处理不同的状态筛选\n        if (this.filter.status) {\n          console.log('Filtering by status:', this.filter.status);\n\n          if (this.filter.status === 'in_use' || this.filter.status === 'expired') {\n            // 这些状态需要特殊处理，因为后端没有这些细分状态\n            // 我们获取所有已确认的预约，然后在前端筛选\n            params.status = 'confirmed';\n            console.log(`Setting status parameter to \"confirmed\" for ${this.filter.status} filter`);\n          } else if (this.filter.status === 'confirmed') {\n            // 对于已确认状态，我们需要获取所有已确认的预约，然后在前端筛选出未开始的预约\n            params.status = 'confirmed';\n            console.log(`Setting status parameter to \"confirmed\" for confirmed filter`);\n          } else if (this.filter.status === 'cancelled') {\n            // 对于已取消状态，直接从后端获取\n            params.status = 'cancelled';\n            console.log(`Setting status parameter to \"cancelled\" for cancelled filter`);\n          } else {\n            // 其他状态直接传递给后端\n            params.status = this.filter.status\n            console.log(`Setting status parameter to \"${this.filter.status}\"`);\n          }\n        }\n\n        console.log('Fetching reservations with params:', params)\n        const response = await reservationApi.getReservations(params)\n        console.log('API Response:', response)\n        let reservations = response.data.items || []\n        console.log('Received reservations:', reservations)\n\n        // 如果选择了特殊状态，需要在前端进行筛选\n        if (this.filter.status === 'in_use') {\n          // 筛选出\"使用中\"的预约\n          const now = new Date()\n          console.log('筛选\"使用中\"的预约，当前时间:', now)\n\n          // 记录筛选前的预约数量\n          console.log('筛选前的预约数量:', reservations.length)\n\n          // 筛选\"使用中\"的预约\n          reservations = reservations.filter(reservation => {\n            // 如果预约已取消，不应该显示为\"使用中\"\n            if (reservation.status === 'cancelled') {\n              return false;\n            }\n\n            const start = new Date(reservation.start_datetime)\n            const end = new Date(reservation.end_datetime)\n            const isInUse = now >= start && now <= end\n\n            // 记录每个预约的筛选结果\n            console.log(`预约ID=${reservation.id}, 开始时间=${start}, 结束时间=${end}, 是否使用中=${isInUse}`)\n\n            return isInUse\n          })\n\n          // 记录筛选后的预约数量\n          console.log('筛选后的\"使用中\"预约数量:', reservations.length)\n        } else if (this.filter.status === 'expired') {\n          // 筛选出\"已过期\"的预约\n          const now = new Date()\n          console.log('筛选\"已过期\"的预约，当前时间:', now)\n\n          // 记录筛选前的预约数量\n          console.log('筛选前的预约数量:', reservations.length)\n\n          // 筛选\"已过期\"的预约\n          reservations = reservations.filter(reservation => {\n            // 如果预约已取消，不应该显示为\"已过期\"\n            if (reservation.status === 'cancelled') {\n              return false;\n            }\n\n            const end = new Date(reservation.end_datetime)\n            const isExpired = now > end\n\n            // 记录每个预约的筛选结果\n            console.log(`预约ID=${reservation.id}, 结束时间=${end}, 是否已过期=${isExpired}`)\n\n            return isExpired\n          })\n\n          // 记录筛选后的\"已过期\"预约数量\n          console.log('筛选后的\"已过期\"预约数量:', reservations.length)\n        } else if (this.filter.status === 'confirmed') {\n          // 筛选出真正的\"已确认\"预约（未开始的预约）\n          const now = new Date()\n          reservations = reservations.filter(reservation => {\n            const start = new Date(reservation.start_datetime)\n            // 未开始且未过期\n            return start > now && !isReservationExpired(reservation.end_datetime)\n          })\n        }\n\n        console.log('Filtered reservations:', reservations)\n        this.reservations = reservations\n\n        // 如果是特殊状态，总数需要重新计算\n        if (this.filter.status === 'in_use' || this.filter.status === 'expired' || this.filter.status === 'confirmed' || this.filter.status === 'cancelled') {\n          // 对于特殊状态，我们需要获取所有页的数据来计算总数\n          // 这里我们先使用当前页的数据计算一个临时总数\n          this.total = reservations.length\n          console.log(`Temporary total based on current page: ${this.total}`);\n\n          // 无论当前页是否有数据，都获取所有数据来计算真实总数\n          this.fetchTotalForSpecialStatus()\n        } else {\n          this.total = response.data.total\n          console.log(`Total from API response: ${this.total}`);\n        }\n      } catch (error) {\n        console.error('Failed to fetch reservations:', error)\n        this.$message.error(this.$t('error.serverError'))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    formatDateTime(_row, _column, cellValue) {\n      if (!cellValue) return ''\n\n      const date = new Date(cellValue)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    },\n\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger'\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning'\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return 'primary'\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // \"已确认\"状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success'\n    },\n\n    getStatusText(reservation) {\n      // 如果预约已取消，显示\"已取消\"\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.statusCancelled')\n      }\n\n      // 如果预约已过期，显示\"已过期\"\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.statusExpired')\n      }\n\n      // 如果预约正在进行中，显示\"使用中\"\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return this.$t('reservation.statusInUse')\n      }\n\n      // 如果预约已确认且未开始，显示\"已确认\"\n      // \"已确认\"状态出现在预约被管理员批准，但还未开始使用的情况\n      return this.$t('reservation.statusConfirmed')\n    },\n\n    handleFilterChange() {\n      this.currentPage = 1\n      this.fetchData()\n    },\n\n    resetFilter() {\n      this.filter = {\n        code: '',\n        userName: '',\n        status: '',\n        dateRange: []\n      }\n      this.handleFilterChange()\n    },\n\n    handlePageChange(page) {\n      this.currentPage = page\n      this.fetchData()\n    },\n\n    viewReservation(reservation) {\n      // 计算当前预约的实际状态文本和类型\n      const statusText = this.getStatusText(reservation)\n      const statusType = this.getStatusType(reservation)\n\n      console.log('计算的状态信息:', {\n        statusText,\n        statusType,\n        dbStatus: reservation.status,\n        startTime: reservation.start_datetime,\n        endTime: reservation.end_datetime,\n        reservationNumber: reservation.reservation_number\n      })\n\n      // 构建URL，添加预约码、时间参数、预约序号和计算好的状态信息\n      const url = {\n        path: `/admin/reservation/${reservation.reservation_code}`,\n        query: {\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime,\n          displayStatus: statusText,\n          displayStatusType: statusType,\n          reservationNumber: reservation.reservation_number // 添加预约序号参数\n        }\n      }\n\n      // 将预约序号保存到localStorage，以便在页面刷新后仍然可以使用\n      if (reservation.reservation_number) {\n        localStorage.setItem('current_reservation_number', reservation.reservation_number)\n        console.log('保存预约序号到localStorage:', reservation.reservation_number)\n      }\n\n      this.$router.push(url)\n    },\n\n    // 获取特殊状态的总记录数并更新当前页面的预约列表\n    async fetchTotalForSpecialStatus() {\n      try {\n        console.log('Fetching total for special status:', this.filter.status);\n        console.log('Current page before fetchTotal:', this.currentPage);\n\n        // 保存当前页码，以便后续恢复\n        const savedCurrentPage = this.currentPage;\n\n        // 添加时间戳参数，确保每次都获取最新数据\n        const timestamp = new Date().getTime()\n        console.log('添加时间戳参数:', timestamp)\n\n        // 构建查询参数，不包含分页参数\n        const params = {\n          // 不设置limit，获取所有记录\n          limit: 1000, // 设置一个较大的值以获取尽可能多的记录\n          skip: 0,\n          reservation_code: this.filter.code || undefined, // 使用reservation_code而不是code\n          user_name: this.filter.userName || undefined,\n          _t: timestamp // 添加时间戳，防止缓存\n        }\n\n        // 添加日期范围过滤\n        if (this.filter.dateRange && this.filter.dateRange.length === 2) {\n          params.from_date = this.filter.dateRange[0]\n          params.to_date = this.filter.dateRange[1]\n        }\n\n        // 获取所有状态的预约（confirmed 和 cancelled）\n        const confirmedParams = { ...params, status: 'confirmed' };\n        const cancelledParams = { ...params, status: 'cancelled' };\n\n        console.log('Fetching all reservations for filtering');\n        const confirmedResponse = await reservationApi.getReservations(confirmedParams);\n        const cancelledResponse = await reservationApi.getReservations(cancelledParams);\n\n        // 合并结果\n        let allReservations = [\n          ...confirmedResponse.data.items || [],\n          ...cancelledResponse.data.items || []\n        ];\n\n        console.log(`Total reservations before filtering: ${allReservations.length}`);\n\n        const now = new Date();\n        console.log(`当前日期: ${now}`);\n\n        // 根据不同状态筛选\n        if (this.filter.status === 'expired') {\n          // 筛选出\"已过期\"的预约 (已结束且未取消的预约)\n          console.log('筛选\"已过期\"的预约，当前时间:', now);\n          console.log('筛选前的预约数量:', allReservations.length);\n\n          allReservations = allReservations.filter(reservation => {\n            // 如果预约已取消，不应该显示为\"已过期\"\n            if (reservation.status === 'cancelled') {\n              console.log(`预约ID=${reservation.id} 已取消，不显示为已过期`);\n              return false;\n            }\n\n            // 检查预约是否已过期（结束时间早于当前时间）\n            const end = new Date(reservation.end_datetime);\n            const isExpired = now > end;\n\n            console.log(`检查预约是否过期: ID=${reservation.id}, 结束时间=${end}, 是否过期=${isExpired}, 状态=${reservation.status}`);\n\n            return isExpired;\n          });\n\n          console.log(`过滤后的过期预约数量: ${allReservations.length}`);\n\n        } else if (this.filter.status === 'in_use') {\n          // 筛选出\"使用中\"的预约 (已开始、未结束、未取消的预约)\n          allReservations = allReservations.filter(reservation => {\n            // 只检查确认状态的预约是否使用中\n            if (reservation.status !== 'confirmed') {\n              return false;\n            }\n\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            const isInUse = now >= start && now <= end;\n\n            console.log(`检查预约是否使用中: ID=${reservation.id}, 开始时间=${start}, 结束时间=${end}, 是否使用中=${isInUse}, 状态=${reservation.status}`);\n\n            return isInUse;\n          });\n\n          console.log(`过滤后的使用中预约数量: ${allReservations.length}`);\n\n        } else if (this.filter.status === 'confirmed') {\n          // 筛选出真正的\"已确认\"预约（未开始且未过期的预约）\n          allReservations = allReservations.filter(reservation => {\n            if (reservation.status !== 'confirmed') {\n              return false;\n            }\n\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            const isConfirmed = start > now && end > now;\n\n            console.log(`检查预约是否已确认: ID=${reservation.id}, 开始时间=${start}, 是否已确认=${isConfirmed}, 状态=${reservation.status}`);\n\n            return isConfirmed;\n          });\n\n          console.log(`过滤后的已确认预约数量: ${allReservations.length}`);\n        } else if (this.filter.status === 'cancelled') {\n          // 对于\"已取消\"状态，直接筛选取消状态的预约\n          allReservations = allReservations.filter(reservation => {\n            return reservation.status === 'cancelled';\n          });\n\n          console.log(`过滤后的已取消预约数量: ${allReservations.length}`);\n        }\n\n        // 更新总数\n        this.total = allReservations.length;\n        console.log(`Updated total to: ${this.total}`);\n\n        // 对筛选后的结果进行排序\n        if (this.filter.status === 'expired') {\n          // 对于已过期，按结束时间倒序排列\n          allReservations.sort((a, b) => new Date(b.end_datetime) - new Date(a.end_datetime));\n        } else if (this.filter.status === 'in_use') {\n          // 对于使用中，按开始时间倒序排列\n          allReservations.sort((a, b) => new Date(b.start_datetime) - new Date(a.start_datetime));\n        } else if (this.filter.status === 'confirmed') {\n          // 对于已确认，按开始时间升序排列\n          allReservations.sort((a, b) => new Date(a.start_datetime) - new Date(b.start_datetime));\n        } else if (this.filter.status === 'cancelled') {\n          // 对于已取消，按结束时间倒序排列\n          allReservations.sort((a, b) => new Date(b.end_datetime) - new Date(a.end_datetime));\n        }\n\n        // 计算当前页应该显示的预约\n        const maxPage = Math.ceil(allReservations.length / this.pageSize) || 1;\n\n        // 确保页码不超过最大页数\n        const targetPage = Math.min(savedCurrentPage, maxPage);\n        console.log(`计算页数: 总记录数=${allReservations.length}, 每页记录数=${this.pageSize}, 最大页数=${maxPage}, 目标页码=${targetPage}`);\n\n        const startIndex = (targetPage - 1) * this.pageSize;\n        const endIndex = Math.min(startIndex + this.pageSize, allReservations.length);\n        const currentPageReservations = allReservations.slice(startIndex, endIndex);\n\n        console.log(`当前页数据范围: 开始索引=${startIndex}, 结束索引=${endIndex}, 当前页记录数=${currentPageReservations.length}`);\n\n        // 更新当前页面的预约列表\n        if (currentPageReservations.length > 0) {\n          // 先更新数据\n          this.reservations = currentPageReservations;\n          // 然后更新页码，避免触发不必要的重新获取数据\n          if (this.currentPage !== targetPage) {\n            console.log(`更新页码: 从 ${this.currentPage} 到 ${targetPage}`);\n            this.$nextTick(() => {\n              this.currentPage = targetPage;\n            });\n          }\n          console.log(`更新当前页面的预约列表: ${this.reservations.length} 条记录`);\n        } else if (allReservations.length > 0) {\n          // 如果当前页没有数据但总数据不为空，自动回到第一页\n          console.log(`当前页没有数据，回到第一页`);\n          this.reservations = allReservations.slice(0, this.pageSize);\n          if (this.currentPage !== 1) {\n            this.$nextTick(() => {\n              this.currentPage = 1;\n            });\n          }\n        } else {\n          // 如果没有找到任何预约\n          this.reservations = [];\n          console.log('没有找到符合条件的预约');\n        }\n\n        console.log('Current page after fetchTotal:', this.currentPage);\n      } catch (error) {\n        console.error('Failed to fetch total for special status:', error);\n      }\n    },\n\n    // 保存当前页面状态\n    saveState() {\n      this.savedState = {\n        filter: { ...this.filter },\n        currentPage: this.currentPage\n      };\n      console.log('Saved state:', this.savedState);\n    },\n\n    // 恢复保存的页面状态\n    restoreState() {\n      if (this.savedState) {\n        this.filter = { ...this.savedState.filter };\n        this.currentPage = this.savedState.currentPage;\n        console.log('Restored state:', this.savedState);\n        this.fetchData();\n      } else {\n        this.fetchData();\n      }\n    },\n\n    // 打开预约详情\n    openReservationDetail(reservation) {\n      console.log('打开预约详情:', reservation);\n\n      // 计算当前状态\n      const statusText = this.getStatusText(reservation);\n      const statusType = this.getStatusType(reservation);\n      const dbStatus = reservation.status || 'confirmed';\n      const startTime = reservation.start_datetime;\n      const endTime = reservation.end_datetime;\n\n      console.log('计算的状态信息:', {\n        statusText,\n        statusType,\n        dbStatus,\n        startTime,\n        endTime\n      });\n\n      // 将状态保存到localStorage，以便详情页面使用\n      const stateKey = `reservation_status_${reservation.reservation_code}`;\n      const state = {\n        statusText,\n        statusType,\n        dbStatus,\n        timestamp: new Date().getTime()\n      };\n\n      console.log('Saved state:', state);\n      localStorage.setItem(stateKey, JSON.stringify(state));\n\n      // 导航到详情页面，并传递状态和时间参数\n      this.$router.push({\n        name: 'AdminReservationDetail',\n        params: { code: reservation.reservation_code },\n        query: {\n          displayStatus: statusText,\n          displayStatusType: statusType,\n          startTime: startTime,\n          endTime: endTime\n        }\n      });\n    },\n\n    // 在激活（从其他页面返回）时，检查预约状态是否需要更新\n    async checkReservationUpdates() {\n      // 如果当前显示的是预约列表，则检查是否需要刷新\n      if (this.reservations.length > 0) {\n        // 检查localStorage中是否有任何预约状态发生了变化\n        for (let i = 0; i < this.reservations.length; i++) {\n          const reservation = this.reservations[i];\n          const stateKey = `reservation_status_${reservation.reservation_code}`;\n          const savedStateStr = localStorage.getItem(stateKey);\n\n          if (savedStateStr) {\n            try {\n              const savedState = JSON.parse(savedStateStr);\n\n              // 检查保存的状态是否还是新鲜的（5分钟内）\n              const now = new Date().getTime();\n              const fiveMinutes = 5 * 60 * 1000;\n\n              if (now - savedState.timestamp <= fiveMinutes) {\n                console.log(`检测到预约 ${reservation.reservation_code} 的状态可能已更改，保存的状态:`, savedState);\n\n                // 检查是否有强制状态更新，特别是已取消状态\n                if (savedState.forcedStatus === 'cancelled' ||\n                    (savedState.statusText === this.$t('reservation.cancelled') &&\n                     savedState.statusType === 'danger')) {\n                  console.log(`预约 ${reservation.reservation_code} 已被标记为已取消，将在界面上更新`);\n\n                  // 更新当前列表中的预约状态\n                  this.reservations[i].status = 'cancelled';\n\n                  // 强制更新UI\n                  this.$forceUpdate();\n                }\n              } else {\n                // 如果状态过期，则移除它\n                console.log(`预约 ${reservation.reservation_code} 的保存状态已过期，移除`);\n                localStorage.removeItem(stateKey);\n              }\n            } catch (e) {\n              console.error('解析保存的状态时出错:', e);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.admin-reservation {\n  padding: 20px;\n}\n\n.page-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding: 15px 20px;\n  background-color: #FFFFFF;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  color: #303133;\n}\n\n.filter-card {\n  margin-bottom: 20px;\n}\n\n.reservation-list {\n  margin-bottom: 20px;\n}\n\n.loading-container {\n  padding: 40px 0;\n}\n\n.empty-data {\n  padding: 40px 0;\n  text-align: center;\n}\n\n.pagination-container {\n  text-align: center;\n  margin-top: 20px;\n}\n\n.text-center {\n  text-align: center !important;\n}\n\n@media (max-width: 768px) {\n  .filter-form .el-form-item {\n    margin-right: 0;\n    margin-bottom: 10px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}