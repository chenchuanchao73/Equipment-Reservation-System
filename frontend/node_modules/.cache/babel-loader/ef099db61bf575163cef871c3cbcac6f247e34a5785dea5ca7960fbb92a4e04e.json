{"ast":null,"code":"// import { Calendar } from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport FullCalendar from '@fullcalendar/vue';\nimport { formatDate } from '@/utils/date';\nimport reservationApi from '@/api/reservation';\nexport default {\n  name: 'CalendarView',\n  components: {\n    FullCalendar\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        initialView: 'dayGridMonth',\n        headerToolbar: false,\n        // 我们使用自定义的头部控件\n        events: [],\n        // 将通过API加载\n        eventClick: this.handleEventClick,\n        eventDidMount: this.handleEventDidMount,\n        datesSet: this.handleDatesSet,\n        locale: this.$i18n.locale === 'zh-CN' ? 'zh-cn' : 'en',\n        firstDay: 1,\n        // 周一作为一周的第一天\n        allDaySlot: false,\n        // 不显示\"全天\"选项\n        slotMinTime: '00:00:00',\n        // 从0点开始\n        slotMaxTime: '24:00:00',\n        // 到24点结束\n        height: 'auto',\n        nowIndicator: true,\n        // 显示当前时间指示器\n        slotLabelFormat: {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false // 使用24小时制\n        },\n        slotEventOverlap: false,\n        // 禁止事件重叠\n        eventTimeFormat: {\n          // 统一时间格式\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false\n        },\n        titleFormat: {\n          year: 'numeric',\n          month: 'long'\n        },\n        // 标题格式\n        views: {\n          dayGridMonth: {\n            dayHeaderFormat: {\n              weekday: 'long'\n            },\n            // 月视图只显示星期几\n            fixedWeekCount: false,\n            // 根据当月天数动态调整行数\n            showNonCurrentDates: false // 隐藏不属于当前月份的日期\n          },\n          timeGridWeek: {\n            dayHeaderFormat: {\n              weekday: 'long',\n              month: 'numeric',\n              day: 'numeric',\n              omitCommas: true\n            } // 周视图显示完整日期\n          },\n          timeGridDay: {\n            dayHeaderFormat: {\n              weekday: 'long',\n              month: 'numeric',\n              day: 'numeric',\n              omitCommas: true\n            },\n            // 日视图显示完整日期\n            slotEventOverlap: false,\n            // 日视图特别禁止事件重叠\n            eventMaxStack: 4,\n            // 最多显示4个事件，超过则显示\"+更多\"\n            moreLinkClick: 'popover' // 点击\"+更多\"时显示弹窗\n          }\n        },\n        locales: {\n          'zh-cn': {\n            week: {\n              dow: 1,\n              // 周一作为一周的第一天\n              doy: 4 // 一年中第一周必须包含1月4日\n            },\n            buttonText: {\n              today: '今天',\n              month: '月',\n              week: '周',\n              day: '日'\n            },\n            weekText: '周',\n            allDayText: '全天',\n            moreLinkText: '更多',\n            noEventsText: '没有事件'\n          },\n          'en': {\n            week: {\n              dow: 1,\n              // 周一作为一周的第一天\n              doy: 4 // 一年中第一周必须包含1月4日\n            },\n            buttonText: {\n              today: 'Today',\n              month: 'Month',\n              week: 'Week',\n              day: 'Day'\n            },\n            weekText: 'W',\n            allDayText: 'All day',\n            moreLinkText: 'more',\n            noEventsText: 'No events'\n          }\n        }\n      },\n      detailVisible: false,\n      selectedEvent: null,\n      loading: false,\n      currentViewTitle: '',\n      cancelDialogVisible: false,\n      cancelling: false,\n      cancelForm: {\n        reservationCode: ''\n      },\n      cancelRules: {\n        reservationCode: [{\n          required: true,\n          message: this.$t('reservation.codeOrContactRequired'),\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted() {\n    this.loadEvents();\n  },\n  beforeDestroy() {\n    // 清除资源\n  },\n  watch: {\n    // 监听语言变化\n    '$i18n.locale': {\n      handler(newLocale) {\n        if (this.$refs.fullCalendar) {\n          const calendarApi = this.$refs.fullCalendar.getApi();\n          calendarApi.setOption('locale', newLocale === 'zh-CN' ? 'zh-cn' : 'en');\n          this.currentViewTitle = calendarApi.view.title;\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    // 加载预约数据\n    async loadEvents() {\n      this.loading = true;\n      try {\n        const calendarApi = this.$refs.fullCalendar.getApi();\n        const start = this.formatDate(calendarApi.view.activeStart);\n        const end = this.formatDate(calendarApi.view.activeEnd);\n        const response = await this.$http.get('/api/reservations/calendar', {\n          params: {\n            start_date: start,\n            end_date: end\n          }\n        });\n        if (response.data.success) {\n          calendarApi.removeAllEvents();\n          calendarApi.addEventSource(response.data.events);\n        } else {\n          this.$message.error(response.data.message || this.$t('calendar.loadFailed'));\n        }\n      } catch (error) {\n        console.error('Failed to load calendar events:', error);\n        this.$message.error(this.$t('calendar.loadFailed'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 处理日期范围变化\n    handleDatesSet() {\n      // 更新当前视图标题\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      this.currentViewTitle = calendarApi.view.title;\n\n      // 加载事件数据\n      this.loadEvents();\n    },\n    // 处理事件点击\n    handleEventClick(info) {\n      this.selectedEvent = info.event;\n      this.detailVisible = true;\n    },\n    // 处理事件渲染\n    handleEventDidMount(info) {\n      // 获取事件状态\n      const status = info.event.extendedProps.status;\n\n      // 根据状态设置事件颜色（适用于所有视图）\n      if (status) {\n        if (status === 'confirmed') {\n          info.el.style.backgroundColor = 'rgba(103, 194, 58, 0.7)'; // 已确认 - 半透明绿色\n          info.el.style.borderColor = 'rgba(103, 194, 58, 0.9)';\n        } else if (status === 'in_use') {\n          info.el.style.backgroundColor = 'rgba(64, 158, 255, 0.7)'; // 使用中 - 半透明蓝色\n          info.el.style.borderColor = 'rgba(64, 158, 255, 0.9)';\n        }\n      }\n\n      // 添加鼠标悬停工具提示\n      this.addEventTooltip(info);\n\n      // 为循环预约添加标记 - 适用于所有视图\n      if (info.event.extendedProps.isRecurring) {\n        // 月视图的处理方式\n        if (info.view.type === 'dayGridMonth') {\n          const recurringIcon = document.createElement('span');\n          recurringIcon.className = 'recurring-icon';\n          recurringIcon.innerHTML = '<i class=\"el-icon-refresh-right\"></i>';\n          const titleEl = info.el.querySelector('.fc-event-title');\n          if (titleEl) {\n            titleEl.appendChild(recurringIcon);\n          }\n        }\n        // 周视图和日视图的处理方式\n        else if (info.view.type === 'timeGridWeek' || info.view.type === 'timeGridDay') {\n          // 为事件添加循环图标标记\n          const recurringIcon = document.createElement('span');\n          recurringIcon.className = 'recurring-icon-timegrid';\n          recurringIcon.innerHTML = '<i class=\"el-icon-refresh-right\"></i>';\n\n          // 添加到自定义内容中\n          const eventContent = info.el.querySelector('.custom-event-content');\n          if (eventContent) {\n            eventContent.appendChild(recurringIcon);\n          } else {\n            // 如果还没有自定义内容，添加到事件主体\n            const mainContent = info.el.querySelector('.fc-event-main');\n            if (mainContent) {\n              mainContent.appendChild(recurringIcon);\n            }\n          }\n        }\n      }\n\n      // 在月视图中修改时间格式为24小时制\n      if (info.view.type === 'dayGridMonth') {\n        const timeEl = info.el.querySelector('.fc-event-time');\n        if (timeEl && info.event.start) {\n          // 使用24小时制格式化时间\n          const formattedTime = info.event.start.toLocaleTimeString('zh-CN', {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false\n          });\n          timeEl.textContent = formattedTime;\n        }\n      }\n\n      // 在周视图和日视图中自定义事件内容\n      if (info.view.type === 'timeGridWeek' || info.view.type === 'timeGridDay') {\n        // 清除默认内容\n        const eventContent = info.el.querySelector('.fc-event-main');\n        if (eventContent) {\n          // 创建自定义内容\n          const customContent = document.createElement('div');\n          customContent.className = 'custom-event-content';\n\n          // 设备名称\n          const title = document.createElement('div');\n          title.className = 'event-title';\n          title.textContent = info.event.title;\n          customContent.appendChild(title);\n\n          // 使用人\n          const user = document.createElement('div');\n          user.className = 'event-user';\n          user.textContent = info.event.extendedProps.userName || '';\n          customContent.appendChild(user);\n\n          // 时间\n          const time = document.createElement('div');\n          time.className = 'event-time';\n          const startTime = info.event.start ? info.event.start.toLocaleTimeString('zh-CN', {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false\n          }) : '';\n          const endTime = info.event.end ? info.event.end.toLocaleTimeString('zh-CN', {\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: false\n          }) : '';\n          time.textContent = `${startTime}-${endTime}`;\n          customContent.appendChild(time);\n\n          // 替换内容\n          eventContent.innerHTML = '';\n          eventContent.appendChild(customContent);\n\n          // 为循环预约添加图标\n          if (info.event.extendedProps.isRecurring) {\n            const recurringIcon = document.createElement('span');\n            recurringIcon.className = 'recurring-icon-timegrid';\n            recurringIcon.innerHTML = '<i class=\"el-icon-refresh-right\"></i>';\n            eventContent.appendChild(recurringIcon);\n          }\n        }\n      }\n    },\n    // 切换视图\n    changeView(viewName) {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.changeView(viewName);\n    },\n    // 跳转到今天\n    today() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.today();\n    },\n    // 上一个时间段\n    prev() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.prev();\n    },\n    // 下一个时间段\n    next() {\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      calendarApi.next();\n    },\n    // 获取状态标签类型\n    getStatusTagType(status) {\n      const statusMap = {\n        'confirmed': 'success',\n        'in_use': 'primary',\n        'cancelled': 'info',\n        'expired': 'danger'\n      };\n      return statusMap[status] || 'info';\n    },\n    // 格式化日期\n    formatDate(date) {\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    },\n    // 格式化日期时间\n    formatDateTime(date) {\n      return formatDate(date, 'YYYY-MM-DD HH:mm');\n    },\n    // 格式化短时间（只显示小时和分钟）\n    formatShortTime(date) {\n      if (!date) return '';\n      return date.toLocaleTimeString('zh-CN', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n    },\n    // 获取状态文本\n    getStatusText(status) {\n      const statusMap = {\n        'confirmed': this.$t('reservation.confirmed'),\n        'in_use': this.$t('reservation.inUse'),\n        'cancelled': this.$t('reservation.cancelled'),\n        'expired': this.$t('reservation.expired')\n      };\n      return statusMap[status] || status;\n    },\n    // 添加事件工具提示\n    addEventTooltip(info) {\n      // 获取事件信息\n      const event = info.event;\n      const props = event.extendedProps;\n\n      // 计算事件持续时间（分钟）\n      const start = event.start;\n      const end = event.end;\n      const durationMs = end - start;\n      const durationMinutes = Math.round(durationMs / (1000 * 60));\n\n      // 获取当前视图类型\n      const calendarApi = this.$refs.fullCalendar.getApi();\n      const viewType = calendarApi.view.type;\n\n      // 获取事件元素\n      const titleEl = info.el.querySelector('.fc-event-title');\n      const timeEl = info.el.querySelector('.fc-event-time');\n      const mainEl = info.el.querySelector('.fc-event-main');\n\n      // 根据视图类型处理事件显示\n      if (viewType === 'dayGridMonth') {\n        // 月视图：所有预约显示相同，显示设备名称+开始和结束时间\n        if (titleEl) {\n          // 提取完整设备名称（通常是前两个单词，如\"M2F Mic\"）\n          const titleParts = event.title.split(' ');\n          let deviceName = titleParts[0]; // 至少包含第一个单词\n\n          // 如果第二个单词是\"Mic\"或其他设备类型标识，也包含它\n          if (titleParts.length > 1 && (titleParts[1] === 'Mic' || titleParts[1] === 'Speaker' || titleParts[1].startsWith('Speaker'))) {\n            deviceName = `${titleParts[0]} ${titleParts[1]}`;\n          }\n\n          // 格式化时间\n          const startTime = this.formatShortTime(start);\n          const endTime = this.formatShortTime(end);\n\n          // 设置标题为\"设备名称 开始-结束\"\n          titleEl.textContent = `${deviceName}     ${startTime}-${endTime}`;\n\n          // 完全移除时间元素，防止重复显示时间\n          if (timeEl) {\n            timeEl.remove(); // 彻底移除时间元素，而不仅仅是隐藏\n          }\n        }\n      } else if (viewType === 'timeGridWeek' || viewType === 'timeGridDay') {\n        // 周视图和日视图：短时间预约特殊处理\n        if (durationMinutes <= 30) {\n          // 添加短时间预约的类\n          info.el.classList.add('very-short-duration-event');\n\n          // 只显示设备名称\n          if (titleEl) {\n            const deviceName = event.title.split(' ')[0];\n            titleEl.textContent = deviceName;\n          }\n\n          // 调整主容器样式\n          if (mainEl) {\n            mainEl.style.display = 'flex';\n            mainEl.style.alignItems = 'center';\n            mainEl.style.justifyContent = 'center';\n            mainEl.style.padding = '2px';\n\n            // 日视图和周视图的不同布局\n            if (viewType === 'timeGridDay') {\n              // 日视图：水平排列\n              mainEl.style.flexDirection = 'row';\n              if (timeEl) {\n                timeEl.style.marginRight = '4px';\n              }\n            } else {\n              // 周视图：垂直排列\n              mainEl.style.flexDirection = 'column';\n              if (timeEl) {\n                timeEl.style.marginBottom = '2px';\n              }\n            }\n          }\n\n          // 调整字体样式\n          if (titleEl) {\n            titleEl.style.fontWeight = 'bold';\n            titleEl.style.fontSize = '0.9em';\n          }\n          if (timeEl) {\n            timeEl.style.fontWeight = 'bold';\n            timeEl.style.fontSize = '0.9em';\n          }\n        }\n      }\n\n      // 设置title属性（原生浏览器工具提示）\n      const tooltipText = `${event.title}\\n${props.userName || ''}\\n${this.formatDateTime(start)} - ${this.formatDateTime(end)}\\n${this.getStatusText(props.status)}\\n${props.reservationNumber}`;\n      info.el.setAttribute('title', tooltipText);\n    },\n    // 显示取消预约对话框\n    showCancelDialog() {\n      this.cancelForm.reservationCode = '';\n      this.cancelDialogVisible = true;\n    },\n    // 取消预约\n    async cancelReservation() {\n      try {\n        // 验证表单\n        await this.$refs.cancelForm.validate();\n\n        // 检查输入的预约码是否与当前预约码匹配\n        if (this.cancelForm.reservationCode !== this.selectedEvent.extendedProps.reservationCode) {\n          this.$message.error(this.$t('reservation.checkCodeAndContact'));\n          return;\n        }\n        this.cancelling = true;\n\n        // 准备请求数据\n        const data = {\n          reservation_number: this.selectedEvent.extendedProps.reservationNumber || null,\n          lang: this.$i18n.locale\n        };\n\n        // 调用取消预约API\n        const response = await reservationApi.cancelReservation(this.selectedEvent.extendedProps.reservationCode, data);\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.cancelSuccess'));\n          this.cancelDialogVisible = false;\n\n          // 关闭预约详情弹窗\n          this.detailVisible = false;\n\n          // 重新加载日历事件\n          this.loadEvents();\n        } else {\n          this.$message.error(response.data.message || this.$t('reservation.cancelFailed'));\n        }\n      } catch (error) {\n        console.error('Failed to cancel reservation:', error);\n        this.$message.error(this.$t('error.serverError'));\n      } finally {\n        this.cancelling = false;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}