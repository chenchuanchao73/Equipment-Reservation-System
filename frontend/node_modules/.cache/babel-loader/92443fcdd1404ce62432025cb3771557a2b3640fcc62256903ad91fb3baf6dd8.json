{"ast":null,"code":"/**\n * 日期工具函数\n */\n\n/**\n * 格式化日期时间\n * @param {Date|string|number} date - 日期对象、日期字符串或时间戳\n * @param {string} format - 格式化模板，例如：'YYYY-MM-DD HH:mm:ss'\n * @returns {string} - 格式化后的日期字符串\n */\nexport function formatDateTime(date, format = 'YYYY-MM-DD HH:mm') {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  const hours = String(d.getHours()).padStart(2, '0');\n  const minutes = String(d.getMinutes()).padStart(2, '0');\n  const seconds = String(d.getSeconds()).padStart(2, '0');\n  return format.replace('YYYY', year).replace('MM', month).replace('DD', day).replace('HH', hours).replace('mm', minutes).replace('ss', seconds);\n}\n\n/**\n * 检查预约是否已过期\n * @param {Date|string|number} endDateTime - 预约结束时间\n * @returns {boolean} - 是否已过期\n */\nexport function isReservationExpired(endDateTime) {\n  const now = new Date();\n  const end = new Date(endDateTime);\n  if (isNaN(end.getTime())) {\n    return false;\n  }\n  return now > end;\n}\nexport default {\n  formatDateTime,\n  isReservationExpired\n};","map":{"version":3,"names":["formatDateTime","date","format","d","Date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","isReservationExpired","endDateTime","now","end"],"sources":["D:/equipment-reservation-system/frontend/src/utils/dateUtils.js"],"sourcesContent":["/**\n * 日期工具函数\n */\n\n/**\n * 格式化日期时间\n * @param {Date|string|number} date - 日期对象、日期字符串或时间戳\n * @param {string} format - 格式化模板，例如：'YYYY-MM-DD HH:mm:ss'\n * @returns {string} - 格式化后的日期字符串\n */\nexport function formatDateTime(date, format = 'YYYY-MM-DD HH:mm') {\n  if (!date) return ''\n\n  const d = new Date(date)\n  if (isNaN(d.getTime())) return ''\n\n  const year = d.getFullYear()\n  const month = String(d.getMonth() + 1).padStart(2, '0')\n  const day = String(d.getDate()).padStart(2, '0')\n  const hours = String(d.getHours()).padStart(2, '0')\n  const minutes = String(d.getMinutes()).padStart(2, '0')\n  const seconds = String(d.getSeconds()).padStart(2, '0')\n\n  return format\n    .replace('YYYY', year)\n    .replace('MM', month)\n    .replace('DD', day)\n    .replace('HH', hours)\n    .replace('mm', minutes)\n    .replace('ss', seconds)\n}\n\n/**\n * 检查预约是否已过期\n * @param {Date|string|number} endDateTime - 预约结束时间\n * @returns {boolean} - 是否已过期\n */\nexport function isReservationExpired(endDateTime) {\n  const now = new Date()\n  const end = new Date(endDateTime)\n\n  if (isNaN(end.getTime())) {\n    return false\n  }\n\n  return now > end\n}\n\nexport default {\n  formatDateTime,\n  isReservationExpired\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAcA,CAACC,IAAI,EAAEC,MAAM,GAAG,kBAAkB,EAAE;EAChE,IAAI,CAACD,IAAI,EAAE,OAAO,EAAE;EAEpB,MAAME,CAAC,GAAG,IAAIC,IAAI,CAACH,IAAI,CAAC;EACxB,IAAII,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE;EAEjC,MAAMC,IAAI,GAAGJ,CAAC,CAACK,WAAW,CAAC,CAAC;EAC5B,MAAMC,KAAK,GAAGC,MAAM,CAACP,CAAC,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACvD,MAAMC,GAAG,GAAGH,MAAM,CAACP,CAAC,CAACW,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAChD,MAAMG,KAAK,GAAGL,MAAM,CAACP,CAAC,CAACa,QAAQ,CAAC,CAAC,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACnD,MAAMK,OAAO,GAAGP,MAAM,CAACP,CAAC,CAACe,UAAU,CAAC,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACvD,MAAMO,OAAO,GAAGT,MAAM,CAACP,CAAC,CAACiB,UAAU,CAAC,CAAC,CAAC,CAACR,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEvD,OAAOV,MAAM,CACVmB,OAAO,CAAC,MAAM,EAAEd,IAAI,CAAC,CACrBc,OAAO,CAAC,IAAI,EAAEZ,KAAK,CAAC,CACpBY,OAAO,CAAC,IAAI,EAAER,GAAG,CAAC,CAClBQ,OAAO,CAAC,IAAI,EAAEN,KAAK,CAAC,CACpBM,OAAO,CAAC,IAAI,EAAEJ,OAAO,CAAC,CACtBI,OAAO,CAAC,IAAI,EAAEF,OAAO,CAAC;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,oBAAoBA,CAACC,WAAW,EAAE;EAChD,MAAMC,GAAG,GAAG,IAAIpB,IAAI,CAAC,CAAC;EACtB,MAAMqB,GAAG,GAAG,IAAIrB,IAAI,CAACmB,WAAW,CAAC;EAEjC,IAAIlB,KAAK,CAACoB,GAAG,CAACnB,OAAO,CAAC,CAAC,CAAC,EAAE;IACxB,OAAO,KAAK;EACd;EAEA,OAAOkB,GAAG,GAAGC,GAAG;AAClB;AAEA,eAAe;EACbzB,cAAc;EACdsB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}