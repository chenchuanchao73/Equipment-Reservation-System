{"ast":null,"code":"import { getDbTables, getDbTableColumns, getDbTableRows } from '@/api/dbAdmin';\nimport { mapState } from 'vuex';\nimport { formatDate } from '@/utils/date';\nexport default {\n  name: 'DatabaseViewer',\n  data() {\n    return {\n      tables: [],\n      selectedTable: '',\n      columns: [],\n      rows: [],\n      total: 0,\n      page: 1,\n      pageSize: 20,\n      loading: false,\n      inited: false,\n      // 表字段注释对照表\n      fieldComments: {\n        // admin表：系统管理员\n        'admin.id': '管理员唯一ID',\n        'admin.username': '管理员登录账号',\n        'admin.password_hash': '加密后的登录密码',\n        'admin.name': '管理员姓名',\n        'admin.role': '管理员角色（如superadmin）',\n        'admin.is_active': '账号是否激活（1激活，0禁用）',\n        'admin.created_at': '账号创建时间',\n        // email_logs表：系统邮件发送日志\n        'email_logs.id': '日志唯一ID',\n        'email_logs.recipient': '收件人邮箱',\n        'email_logs.subject': '邮件主题',\n        'email_logs.template_key': '邮件模板标识',\n        'email_logs.event_type': '触发邮件的事件类型',\n        'email_logs.status': '发送状态（如success/failed）',\n        'email_logs.error_message': '发送失败时的错误信息',\n        'email_logs.reservation_code': '关联预约的编码',\n        'email_logs.reservation_number': '关联预约的编号',\n        'email_logs.created_at': '日志创建时间',\n        'email_logs.content_html': '邮件HTML内容',\n        // email_settings表：邮件服务器配置\n        'email_settings.id': '配置唯一ID',\n        'email_settings.smtp_server': 'SMTP服务器地址',\n        'email_settings.smtp_port': 'SMTP服务器端口',\n        'email_settings.sender_email': '发件人邮箱',\n        'email_settings.sender_name': '发件人显示名称',\n        'email_settings.smtp_username': 'SMTP登录用户名',\n        'email_settings.smtp_password': 'SMTP登录密码',\n        'email_settings.use_ssl': '是否使用SSL加密（1是，0否）',\n        'email_settings.enabled': '配置是否启用（1启用，0禁用）',\n        'email_settings.created_at': '配置创建时间',\n        'email_settings.updated_at': '配置更新时间',\n        // email_templates表：邮件模板\n        'email_templates.id': '模板唯一ID',\n        'email_templates.name': '模板名称',\n        'email_templates.template_key': '模板标识（代码）',\n        'email_templates.subject': '邮件主题模板',\n        'email_templates.content_html': 'HTML格式邮件内容',\n        'email_templates.content_text': '纯文本邮件内容',\n        'email_templates.variables': '可用变量说明',\n        'email_templates.language': '模板语言',\n        'email_templates.created_at': '模板创建时间',\n        'email_templates.updated_at': '模板更新时间',\n        // equipment表：可预约设备\n        'equipment.id': '设备唯一ID',\n        'equipment.name': '设备名称',\n        'equipment.category': '设备类别名称',\n        'equipment.model': '设备型号',\n        'equipment.location': '设备存放位置',\n        'equipment.status': '设备状态（如可用/维修/借出）',\n        'equipment.description': '设备详细描述',\n        'equipment.image_path': '设备图片路径',\n        'equipment.user_guide': '设备使用说明',\n        'equipment.created_at': '设备信息创建时间',\n        'equipment.updated_at': '设备信息更新时间',\n        'equipment.video_tutorial': '设备视频教程地址',\n        'equipment.category_id': '设备类别ID',\n        // equipment_category表：设备类别\n        'equipment_category.id': '类别唯一ID',\n        'equipment_category.name': '类别名称',\n        'equipment_category.description': '类别描述',\n        // recurring_reservation表：周期性预约\n        'recurring_reservation.id': '周期预约唯一ID',\n        'recurring_reservation.equipment_id': '设备ID',\n        'recurring_reservation.pattern_type': '重复模式类型（如每周/每月）',\n        'recurring_reservation.days_of_week': '每周重复的星期（如1,3,5）',\n        'recurring_reservation.days_of_month': '每月重复的日期（如5,15,25）',\n        'recurring_reservation.start_date': '预约周期开始日期',\n        'recurring_reservation.end_date': '预约周期结束日期',\n        'recurring_reservation.start_time': '每天预约开始时间',\n        'recurring_reservation.end_time': '每天预约结束时间',\n        'recurring_reservation.user_name': '预约人姓名',\n        'recurring_reservation.user_department': '预约人部门',\n        'recurring_reservation.user_contact': '预约人联系方式',\n        'recurring_reservation.user_email': '预约人邮箱',\n        'recurring_reservation.purpose': '预约用途',\n        'recurring_reservation.status': '周期预约状态',\n        'recurring_reservation.created_at': '创建时间',\n        'recurring_reservation.reservation_code': '周期预约编码',\n        // reservation表：单次预约\n        'reservation.id': '预约唯一ID',\n        'reservation.equipment_id': '设备ID',\n        'reservation.reservation_code': '预约编码',\n        'reservation.user_name': '预约人姓名',\n        'reservation.user_department': '预约人部门',\n        'reservation.user_contact': '预约人联系方式',\n        'reservation.user_email': '预约人邮箱',\n        'reservation.start_datetime': '预约开始时间',\n        'reservation.end_datetime': '预约结束时间',\n        'reservation.purpose': '预约用途',\n        'reservation.status': '预约状态',\n        'reservation.created_at': '预约创建时间',\n        'reservation.recurring_reservation_id': '关联的周期预约ID',\n        'reservation.is_exception': '是否为周期预约的特例',\n        'reservation.reservation_number': '预约编号',\n        // system_settings表：系统设置\n        'system_settings.id': '设置唯一ID',\n        'system_settings.site_name': '系统站点名称',\n        'system_settings.maintenance_mode': '维护模式开关（1开启，0关闭）',\n        'system_settings.reservation_limit_per_day': '单日预约上限',\n        'system_settings.allow_equipment_conflict': '是否允许设备冲突预约（1允许，0不允许）',\n        'system_settings.advance_reservation_days': '可提前预约天数',\n        'system_settings.created_at': '设置创建时间',\n        'system_settings.updated_at': '设置更新时间'\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      user: state => state.user\n    }),\n    isSuperAdmin() {\n      return this.user && this.user.role === 'superadmin';\n    },\n    // 判断是否为小表格（列少的表格）\n    isSmallTable() {\n      const smallTables = ['admin', 'equipment_category', 'system_settings'];\n      return !smallTables.includes(this.selectedTable);\n    }\n  },\n  created() {\n    console.log(\"DatabaseViewer 组件 created\");\n  },\n  mounted() {\n    console.log(\"DatabaseViewer 组件 mounted, 调用 initIfNeeded\");\n    this.initIfNeeded();\n  },\n  methods: {\n    async initIfNeeded() {\n      console.log(\"initIfNeeded 被调用，inited=\", this.inited, \"isSuperAdmin=\", this.isSuperAdmin);\n      if (!this.inited && this.isSuperAdmin) {\n        this.inited = true;\n        await this.fetchTables();\n      }\n    },\n    async fetchTables() {\n      console.log(\"开始获取数据库表名...\");\n      try {\n        console.log(\"调用 getDbTables()\");\n        const res = await getDbTables();\n        console.log(\"获取表名结果:\", res);\n        this.tables = res.data.tables || [];\n        if (this.tables.length > 0) {\n          this.handleTableSelect(this.tables[0]);\n        }\n      } catch (e) {\n        console.error(\"获取表名失败:\", e);\n        this.$message.error('获取表名失败: ' + (e.message || e));\n      }\n    },\n    async handleTableSelect(table) {\n      this.selectedTable = table;\n      this.page = 1;\n      await this.fetchTableColumns();\n      await this.fetchTableRows();\n    },\n    async fetchTableColumns() {\n      try {\n        const res = await getDbTableColumns(this.selectedTable);\n        // 兼容不同数据库字段名\n        this.columns = (res.data.columns || []).map(col => ({\n          name: col.name || col.column_name,\n          type: col.type || col.type_name,\n          nullable: col.nullable !== undefined ? col.nullable : col.nullable_,\n          default: col.default,\n          comment: col.comment || ''\n        }));\n      } catch (e) {\n        this.columns = [];\n        this.$message.error('获取字段信息失败');\n      }\n    },\n    async fetchTableRows() {\n      this.loading = true;\n      try {\n        const res = await getDbTableRows(this.selectedTable, {\n          skip: (this.page - 1) * this.pageSize,\n          limit: this.pageSize\n        });\n        this.rows = res.data.rows || [];\n\n        // 使用后端返回的总行数\n        if (res.data.total !== undefined) {\n          this.total = res.data.total;\n        } else {\n          // 兼容旧版API，如果后端没有返回总行数，则使用简单估算\n          if (this.rows.length < this.pageSize) {\n            // 当前页不满，可能是最后一页\n            this.total = (this.page - 1) * this.pageSize + this.rows.length;\n          } else {\n            // 当前页是满的，假设至少还有一页\n            this.total = this.page * this.pageSize + this.pageSize;\n          }\n        }\n      } catch (e) {\n        this.rows = [];\n        this.$message.error('获取表数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    handlePageChange(page) {\n      this.page = page;\n      this.fetchTableRows();\n    },\n    handleSizeChange(size) {\n      this.pageSize = size;\n      this.page = 1;\n      this.fetchTableRows();\n    },\n    refreshTable() {\n      this.fetchTableColumns();\n      this.fetchTableRows();\n    },\n    // 获取字段注释 - 简化版本\n    getFieldComment(fieldName) {\n      const key = `${this.selectedTable}.${fieldName}`;\n      return this.fieldComments[key] || '暂无注释';\n    },\n    // 获取最小列宽（用于自适应模式的表格）\n    getColumnMinWidth(columnName) {\n      const lowerColumnName = columnName.toLowerCase();\n\n      // 针对特定表格中的特定列进行特殊处理\n      if (this.selectedTable === 'admin') {\n        if (lowerColumnName === 'id') return 80;\n        if (lowerColumnName === 'username') return 150;\n        if (lowerColumnName === 'password_hash') return 300;\n        if (lowerColumnName === 'name') return 150;\n        if (lowerColumnName === 'role') return 120;\n        if (lowerColumnName === 'is_active') return 100;\n        if (lowerColumnName === 'created_at') return 180;\n        return 150;\n      }\n      if (this.selectedTable === 'equipment_category') {\n        if (lowerColumnName === 'id') return 80;\n        if (lowerColumnName === 'name') return 200;\n        if (lowerColumnName === 'description') return 300;\n        if (lowerColumnName === 'created_at') return 180;\n        return 200;\n      }\n      if (this.selectedTable === 'system_settings') {\n        if (lowerColumnName === 'id') return 80;\n        if (lowerColumnName === 'key') return 200;\n        if (lowerColumnName === 'value') return 400;\n        if (lowerColumnName === 'description') return 300;\n        return 200;\n      }\n\n      // 默认最小列宽\n      if (lowerColumnName.includes('content_html') || lowerColumnName.includes('html')) {\n        return 300;\n      } else if (lowerColumnName === 'id') {\n        return 80;\n      } else if (lowerColumnName.includes('date') || lowerColumnName.includes('time')) {\n        return 160;\n      } else {\n        return 120;\n      }\n    },\n    // 标准列宽（用于固定模式的表格）\n    getColumnWidth(columnName) {\n      const lowerColumnName = columnName.toLowerCase();\n\n      // 特殊表格特殊处理\n      if (this.selectedTable === 'email_logs' && lowerColumnName === 'content_html') {\n        return 500;\n      }\n\n      // 根据列名类型分配宽度\n      if (lowerColumnName.includes('content_html') || lowerColumnName.includes('html') || lowerColumnName.includes('content')) {\n        return 300;\n      } else if (lowerColumnName === 'id') {\n        return 80;\n      } else if (lowerColumnName.includes('date') || lowerColumnName.includes('time')) {\n        return 160;\n      } else if (lowerColumnName.includes('name')) {\n        return 120;\n      } else if (lowerColumnName.includes('code') || lowerColumnName.includes('number')) {\n        return 140;\n      } else if (lowerColumnName.includes('title')) {\n        return 120;\n      } else if (lowerColumnName.includes('email')) {\n        return 180;\n      } else if (lowerColumnName.includes('description') || lowerColumnName.includes('comment')) {\n        return 200;\n      } else if (lowerColumnName.includes('status')) {\n        return 120;\n      } else if (lowerColumnName.includes('password') || lowerColumnName.includes('hash')) {\n        return 250;\n      } else {\n        return 120;\n      }\n    },\n    // 格式化单元格内容\n    formatCell(row, column, cellValue) {\n      if (cellValue === null || cellValue === undefined) {\n        return '';\n      }\n\n      // 如果是HTML内容，只显示部分文本并添加提示\n      if (column.property.toLowerCase().includes('content_html') || column.property.toLowerCase().includes('html')) {\n        if (typeof cellValue === 'string' && cellValue.length > 100) {\n          return cellValue.substring(0, 100) + '...';\n        }\n      }\n\n      // 对日期时间格式化\n      if ((column.property.toLowerCase().includes('date') || column.property.toLowerCase().includes('time')) && !isNaN(Date.parse(cellValue))) {\n        try {\n          // 使用日期工具函数，自动转换为北京时间\n          return formatDate(cellValue, 'YYYY-MM-DD HH:mm:ss', true);\n        } catch (e) {\n          console.error('日期格式化错误:', e);\n          return cellValue;\n        }\n      }\n      return cellValue;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}