{"ast":null,"code":"import { recurringReservationApi, reservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'RecurringReservationDetail',\n  data() {\n    return {\n      recurringReservationId: null,\n      recurringReservation: null,\n      childReservations: [],\n      loading: true,\n      childReservationsLoading: false,\n      error: false,\n      errorMessage: '',\n      includePastReservations: true,\n      // 默认选中\"包含已过期预约\"\n      cancelDialogVisible: false,\n      userEmail: '',\n      cancelLoading: false,\n      fromChildReservation: false,\n      highlightReservationNumber: null // 用于高亮显示特定的子预约\n    };\n  },\n  props: {\n    id: {\n      type: [String, Number],\n      required: false\n    }\n  },\n  created() {\n    // 优先使用props中的id，如果没有则使用路由参数\n    this.recurringReservationId = this.id || this.$route.params.id;\n    console.log('Recurring reservation ID:', this.recurringReservationId);\n\n    // 检查是否是从子预约详情页面返回的\n    this.fromChildReservation = this.$route.query.fromChild === 'true';\n\n    // 检查是否有预约序号参数，用于高亮显示特定的子预约\n    if (this.$route.query.reservation_number) {\n      this.highlightReservationNumber = this.$route.query.reservation_number;\n      console.log('高亮显示预约序号:', this.highlightReservationNumber);\n    }\n    this.loadRecurringReservation();\n  },\n  // 添加activated钩子函数，在组件被激活时调用（如从子预约详情页面返回）\n  activated() {\n    // 检查子预约状态是否发生变化\n    this.checkChildReservationUpdates();\n  },\n  methods: {\n    // 加载循环预约详情\n    async loadRecurringReservation() {\n      this.loading = true;\n      this.error = false;\n      try {\n        const response = await recurringReservationApi.getRecurringReservation(this.recurringReservationId);\n        if (response.data.success) {\n          this.recurringReservation = response.data.data;\n          this.userEmail = this.recurringReservation.user_email || '';\n          this.loadChildReservations();\n        } else {\n          this.error = true;\n          this.errorMessage = response.data.message || this.$t('reservation.failedToLoadReservation');\n        }\n      } catch (error) {\n        console.error('Failed to load recurring reservation:', error);\n        this.error = true;\n        this.errorMessage = error.response?.data?.detail || this.$t('reservation.failedToLoadReservation');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 加载子预约列表\n    async loadChildReservations() {\n      this.childReservationsLoading = true;\n      try {\n        // 始终包含已过期的预约，设置include_past=1\n        const response = await recurringReservationApi.getChildReservations(this.recurringReservationId, 1 // 始终设置为1，表示包含已过期的预约\n        );\n        if (response.data.success) {\n          // 获取所有子预约\n          this.childReservations = response.data.reservations || [];\n\n          // 如果includePastReservations为false，则在前端过滤掉已过期的预约\n          if (!this.includePastReservations) {\n            const now = new Date();\n            this.childReservations = this.childReservations.filter(reservation => {\n              // 保留未过期的预约和已取消的预约\n              const endTime = new Date(reservation.end_datetime);\n              return endTime >= now || reservation.status === 'cancelled';\n            });\n          }\n\n          // 按预约序号排序\n          this.childReservations.sort((a, b) => {\n            // 从预约序号中提取数字部分进行比较\n            const numA = a.reservation_number ? parseInt(a.reservation_number.replace(/\\D/g, '')) : 0;\n            const numB = b.reservation_number ? parseInt(b.reservation_number.replace(/\\D/g, '')) : 0;\n            return numA - numB;\n          });\n          console.log('Child reservations loaded:', this.childReservations.length);\n        } else {\n          this.$message.error(response.data.message || this.$t('reservation.failedToLoadChildReservations'));\n        }\n      } catch (error) {\n        console.error('Failed to load child reservations:', error);\n        this.$message.error(this.$t('reservation.failedToLoadChildReservations'));\n      } finally {\n        this.childReservationsLoading = false;\n      }\n    },\n    // 返回上一页\n    goBack() {\n      // 无论从哪里进入，都返回到个人预约管理页面\n      this.$router.push('/reservation/query');\n    },\n    // 查看子预约详情\n    viewChildReservation(reservation) {\n      // 检查是否有预约序号\n      if (reservation.reservation_number) {\n        console.log('通过预约序号查看子预约详情:', reservation.reservation_number);\n\n        // 使用预约序号直接跳转到预约详情页面\n        this.$router.push({\n          path: `/reservation/number/${reservation.reservation_number}`,\n          query: {\n            child: 'true',\n            recurringId: this.recurringReservation.id\n          }\n        });\n\n        // 将预约序号保存到localStorage，以便在页面刷新后仍然可以使用\n        localStorage.setItem('current_reservation_number', reservation.reservation_number);\n        console.log('查看子预约详情:', {\n          id: reservation.id,\n          reservation_code: reservation.reservation_code,\n          reservation_number: reservation.reservation_number,\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime\n        });\n      } else if (reservation.id) {\n        // 如果没有预约序号但有ID，则使用旧方法\n        this.$router.push({\n          path: `/reservation/${reservation.reservation_code}`,\n          query: {\n            child: 'true',\n            id: reservation.id,\n            recurringId: this.recurringReservation.id,\n            startTime: reservation.start_datetime,\n            endTime: reservation.end_datetime\n          }\n        });\n        console.log('使用旧方法查看子预约详情:', {\n          id: reservation.id,\n          reservation_code: reservation.reservation_code,\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime\n        });\n      } else {\n        this.$message.warning('无法查看子预约详情，缺少预约序号和ID');\n      }\n    },\n    // 取消子预约\n    async cancelChildReservation(reservation) {\n      try {\n        console.log('准备取消子预约:', reservation);\n        console.log('子预约序号:', reservation.reservation_number);\n        const result = await this.$confirm(this.$t('reservation.cancelConfirmation'), this.$t('common.warning'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        });\n        if (result === 'confirm') {\n          // 添加预约序号参数，确保只取消特定的子预约\n          const requestData = {\n            user_email: this.recurringReservation.user_email\n          };\n\n          // 添加预约序号参数，确保只取消特定的子预约\n          if (reservation.reservation_number) {\n            requestData.reservation_number = reservation.reservation_number;\n            console.log('预约序号参数存在:', reservation.reservation_number);\n          } else {\n            console.warn('预约序号参数不存在，将取消所有具有相同预约码的预约');\n          }\n          console.log('取消子预约请求参数:', requestData);\n          console.log('预约码:', reservation.reservation_code);\n          const response = await reservationApi.cancelReservation(reservation.reservation_code, requestData);\n          console.log('取消子预约响应:', response.data);\n          if (response.data.success) {\n            this.$message.success(this.$t('reservation.cancelSuccess'));\n\n            // 直接更新子预约状态为已取消\n            reservation.status = 'cancelled';\n\n            // 保存状态变更到localStorage\n            this.saveChildReservationStatus(reservation, 'cancelled');\n\n            // 强制刷新整个页面，确保获取最新数据\n            console.log('子预约已取消，即将刷新页面...');\n            setTimeout(() => {\n              window.location.reload(true);\n            }, 1000);\n          } else {\n            this.$message.error(response.data.message || this.$t('reservation.cancelFailed'));\n          }\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('Failed to cancel reservation:', error);\n          this.$message.error(this.$t('reservation.cancelFailed'));\n        }\n      }\n    },\n    // 保存子预约状态到localStorage\n    saveChildReservationStatus(reservation, status) {\n      if (!reservation) return;\n\n      // 使用预约码作为键\n      const stateKey = `reservation_status_${reservation.reservation_code}`;\n\n      // 保存状态信息\n      const state = {\n        statusText: this.getChildStatusText({\n          ...reservation,\n          status: status\n        }),\n        statusType: this.getChildStatusType({\n          ...reservation,\n          status: status\n        }),\n        dbStatus: status,\n        forcedStatus: status,\n        timestamp: new Date().getTime(),\n        permanent: true,\n        reservationCode: reservation.reservation_code\n      };\n      console.log('保存子预约状态到localStorage:', state);\n      localStorage.setItem(stateKey, JSON.stringify(state));\n    },\n    // 检查子预约状态是否发生变化\n    checkChildReservationUpdates() {\n      console.log('检查子预约状态是否发生变化');\n\n      // 检查是否有子预约状态变更标记\n      const recurringStateKey = `recurring_reservation_${this.recurringReservationId}_child_status_changed`;\n      const recurringStateStr = localStorage.getItem(recurringStateKey);\n      if (recurringStateStr) {\n        try {\n          const recurringState = JSON.parse(recurringStateStr);\n\n          // 检查状态变更是否还是新鲜的（5分钟内）\n          const now = new Date().getTime();\n          const fiveMinutes = 5 * 60 * 1000;\n          if (now - recurringState.timestamp <= fiveMinutes) {\n            console.log('检测到子预约状态变更，刷新列表:', recurringState);\n\n            // 移除状态变更标记\n            localStorage.removeItem(recurringStateKey);\n\n            // 重新加载子预约列表\n            this.loadChildReservations();\n            return;\n          } else {\n            // 如果状态变更过期，移除它\n            localStorage.removeItem(recurringStateKey);\n          }\n        } catch (e) {\n          console.error('解析子预约状态变更标记时出错:', e);\n        }\n      }\n\n      // 如果没有子预约状态变更标记，检查每个子预约的状态\n      if (this.childReservations.length > 0) {\n        let needRefresh = false;\n\n        // 检查每个子预约的状态\n        for (let i = 0; i < this.childReservations.length; i++) {\n          const reservation = this.childReservations[i];\n          const stateKey = `reservation_status_${reservation.reservation_code}`;\n          const savedStateStr = localStorage.getItem(stateKey);\n          if (savedStateStr) {\n            try {\n              const savedState = JSON.parse(savedStateStr);\n\n              // 检查保存的状态是否还是新鲜的（5分钟内）\n              const now = new Date().getTime();\n              const fiveMinutes = 5 * 60 * 1000;\n              if (now - savedState.timestamp <= fiveMinutes) {\n                console.log(`检测到子预约 ${reservation.reservation_code} 的状态可能已更改，保存的状态:`, savedState);\n\n                // 如果状态已变更为已取消，需要刷新子预约列表\n                if (savedState.forcedStatus === 'cancelled' || savedState.statusText === this.$t('reservation.cancelled') && savedState.statusType === 'danger') {\n                  console.log(`子预约 ${reservation.reservation_code} 已被标记为已取消，需要刷新列表`);\n                  needRefresh = true;\n                  break;\n                }\n              } else {\n                // 如果状态过期，则移除它\n                localStorage.removeItem(stateKey);\n              }\n            } catch (e) {\n              console.error(`解析子预约 ${reservation.reservation_code} 的保存状态时出错:`, e);\n            }\n          }\n        }\n\n        // 如果需要刷新，重新加载子预约列表\n        if (needRefresh) {\n          console.log('检测到子预约状态变更，刷新列表');\n          this.loadChildReservations();\n        }\n      }\n    },\n    // 显示取消循环预约对话框\n    showCancelDialog() {\n      this.cancelDialogVisible = true;\n    },\n    // 确认取消循环预约\n    async confirmCancel() {\n      this.cancelLoading = true;\n      try {\n        const response = await recurringReservationApi.cancelRecurringReservation(this.recurringReservationId, this.userEmail || null);\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.cancelSuccess'));\n          this.cancelDialogVisible = false;\n          this.loadRecurringReservation();\n        } else {\n          this.$message.error(response.data.message || this.$t('reservation.cancelFailed'));\n        }\n      } catch (error) {\n        console.error('Failed to cancel recurring reservation:', error);\n        this.$message.error(this.$t('reservation.cancelFailed'));\n      } finally {\n        this.cancelLoading = false;\n      }\n    },\n    // 格式化日期\n    formatDate(dateStr) {\n      if (!dateStr) return '';\n      const date = new Date(dateStr);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n    },\n    // 格式化时间\n    formatTime(timeStr) {\n      if (!timeStr) return '';\n      return timeStr.substring(0, 5);\n    },\n    // 格式化日期时间\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return '';\n      const date = new Date(cellValue);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    // 格式化星期几\n    formatDaysOfWeek(days) {\n      if (!days || days.length === 0) return '';\n      const dayNames = [this.$t('reservation.sunday'), this.$t('reservation.monday'), this.$t('reservation.tuesday'), this.$t('reservation.wednesday'), this.$t('reservation.thursday'), this.$t('reservation.friday'), this.$t('reservation.saturday')];\n      return days.map(day => dayNames[day]).join(', ');\n    },\n    // 格式化每月几号\n    formatDaysOfMonth(days) {\n      if (!days || days.length === 0) return '';\n      return days.join(', ');\n    },\n    // 获取循环模式文本\n    getPatternText(pattern) {\n      const patterns = {\n        'daily': this.$t('reservation.daily'),\n        'weekly': this.$t('reservation.weekly'),\n        'monthly': this.$t('reservation.monthly'),\n        'custom': this.$t('reservation.custom')\n      };\n      return patterns[pattern] || pattern;\n    },\n    // 获取循环预约状态类型\n    getStatusType(reservation) {\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n      return 'success';\n    },\n    // 获取循环预约状态文本\n    getStatusText(reservation) {\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled');\n      }\n      return this.$t('reservation.active');\n    },\n    // 获取子预约状态类型\n    getChildStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning';\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return 'primary';\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      return 'success';\n    },\n    // 获取子预约状态文本\n    getChildStatusText(reservation) {\n      // 如果预约已取消，显示\"已取消\"\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled');\n      }\n\n      // 如果预约已过期，显示\"已过期\"\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.expired');\n      }\n\n      // 如果预约正在进行中，显示\"进行中\"\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return this.$t('reservation.ongoing');\n      }\n\n      // 如果预约已确认且未开始，显示\"已确认\"\n      return this.$t('reservation.confirmed');\n    },\n    // 获取行的类名，用于高亮显示特定的子预约\n    getRowClassName({\n      row\n    }) {\n      if (this.highlightReservationNumber && row.reservation_number === this.highlightReservationNumber) {\n        return 'highlighted-row';\n      }\n      return '';\n    }\n  }\n};","map":{"version":3,"names":["recurringReservationApi","reservationApi","isReservationExpired","name","data","recurringReservationId","recurringReservation","childReservations","loading","childReservationsLoading","error","errorMessage","includePastReservations","cancelDialogVisible","userEmail","cancelLoading","fromChildReservation","highlightReservationNumber","props","id","type","String","Number","required","created","$route","params","console","log","query","fromChild","reservation_number","loadRecurringReservation","activated","checkChildReservationUpdates","methods","response","getRecurringReservation","success","user_email","loadChildReservations","message","$t","detail","getChildReservations","reservations","now","Date","filter","reservation","endTime","end_datetime","status","sort","a","b","numA","parseInt","replace","numB","length","$message","goBack","$router","push","viewChildReservation","path","child","recurringId","localStorage","setItem","reservation_code","startTime","start_datetime","warning","cancelChildReservation","result","$confirm","confirmButtonText","cancelButtonText","requestData","warn","cancelReservation","saveChildReservationStatus","setTimeout","window","location","reload","stateKey","state","statusText","getChildStatusText","statusType","getChildStatusType","dbStatus","forcedStatus","timestamp","getTime","permanent","reservationCode","JSON","stringify","recurringStateKey","recurringStateStr","getItem","recurringState","parse","fiveMinutes","removeItem","e","needRefresh","i","savedStateStr","savedState","showCancelDialog","confirmCancel","cancelRecurringReservation","formatDate","dateStr","date","getFullYear","getMonth","padStart","getDate","formatTime","timeStr","substring","formatDateTime","row","column","cellValue","getHours","getMinutes","formatDaysOfWeek","days","dayNames","map","day","join","formatDaysOfMonth","getPatternText","pattern","patterns","getStatusType","getStatusText","start","end","getRowClassName"],"sources":["src/views/reservation/RecurringReservationDetail.vue"],"sourcesContent":["<template>\n  <div class=\"recurring-reservation-detail\">\n    <div v-if=\"loading\" class=\"loading-container\">\n      <el-skeleton :rows=\"10\" animated />\n    </div>\n\n    <div v-else-if=\"error\" class=\"error-container\">\n      <el-result\n        icon=\"error\"\n        :title=\"$t('common.error')\"\n        :sub-title=\"errorMessage\"\n      >\n        <template #extra>\n          <el-button type=\"primary\" @click=\"$router.push('/')\">{{ $t('common.backToHome') }}</el-button>\n        </template>\n      </el-result>\n    </div>\n\n    <div v-else class=\"content-container\">\n      <div class=\"header-actions\">\n        <el-button icon=\"el-icon-back\" @click=\"goBack\">{{ $t('common.back') }}</el-button>\n        <el-button type=\"danger\" @click=\"showCancelDialog\" :disabled=\"recurringReservation.status === 'cancelled'\">\n          取消循环预约\n        </el-button>\n      </div>\n\n      <!-- 循环预约信息卡片 -->\n      <el-card class=\"reservation-card\" shadow=\"hover\">\n        <div slot=\"header\" class=\"card-header\">\n          <span>{{ $t('reservation.recurringReservationDetails') }}</span>\n          <el-tag :type=\"getStatusType(recurringReservation)\" size=\"medium\">\n            {{ getStatusText(recurringReservation) }}\n          </el-tag>\n        </div>\n\n        <div class=\"reservation-info\">\n          <div class=\"info-section\">\n            <h3>预约信息</h3>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('reservation.code') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.reservation_code }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('reservation.pattern') }}:</span>\n              <span class=\"info-value\">{{ getPatternText(recurringReservation.pattern_type) }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('reservation.dateRange') }}:</span>\n              <span class=\"info-value\">{{ formatDate(recurringReservation.start_date) }} - {{ formatDate(recurringReservation.end_date) }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('reservation.timeRange') }}:</span>\n              <span class=\"info-value\">{{ formatTime(recurringReservation.start_time) }} - {{ formatTime(recurringReservation.end_time) }}</span>\n            </div>\n            <div class=\"info-row\" v-if=\"recurringReservation.days_of_week && recurringReservation.days_of_week.length > 0\">\n              <span class=\"info-label\">{{ $t('reservation.daysOfWeek') }}:</span>\n              <span class=\"info-value\">{{ formatDaysOfWeek(recurringReservation.days_of_week) }}</span>\n            </div>\n            <div class=\"info-row\" v-if=\"recurringReservation.days_of_month && recurringReservation.days_of_month.length > 0\">\n              <span class=\"info-label\">{{ $t('reservation.daysOfMonth') }}:</span>\n              <span class=\"info-value\">{{ formatDaysOfMonth(recurringReservation.days_of_month) }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('reservation.purpose') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.purpose || $t('common.notProvided') }}</span>\n            </div>\n          </div>\n\n          <div class=\"info-section\">\n            <h3>设备信息</h3>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('equipment.name') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.equipment_name }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('equipment.category') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.equipment_category }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('equipment.location') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.equipment_location || $t('common.notProvided') }}</span>\n            </div>\n          </div>\n\n          <div class=\"info-section\">\n            <h3>用户信息</h3>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('reservation.userName') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.user_name }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('reservation.userDepartment') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.user_department }}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"info-label\">{{ $t('reservation.userContact') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.user_contact }}</span>\n            </div>\n            <div class=\"info-row\" v-if=\"recurringReservation.user_email\">\n              <span class=\"info-label\">{{ $t('reservation.userEmail') }}:</span>\n              <span class=\"info-value\">{{ recurringReservation.user_email }}</span>\n            </div>\n          </div>\n        </div>\n      </el-card>\n\n      <!-- 子预约列表 -->\n      <el-card class=\"child-reservations-card\" shadow=\"hover\">\n        <div slot=\"header\" class=\"card-header\">\n          <span>{{ $t('reservation.childReservations') }}</span>\n          <el-switch\n            v-model=\"includePastReservations\"\n            :active-text=\"$t('reservation.includePast')\"\n            @change=\"loadChildReservations\"\n          ></el-switch>\n        </div>\n\n        <div v-if=\"childReservationsLoading\" class=\"loading-container\">\n          <el-skeleton :rows=\"5\" animated />\n        </div>\n\n        <div v-else-if=\"childReservations.length === 0\" class=\"empty-state\">\n          <el-empty :description=\"$t('reservation.noChildReservations')\"></el-empty>\n        </div>\n\n        <div v-else class=\"child-reservations-list\">\n          <el-table\n            :data=\"childReservations\"\n            style=\"width: 100%\"\n            border\n            stripe\n            :row-class-name=\"getRowClassName\"\n          >\n            <el-table-column\n              type=\"index\"\n              :label=\"$t('common.id')\"\n              width=\"60\"\n            ></el-table-column>\n            <el-table-column\n              prop=\"reservation_number\"\n              :label=\"$t('reservation.number')\"\n              width=\"160\"\n            ></el-table-column>\n            <el-table-column\n              prop=\"reservation_code\"\n              :label=\"$t('reservation.code')\"\n              width=\"120\"\n            ></el-table-column>\n            <el-table-column\n              prop=\"start_datetime\"\n              :label=\"$t('reservation.startTime')\"\n              width=\"150\"\n              :formatter=\"formatDateTime\"\n            ></el-table-column>\n            <el-table-column\n              prop=\"end_datetime\"\n              :label=\"$t('reservation.endTime')\"\n              width=\"150\"\n              :formatter=\"formatDateTime\"\n            ></el-table-column>\n            <el-table-column\n              prop=\"status\"\n              :label=\"$t('reservation.status')\"\n              width=\"140\"\n            >\n              <template slot-scope=\"scope\">\n                <el-tag :type=\"getChildStatusType(scope.row)\" size=\"medium\">\n                  {{ getChildStatusText(scope.row) }}\n                </el-tag>\n              </template>\n            </el-table-column>\n            <el-table-column\n              :label=\"$t('common.actions')\"\n              width=\"150\"\n            >\n              <template slot-scope=\"scope\">\n                <el-button\n                  size=\"mini\"\n                  type=\"primary\"\n                  @click=\"viewChildReservation(scope.row)\"\n                  icon=\"el-icon-view\"\n                  circle\n                ></el-button>\n                <el-button\n                  size=\"mini\"\n                  type=\"danger\"\n                  @click=\"cancelChildReservation(scope.row)\"\n                  :disabled=\"scope.row.status === 'cancelled' || scope.row.status === 'expired'\"\n                  icon=\"el-icon-delete\"\n                  circle\n                ></el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- 取消循环预约对话框 -->\n    <el-dialog\n      :title=\"$t('reservation.cancelRecurringReservation')\"\n      :visible.sync=\"cancelDialogVisible\"\n      width=\"500px\"\n    >\n      <div class=\"cancel-options\">\n        <p>{{ $t('reservation.cancelRecurringReservationConfirm') }}</p>\n        <div class=\"email-input\">\n          <el-form-item :label=\"$t('reservation.userEmail')\" prop=\"userEmail\">\n            <el-input v-model=\"userEmail\" :placeholder=\"$t('reservation.emailForConfirmation')\"></el-input>\n          </el-form-item>\n        </div>\n      </div>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"cancelDialogVisible = false\">{{ $t('common.cancel') }}</el-button>\n        <el-button type=\"danger\" @click=\"confirmCancel\" :loading=\"cancelLoading\">{{ $t('common.confirm') }}</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { recurringReservationApi, reservationApi } from '@/api'\nimport { isReservationExpired } from '@/utils/date'\n\nexport default {\n  name: 'RecurringReservationDetail',\n\n  data() {\n    return {\n      recurringReservationId: null,\n      recurringReservation: null,\n      childReservations: [],\n      loading: true,\n      childReservationsLoading: false,\n      error: false,\n      errorMessage: '',\n      includePastReservations: true, // 默认选中\"包含已过期预约\"\n      cancelDialogVisible: false,\n      userEmail: '',\n      cancelLoading: false,\n      fromChildReservation: false,\n      highlightReservationNumber: null // 用于高亮显示特定的子预约\n    }\n  },\n\n  props: {\n    id: {\n      type: [String, Number],\n      required: false\n    }\n  },\n\n  created() {\n    // 优先使用props中的id，如果没有则使用路由参数\n    this.recurringReservationId = this.id || this.$route.params.id\n    console.log('Recurring reservation ID:', this.recurringReservationId)\n\n    // 检查是否是从子预约详情页面返回的\n    this.fromChildReservation = this.$route.query.fromChild === 'true'\n\n    // 检查是否有预约序号参数，用于高亮显示特定的子预约\n    if (this.$route.query.reservation_number) {\n      this.highlightReservationNumber = this.$route.query.reservation_number\n      console.log('高亮显示预约序号:', this.highlightReservationNumber)\n    }\n\n    this.loadRecurringReservation()\n  },\n\n  // 添加activated钩子函数，在组件被激活时调用（如从子预约详情页面返回）\n  activated() {\n    // 检查子预约状态是否发生变化\n    this.checkChildReservationUpdates()\n  },\n\n  methods: {\n    // 加载循环预约详情\n    async loadRecurringReservation() {\n      this.loading = true\n      this.error = false\n\n      try {\n        const response = await recurringReservationApi.getRecurringReservation(this.recurringReservationId)\n\n        if (response.data.success) {\n          this.recurringReservation = response.data.data\n          this.userEmail = this.recurringReservation.user_email || ''\n          this.loadChildReservations()\n        } else {\n          this.error = true\n          this.errorMessage = response.data.message || this.$t('reservation.failedToLoadReservation')\n        }\n      } catch (error) {\n        console.error('Failed to load recurring reservation:', error)\n        this.error = true\n        this.errorMessage = error.response?.data?.detail || this.$t('reservation.failedToLoadReservation')\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 加载子预约列表\n    async loadChildReservations() {\n      this.childReservationsLoading = true\n\n      try {\n        // 始终包含已过期的预约，设置include_past=1\n        const response = await recurringReservationApi.getChildReservations(\n          this.recurringReservationId,\n          1  // 始终设置为1，表示包含已过期的预约\n        )\n\n        if (response.data.success) {\n          // 获取所有子预约\n          this.childReservations = response.data.reservations || [];\n\n          // 如果includePastReservations为false，则在前端过滤掉已过期的预约\n          if (!this.includePastReservations) {\n            const now = new Date();\n            this.childReservations = this.childReservations.filter(reservation => {\n              // 保留未过期的预约和已取消的预约\n              const endTime = new Date(reservation.end_datetime);\n              return endTime >= now || reservation.status === 'cancelled';\n            });\n          }\n\n          // 按预约序号排序\n          this.childReservations.sort((a, b) => {\n            // 从预约序号中提取数字部分进行比较\n            const numA = a.reservation_number ? parseInt(a.reservation_number.replace(/\\D/g, '')) : 0;\n            const numB = b.reservation_number ? parseInt(b.reservation_number.replace(/\\D/g, '')) : 0;\n            return numA - numB;\n          });\n\n          console.log('Child reservations loaded:', this.childReservations.length)\n        } else {\n          this.$message.error(response.data.message || this.$t('reservation.failedToLoadChildReservations'))\n        }\n      } catch (error) {\n        console.error('Failed to load child reservations:', error)\n        this.$message.error(this.$t('reservation.failedToLoadChildReservations'))\n      } finally {\n        this.childReservationsLoading = false\n      }\n    },\n\n    // 返回上一页\n    goBack() {\n      // 无论从哪里进入，都返回到个人预约管理页面\n      this.$router.push('/reservation/query')\n    },\n\n    // 查看子预约详情\n    viewChildReservation(reservation) {\n      // 检查是否有预约序号\n      if (reservation.reservation_number) {\n        console.log('通过预约序号查看子预约详情:', reservation.reservation_number)\n\n        // 使用预约序号直接跳转到预约详情页面\n        this.$router.push({\n          path: `/reservation/number/${reservation.reservation_number}`,\n          query: {\n            child: 'true',\n            recurringId: this.recurringReservation.id\n          }\n        })\n\n        // 将预约序号保存到localStorage，以便在页面刷新后仍然可以使用\n        localStorage.setItem('current_reservation_number', reservation.reservation_number)\n\n        console.log('查看子预约详情:', {\n          id: reservation.id,\n          reservation_code: reservation.reservation_code,\n          reservation_number: reservation.reservation_number,\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime\n        })\n      } else if (reservation.id) {\n        // 如果没有预约序号但有ID，则使用旧方法\n        this.$router.push({\n          path: `/reservation/${reservation.reservation_code}`,\n          query: {\n            child: 'true',\n            id: reservation.id,\n            recurringId: this.recurringReservation.id,\n            startTime: reservation.start_datetime,\n            endTime: reservation.end_datetime\n          }\n        })\n\n        console.log('使用旧方法查看子预约详情:', {\n          id: reservation.id,\n          reservation_code: reservation.reservation_code,\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime\n        })\n      } else {\n        this.$message.warning('无法查看子预约详情，缺少预约序号和ID')\n      }\n    },\n\n    // 取消子预约\n    async cancelChildReservation(reservation) {\n      try {\n        console.log('准备取消子预约:', reservation)\n        console.log('子预约序号:', reservation.reservation_number)\n\n        const result = await this.$confirm(\n          this.$t('reservation.cancelConfirmation'),\n          this.$t('common.warning'),\n          {\n            confirmButtonText: this.$t('common.confirm'),\n            cancelButtonText: this.$t('common.cancel'),\n            type: 'warning'\n          }\n        )\n\n        if (result === 'confirm') {\n          // 添加预约序号参数，确保只取消特定的子预约\n          const requestData = {\n            user_email: this.recurringReservation.user_email\n          }\n\n          // 添加预约序号参数，确保只取消特定的子预约\n          if (reservation.reservation_number) {\n            requestData.reservation_number = reservation.reservation_number\n            console.log('预约序号参数存在:', reservation.reservation_number)\n          } else {\n            console.warn('预约序号参数不存在，将取消所有具有相同预约码的预约')\n          }\n\n          console.log('取消子预约请求参数:', requestData)\n          console.log('预约码:', reservation.reservation_code)\n\n          const response = await reservationApi.cancelReservation(reservation.reservation_code, requestData)\n\n          console.log('取消子预约响应:', response.data)\n\n          if (response.data.success) {\n            this.$message.success(this.$t('reservation.cancelSuccess'))\n\n            // 直接更新子预约状态为已取消\n            reservation.status = 'cancelled'\n\n            // 保存状态变更到localStorage\n            this.saveChildReservationStatus(reservation, 'cancelled')\n\n            // 强制刷新整个页面，确保获取最新数据\n            console.log('子预约已取消，即将刷新页面...')\n            setTimeout(() => {\n              window.location.reload(true)\n            }, 1000)\n          } else {\n            this.$message.error(response.data.message || this.$t('reservation.cancelFailed'))\n          }\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('Failed to cancel reservation:', error)\n          this.$message.error(this.$t('reservation.cancelFailed'))\n        }\n      }\n    },\n\n    // 保存子预约状态到localStorage\n    saveChildReservationStatus(reservation, status) {\n      if (!reservation) return\n\n      // 使用预约码作为键\n      const stateKey = `reservation_status_${reservation.reservation_code}`\n\n      // 保存状态信息\n      const state = {\n        statusText: this.getChildStatusText({ ...reservation, status: status }),\n        statusType: this.getChildStatusType({ ...reservation, status: status }),\n        dbStatus: status,\n        forcedStatus: status,\n        timestamp: new Date().getTime(),\n        permanent: true,\n        reservationCode: reservation.reservation_code\n      }\n\n      console.log('保存子预约状态到localStorage:', state)\n      localStorage.setItem(stateKey, JSON.stringify(state))\n    },\n\n    // 检查子预约状态是否发生变化\n    checkChildReservationUpdates() {\n      console.log('检查子预约状态是否发生变化')\n\n      // 检查是否有子预约状态变更标记\n      const recurringStateKey = `recurring_reservation_${this.recurringReservationId}_child_status_changed`\n      const recurringStateStr = localStorage.getItem(recurringStateKey)\n\n      if (recurringStateStr) {\n        try {\n          const recurringState = JSON.parse(recurringStateStr)\n\n          // 检查状态变更是否还是新鲜的（5分钟内）\n          const now = new Date().getTime()\n          const fiveMinutes = 5 * 60 * 1000\n\n          if (now - recurringState.timestamp <= fiveMinutes) {\n            console.log('检测到子预约状态变更，刷新列表:', recurringState)\n\n            // 移除状态变更标记\n            localStorage.removeItem(recurringStateKey)\n\n            // 重新加载子预约列表\n            this.loadChildReservations()\n            return\n          } else {\n            // 如果状态变更过期，移除它\n            localStorage.removeItem(recurringStateKey)\n          }\n        } catch (e) {\n          console.error('解析子预约状态变更标记时出错:', e)\n        }\n      }\n\n      // 如果没有子预约状态变更标记，检查每个子预约的状态\n      if (this.childReservations.length > 0) {\n        let needRefresh = false\n\n        // 检查每个子预约的状态\n        for (let i = 0; i < this.childReservations.length; i++) {\n          const reservation = this.childReservations[i]\n          const stateKey = `reservation_status_${reservation.reservation_code}`\n          const savedStateStr = localStorage.getItem(stateKey)\n\n          if (savedStateStr) {\n            try {\n              const savedState = JSON.parse(savedStateStr)\n\n              // 检查保存的状态是否还是新鲜的（5分钟内）\n              const now = new Date().getTime()\n              const fiveMinutes = 5 * 60 * 1000\n\n              if (now - savedState.timestamp <= fiveMinutes) {\n                console.log(`检测到子预约 ${reservation.reservation_code} 的状态可能已更改，保存的状态:`, savedState)\n\n                // 如果状态已变更为已取消，需要刷新子预约列表\n                if (savedState.forcedStatus === 'cancelled' ||\n                    (savedState.statusText === this.$t('reservation.cancelled') &&\n                     savedState.statusType === 'danger')) {\n                  console.log(`子预约 ${reservation.reservation_code} 已被标记为已取消，需要刷新列表`)\n                  needRefresh = true\n                  break\n                }\n              } else {\n                // 如果状态过期，则移除它\n                localStorage.removeItem(stateKey)\n              }\n            } catch (e) {\n              console.error(`解析子预约 ${reservation.reservation_code} 的保存状态时出错:`, e)\n            }\n          }\n        }\n\n        // 如果需要刷新，重新加载子预约列表\n        if (needRefresh) {\n          console.log('检测到子预约状态变更，刷新列表')\n          this.loadChildReservations()\n        }\n      }\n    },\n\n    // 显示取消循环预约对话框\n    showCancelDialog() {\n      this.cancelDialogVisible = true\n    },\n\n    // 确认取消循环预约\n    async confirmCancel() {\n      this.cancelLoading = true\n\n      try {\n        const response = await recurringReservationApi.cancelRecurringReservation(\n          this.recurringReservationId,\n          this.userEmail || null\n        )\n\n        if (response.data.success) {\n          this.$message.success(this.$t('reservation.cancelSuccess'))\n          this.cancelDialogVisible = false\n          this.loadRecurringReservation()\n        } else {\n          this.$message.error(response.data.message || this.$t('reservation.cancelFailed'))\n        }\n      } catch (error) {\n        console.error('Failed to cancel recurring reservation:', error)\n        this.$message.error(this.$t('reservation.cancelFailed'))\n      } finally {\n        this.cancelLoading = false\n      }\n    },\n\n    // 格式化日期\n    formatDate(dateStr) {\n      if (!dateStr) return ''\n      const date = new Date(dateStr)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`\n    },\n\n    // 格式化时间\n    formatTime(timeStr) {\n      if (!timeStr) return ''\n      return timeStr.substring(0, 5)\n    },\n\n    // 格式化日期时间\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return ''\n      const date = new Date(cellValue)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    },\n\n    // 格式化星期几\n    formatDaysOfWeek(days) {\n      if (!days || days.length === 0) return ''\n\n      const dayNames = [\n        this.$t('reservation.sunday'),\n        this.$t('reservation.monday'),\n        this.$t('reservation.tuesday'),\n        this.$t('reservation.wednesday'),\n        this.$t('reservation.thursday'),\n        this.$t('reservation.friday'),\n        this.$t('reservation.saturday')\n      ]\n\n      return days.map(day => dayNames[day]).join(', ')\n    },\n\n    // 格式化每月几号\n    formatDaysOfMonth(days) {\n      if (!days || days.length === 0) return ''\n      return days.join(', ')\n    },\n\n    // 获取循环模式文本\n    getPatternText(pattern) {\n      const patterns = {\n        'daily': this.$t('reservation.daily'),\n        'weekly': this.$t('reservation.weekly'),\n        'monthly': this.$t('reservation.monthly'),\n        'custom': this.$t('reservation.custom')\n      }\n      return patterns[pattern] || pattern\n    },\n\n    // 获取循环预约状态类型\n    getStatusType(reservation) {\n      if (reservation.status === 'cancelled') {\n        return 'danger'\n      }\n      return 'success'\n    },\n\n    // 获取循环预约状态文本\n    getStatusText(reservation) {\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled')\n      }\n      return this.$t('reservation.active')\n    },\n\n    // 获取子预约状态类型\n    getChildStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger'\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning'\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return 'primary'\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      return 'success'\n    },\n\n    // 获取子预约状态文本\n    getChildStatusText(reservation) {\n      // 如果预约已取消，显示\"已取消\"\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled')\n      }\n\n      // 如果预约已过期，显示\"已过期\"\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.expired')\n      }\n\n      // 如果预约正在进行中，显示\"进行中\"\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return this.$t('reservation.ongoing')\n      }\n\n      // 如果预约已确认且未开始，显示\"已确认\"\n      return this.$t('reservation.confirmed')\n    },\n\n    // 获取行的类名，用于高亮显示特定的子预约\n    getRowClassName({ row }) {\n      if (this.highlightReservationNumber && row.reservation_number === this.highlightReservationNumber) {\n        return 'highlighted-row'\n      }\n      return ''\n    }\n  }\n}\n</script>\n\n<style scoped>\n.recurring-reservation-detail {\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.loading-container,\n.error-container {\n  margin: 40px 0;\n}\n\n.header-actions {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n}\n\n.reservation-card,\n.child-reservations-card {\n  margin-bottom: 30px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.reservation-info {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n}\n\n.info-section {\n  margin-bottom: 20px;\n}\n\n.info-section h3 {\n  margin-top: 0;\n  margin-bottom: 15px;\n  font-size: 16px;\n  color: #303133;\n  border-bottom: 1px solid #EBEEF5;\n  padding-bottom: 10px;\n}\n\n.info-row {\n  margin-bottom: 10px;\n  line-height: 1.5;\n}\n\n.info-label {\n  font-weight: bold;\n  color: #606266;\n  margin-right: 5px;\n}\n\n.info-value {\n  color: #303133;\n}\n\n.empty-state {\n  padding: 30px 0;\n}\n\n.cancel-options {\n  padding: 0 20px;\n}\n\n.cancel-options p {\n  margin-bottom: 20px;\n  color: #606266;\n}\n\n.email-input {\n  margin-top: 20px;\n}\n\n.child-reservations-list {\n  margin-top: 20px;\n}\n\n.highlighted-row {\n  background-color: #fdf5e6 !important; /* 浅橙色背景 */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}