{"ast":null,"code":"import { formatDateTime, isReservationExpired } from '@/utils/dateUtils';\nimport equipmentApi from '@/api/equipment';\nimport reservationApi from '@/api/reservation';\nexport default {\n  name: 'HomePage',\n  data() {\n    return {\n      // 公共查询相关\n      loading: false,\n      querySubmitted: false,\n      reservations: [],\n      categories: [],\n      queryForm: {\n        category: '',\n        dateRange: null\n      }\n    };\n  },\n  created() {\n    // 获取设备类别\n    this.fetchCategories();\n\n    // 默认加载公开查询数据\n    this.handleQuery();\n  },\n  methods: {\n    goToEquipment() {\n      this.$router.push('/equipment');\n    },\n    goToQuery() {\n      this.$router.push('/reservation/query');\n    },\n    goToReservationManage() {\n      this.$router.push('/reservation/query');\n    },\n    // 获取设备类别\n    async fetchCategories() {\n      try {\n        const response = await equipmentApi.getCategories();\n        if (response.data && response.data.categories) {\n          // 处理不同的数据格式\n          if (Array.isArray(response.data.categories)) {\n            // 如果是数组格式\n            this.categories = response.data.categories.map(item => {\n              if (typeof item === 'string') return item;\n              if (item && typeof item === 'object') {\n                return item.category || Object.keys(item)[0] || '';\n              }\n              return '';\n            }).filter(Boolean);\n          } else {\n            // 如果是对象格式\n            this.categories = Object.keys(response.data.categories);\n          }\n        } else {\n          console.error('Invalid categories data format:', response.data);\n          this.categories = [];\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment categories:', error);\n        this.categories = [];\n      }\n    },\n    // 处理公共查询\n    async handleQuery() {\n      this.loading = true;\n      this.querySubmitted = true;\n      try {\n        // 准备查询参数\n        const params = {\n          limit: 100 // 设置较大的限制以获取更多结果\n        };\n\n        // 添加类别过滤\n        if (this.queryForm.category) {\n          // 需要先获取该类别的所有设备ID\n          const equipmentResponse = await equipmentApi.getEquipments({\n            category: this.queryForm.category,\n            limit: 100\n          });\n          if (equipmentResponse.data && equipmentResponse.data.items && equipmentResponse.data.items.length > 0) {\n            // 如果有设备，使用类别参数进行查询\n            params.category = this.queryForm.category;\n          }\n        }\n\n        // 添加日期范围过滤\n        if (this.queryForm.dateRange && this.queryForm.dateRange.length === 2) {\n          const [startDate, endDate] = this.queryForm.dateRange;\n          params.from_date = startDate.toISOString();\n\n          // 将结束日期调整为当天的最后一秒\n          const endDateObj = new Date(endDate);\n          endDateObj.setHours(23, 59, 59, 999);\n          params.to_date = endDateObj.toISOString();\n        }\n\n        // 发送请求\n        const response = await reservationApi.getReservations(params);\n        this.reservations = response.data.items;\n      } catch (error) {\n        console.error('Failed to query public reservations:', error);\n        this.$message.error(this.$t('error.queryFailed'));\n        this.reservations = [];\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 重置查询表单\n    resetQuery() {\n      this.queryForm.category = '';\n      this.queryForm.dateRange = null;\n      this.handleQuery();\n    },\n    // 格式化日期时间\n    formatDateTime(row, column, cellValue) {\n      return formatDateTime(cellValue);\n    },\n    // 获取状态类型\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning';\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return 'primary';\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success';\n    },\n    // 获取状态文本\n    getStatusText(reservation) {\n      // 如果预约已取消，显示“已取消”\n      if (reservation.status === 'cancelled') {\n        return '已取消';\n      }\n\n      // 如果预约已过期，显示“已过期”\n      if (isReservationExpired(reservation.end_datetime)) {\n        return '已过期';\n      }\n\n      // 如果预约正在进行中，显示“使用中”\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return '使用中';\n      }\n\n      // 如果预约已确认且未开始，显示“已确认”\n      return '已确认';\n    }\n  }\n};","map":{"version":3,"names":["formatDateTime","isReservationExpired","equipmentApi","reservationApi","name","data","loading","querySubmitted","reservations","categories","queryForm","category","dateRange","created","fetchCategories","handleQuery","methods","goToEquipment","$router","push","goToQuery","goToReservationManage","response","getCategories","Array","isArray","map","item","Object","keys","filter","Boolean","console","error","params","limit","equipmentResponse","getEquipments","items","length","startDate","endDate","from_date","toISOString","endDateObj","Date","setHours","to_date","getReservations","$message","$t","resetQuery","row","column","cellValue","getStatusType","reservation","status","end_datetime","now","start","start_datetime","end","getStatusText"],"sources":["src/views/Home.vue"],"sourcesContent":["<template>\n  <div class=\"home-page\">\n    <div class=\"banner\">\n      <h1>{{ $t('home.welcome') }}</h1>\n      <p class=\"description\">{{ $t('home.description') }}</p>\n      <!-- 移除重复按钮 -->\n    </div>\n\n    <div class=\"features\">\n      <el-row :gutter=\"30\">\n        <el-col :xs=\"24\" :sm=\"12\">\n          <div class=\"feature-card\">\n            <i class=\"el-icon-view feature-icon\"></i>\n            <h3>查看预定情况</h3>\n            <p>查看设备的预定情况，帮助您合理安排预定计划。</p>\n            <el-button type=\"primary\" @click=\"goToEquipment\">\n              浏览设备 <i class=\"el-icon-arrow-right\"></i>\n            </el-button>\n          </div>\n        </el-col>\n\n        <el-col :xs=\"24\" :sm=\"12\">\n          <div class=\"feature-card\">\n            <i class=\"el-icon-s-order feature-icon\"></i>\n            <h3>我的预定管理</h3>\n            <p>创建新预定、查询和管理您的预定记录，修改或取消已有预定。</p>\n            <el-button type=\"success\" @click=\"goToReservationManage\">\n              管理预定 <i class=\"el-icon-arrow-right\"></i>\n            </el-button>\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n\n    <div class=\"public-query-section\">\n      <h2>设备预定查询</h2>\n\n      <el-form :model=\"queryForm\" label-position=\"top\" class=\"query-form\">\n        <el-row :gutter=\"20\">\n          <el-col :xs=\"24\" :sm=\"12\">\n            <el-form-item label=\"设备类别\">\n              <el-select\n                v-model=\"queryForm.category\"\n                placeholder=\"所有类别\"\n                clearable\n                style=\"width: 100%\"\n                @change=\"handleQuery\"\n              >\n                <el-option\n                  v-for=\"category in categories\"\n                  :key=\"category\"\n                  :label=\"category\"\n                  :value=\"category\"\n                ></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n\n          <el-col :xs=\"24\" :sm=\"12\">\n            <el-form-item label=\"日期范围\">\n              <el-date-picker\n                v-model=\"queryForm.dateRange\"\n                type=\"daterange\"\n                range-separator=\"-\"\n                start-placeholder=\"开始日期\"\n                end-placeholder=\"结束日期\"\n                style=\"width: 100%\"\n                @change=\"handleQuery\"\n              ></el-date-picker>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-form-item>\n          <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"handleQuery\" :loading=\"loading\">\n            查询\n          </el-button>\n          <el-button @click=\"resetQuery\">重置</el-button>\n        </el-form-item>\n      </el-form>\n\n      <!-- 查询结果 -->\n      <div v-if=\"reservations.length > 0\" class=\"query-results\">\n        <el-table\n          :data=\"reservations\"\n          style=\"width: 100%\"\n          :default-sort=\"{ prop: 'start_datetime', order: 'ascending' }\"\n          v-loading=\"loading\"\n          border\n        >\n          <el-table-column\n            prop=\"equipment_name\"\n            label=\"设备名称\"\n            min-width=\"120\"\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"equipment_category\"\n            label=\"设备类别\"\n            min-width=\"100\"\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"user_name\"\n            label=\"预定人\"\n            min-width=\"100\"\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"user_department\"\n            label=\"预定部门\"\n            min-width=\"100\"\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"start_datetime\"\n            label=\"开始时间\"\n            min-width=\"160\"\n            :formatter=\"formatDateTime\"\n            sortable\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"end_datetime\"\n            label=\"结束时间\"\n            min-width=\"160\"\n            :formatter=\"formatDateTime\"\n            sortable\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"status\"\n            label=\"状态\"\n            width=\"100\"\n          >\n            <template slot-scope=\"scope\">\n              <el-tag\n                :type=\"getStatusType(scope.row)\"\n                size=\"small\"\n              >\n                {{ getStatusText(scope.row) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n\n      <!-- 无查询结果提示 -->\n      <div v-else-if=\"querySubmitted\" class=\"no-results\">\n        <el-empty description=\"没有找到符合条件的预定记录\"></el-empty>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { formatDateTime, isReservationExpired } from '@/utils/dateUtils'\nimport equipmentApi from '@/api/equipment'\nimport reservationApi from '@/api/reservation'\n\nexport default {\n  name: 'HomePage',\n\n  data() {\n    return {\n      // 公共查询相关\n      loading: false,\n      querySubmitted: false,\n      reservations: [],\n      categories: [],\n      queryForm: {\n        category: '',\n        dateRange: null\n      }\n    }\n  },\n\n  created() {\n    // 获取设备类别\n    this.fetchCategories()\n\n    // 默认加载公开查询数据\n    this.handleQuery()\n  },\n\n  methods: {\n    goToEquipment() {\n      this.$router.push('/equipment')\n    },\n\n    goToQuery() {\n      this.$router.push('/reservation/query')\n    },\n\n    goToReservationManage() {\n      this.$router.push('/reservation/query')\n    },\n\n    // 获取设备类别\n    async fetchCategories() {\n      try {\n        const response = await equipmentApi.getCategories()\n        if (response.data && response.data.categories) {\n          // 处理不同的数据格式\n          if (Array.isArray(response.data.categories)) {\n            // 如果是数组格式\n            this.categories = response.data.categories.map(item => {\n              if (typeof item === 'string') return item\n              if (item && typeof item === 'object') {\n                return item.category || Object.keys(item)[0] || ''\n              }\n              return ''\n            }).filter(Boolean)\n          } else {\n            // 如果是对象格式\n            this.categories = Object.keys(response.data.categories)\n          }\n        } else {\n          console.error('Invalid categories data format:', response.data)\n          this.categories = []\n        }\n      } catch (error) {\n        console.error('Failed to fetch equipment categories:', error)\n        this.categories = []\n      }\n    },\n\n    // 处理公共查询\n    async handleQuery() {\n      this.loading = true\n      this.querySubmitted = true\n\n      try {\n        // 准备查询参数\n        const params = {\n          limit: 100  // 设置较大的限制以获取更多结果\n        }\n\n        // 添加类别过滤\n        if (this.queryForm.category) {\n          // 需要先获取该类别的所有设备ID\n          const equipmentResponse = await equipmentApi.getEquipments({\n            category: this.queryForm.category,\n            limit: 100\n          })\n\n          if (equipmentResponse.data && equipmentResponse.data.items && equipmentResponse.data.items.length > 0) {\n            // 如果有设备，使用类别参数进行查询\n            params.category = this.queryForm.category\n          }\n        }\n\n        // 添加日期范围过滤\n        if (this.queryForm.dateRange && this.queryForm.dateRange.length === 2) {\n          const [startDate, endDate] = this.queryForm.dateRange\n          params.from_date = startDate.toISOString()\n\n          // 将结束日期调整为当天的最后一秒\n          const endDateObj = new Date(endDate)\n          endDateObj.setHours(23, 59, 59, 999)\n          params.to_date = endDateObj.toISOString()\n        }\n\n        // 发送请求\n        const response = await reservationApi.getReservations(params)\n        this.reservations = response.data.items\n      } catch (error) {\n        console.error('Failed to query public reservations:', error)\n        this.$message.error(this.$t('error.queryFailed'))\n        this.reservations = []\n      } finally {\n        this.loading = false\n      }\n    },\n\n    // 重置查询表单\n    resetQuery() {\n      this.queryForm.category = ''\n      this.queryForm.dateRange = null\n      this.handleQuery()\n    },\n\n    // 格式化日期时间\n    formatDateTime(row, column, cellValue) {\n      return formatDateTime(cellValue)\n    },\n\n    // 获取状态类型\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger'\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning'\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return 'primary'\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // “已确认”状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success'\n    },\n\n    // 获取状态文本\n    getStatusText(reservation) {\n      // 如果预约已取消，显示“已取消”\n      if (reservation.status === 'cancelled') {\n        return '已取消'\n      }\n\n      // 如果预约已过期，显示“已过期”\n      if (isReservationExpired(reservation.end_datetime)) {\n        return '已过期'\n      }\n\n      // 如果预约正在进行中，显示“使用中”\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return '使用中'\n      }\n\n      // 如果预约已确认且未开始，显示“已确认”\n      return '已确认'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.home-page {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 15px 20px;\n}\n\n.banner {\n  text-align: center;\n  padding: 30px 20px;\n  background-color: #f0f9ff;\n  border-radius: 8px;\n  margin-bottom: 30px;\n}\n\n.banner h1 {\n  font-size: 2.2rem;\n  color: #303133;\n  margin-bottom: 15px;\n}\n\n.description {\n  font-size: 1.1rem;\n  color: #606266;\n  max-width: 800px;\n  margin: 0 auto 20px;\n}\n\n.banner-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n}\n\n.features {\n  margin-bottom: 30px;\n}\n\n.feature-card {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 30px;\n  text-align: center;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  height: 100%;\n  transition: transform 0.3s, box-shadow 0.3s;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.feature-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.2);\n}\n\n.feature-icon {\n  font-size: 3.5rem;\n  color: #409EFF;\n  margin-bottom: 20px;\n  background-color: #ecf5ff;\n  padding: 20px;\n  border-radius: 50%;\n  width: 80px;\n  height: 80px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.feature-card h3 {\n  font-size: 1.6rem;\n  color: #303133;\n  margin-bottom: 15px;\n  font-weight: 500;\n}\n\n.feature-card p {\n  color: #606266;\n  margin-bottom: 25px;\n  line-height: 1.6;\n  font-size: 1.1rem;\n}\n\n.public-query-section {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 25px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  margin-bottom: 30px;\n}\n\n.public-query-section h2 {\n  text-align: center;\n  margin-bottom: 25px;\n  color: #303133;\n  font-size: 1.8rem;\n}\n\n.query-form {\n  margin-bottom: 20px;\n}\n\n.query-results {\n  margin-top: 20px;\n}\n\n.no-results {\n  margin-top: 30px;\n  text-align: center;\n}\n\n@media (max-width: 768px) {\n  .banner {\n    padding: 20px;\n  }\n\n  .banner h1 {\n    font-size: 2rem;\n  }\n\n  .description {\n    font-size: 1rem;\n  }\n\n  .banner-buttons {\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n  }\n\n  .feature-card {\n    margin-bottom: 20px;\n  }\n\n  .public-query-section {\n    padding: 15px;\n  }\n\n  .public-query-section h2 {\n    font-size: 1.5rem;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}