{"ast":null,"code":"import { reservationApi, equipmentApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nimport axios from 'axios';\nexport default {\n  name: 'AdminDashboard',\n  data() {\n    return {\n      loading: false,\n      stats: {\n        totalEquipment: 0,\n        availableEquipment: 0,\n        totalReservation: 0,\n        activeReservation: 0,\n        inUseReservation: 0,\n        confirmedReservation: 0,\n        expiredReservation: 0,\n        cancelledReservation: 0\n      },\n      recentReservations: []\n    };\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true;\n      try {\n        // 使用统计API获取仪表盘数据\n        const dashboardResponse = await axios.get('/api/statistics/dashboard');\n        const dashboardData = dashboardResponse.data;\n        this.stats.totalEquipment = dashboardData.total_equipment;\n        this.stats.availableEquipment = dashboardData.available_equipment;\n        this.stats.totalReservation = dashboardData.total_reservation;\n        this.stats.activeReservation = dashboardData.active_reservation;\n\n        // 直接从数据库获取所有预约的详细状态统计\n        try {\n          // 直接查询数据库中所有预约的状态统计\n          const reservationStatsResponse = await axios.get('/api/reservations/statistics');\n          const reservationStats = reservationStatsResponse.data;\n\n          // 使用直接从数据库查询的数据\n          if (reservationStats.success) {\n            this.stats.inUseReservation = reservationStats.in_use || 0;\n            this.stats.confirmedReservation = reservationStats.confirmed || 0;\n            this.stats.expiredReservation = reservationStats.expired || 0;\n            this.stats.cancelledReservation = reservationStats.cancelled || 0;\n          } else {\n            // 如果专用API调用失败，回退到计算方法\n            await this.calculateReservationStats();\n          }\n        } catch (error) {\n          console.error('获取预约状态统计失败:', error);\n          // 接口不存在或者出错，回退到计算方法\n          await this.calculateReservationStats();\n        }\n\n        // 处理最近预定数据\n        this.recentReservations = dashboardData.recent_reservations.map(reservation => ({\n          id: reservation.id,\n          reservation_number: reservation.reservation_number,\n          // 添加预约序号字段\n          reservation_code: reservation.reservation_code,\n          equipment_id: reservation.equipment_id,\n          equipment_name: reservation.equipment_name,\n          user_name: reservation.user_name,\n          user_department: reservation.user_department || '',\n          user_contact: reservation.user_contact || '',\n          start_datetime: reservation.start_datetime,\n          end_datetime: reservation.end_datetime,\n          status: reservation.status,\n          created_at: reservation.created_at\n        }));\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n        this.$message.error(this.$t('common.error'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 新增方法：计算预约状态统计\n    async calculateReservationStats() {\n      try {\n        // 直接获取所有预约数据（如果数据量大可能需要分页）\n        const response = await axios.get('/api/reservations', {\n          params: {\n            limit: 1000,\n            sort_by: 'created_at',\n            sort_order: 'desc'\n          }\n        });\n        if (response.data && response.data.items) {\n          const now = new Date();\n          let inUseCount = 0;\n          let confirmedCount = 0;\n          let expiredCount = 0;\n          let cancelledCount = 0;\n\n          // 遍历所有预约并计算状态统计\n          response.data.items.forEach(reservation => {\n            const start = new Date(reservation.start_datetime);\n            const end = new Date(reservation.end_datetime);\n            if (reservation.status === 'cancelled') {\n              cancelledCount++;\n            } else if (now > end) {\n              expiredCount++;\n            } else if (now >= start && now <= end) {\n              inUseCount++;\n            } else if (now < start) {\n              confirmedCount++;\n            }\n          });\n\n          // 更新统计数据\n          this.stats.inUseReservation = inUseCount;\n          this.stats.confirmedReservation = confirmedCount;\n          this.stats.expiredReservation = expiredCount;\n          this.stats.cancelledReservation = cancelledCount;\n        }\n      } catch (error) {\n        console.error('计算预约状态统计失败:', error);\n        // 使用保底默认值\n        this.stats.inUseReservation = 0;\n        this.stats.confirmedReservation = 0;\n        this.stats.expiredReservation = 0;\n        this.stats.cancelledReservation = 0;\n      }\n    },\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return '';\n      const date = new Date(cellValue);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger';\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning';\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return 'primary';\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // \"已确认\"状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success';\n    },\n    getStatusText(reservation) {\n      // 如果预约已取消，显示\"已取消\"\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled');\n      }\n\n      // 如果预约已过期，显示\"已过期\"\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.expired');\n      }\n\n      // 如果预约正在进行中，显示\"使用中\"\n      const now = new Date();\n      const start = new Date(reservation.start_datetime);\n      const end = new Date(reservation.end_datetime);\n      if (now >= start && now <= end) {\n        return this.$t('reservation.inUse');\n      }\n\n      // 如果预约已确认且未开始，显示\"已确认\"\n      // \"已确认\"状态出现在预约被管理员批准，但还未开始使用的情况\n      return this.$t('reservation.confirmed');\n    },\n    viewReservation(reservation) {\n      // 计算当前预约的实际状态文本和类型\n      const statusText = this.getStatusText(reservation);\n      const statusType = this.getStatusType(reservation);\n      console.log('计算的状态信息:', {\n        statusText,\n        statusType,\n        dbStatus: reservation.status,\n        startTime: reservation.start_datetime,\n        endTime: reservation.end_datetime,\n        reservationNumber: reservation.reservation_number\n      });\n\n      // 构建URL，添加预约码、时间参数、预约序号和计算好的状态信息\n      const url = {\n        path: `/admin/reservation/${reservation.reservation_code}`,\n        query: {\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime,\n          displayStatus: statusText,\n          displayStatusType: statusType,\n          reservationNumber: reservation.reservation_number // 添加预约序号参数\n        }\n      };\n\n      // 每次查看预约时，都重新设置一个标记，表示需要显示预约序号通知\n      localStorage.setItem('show_reservation_number_notification', 'true');\n\n      // 清除之前的预约序号，确保每次都使用新的预约序号\n      localStorage.removeItem('current_reservation_number');\n\n      // 将预约序号保存到localStorage，以便在页面刷新后仍然可以使用\n      if (reservation.reservation_number) {\n        localStorage.setItem('current_reservation_number', reservation.reservation_number);\n        console.log('保存预约序号到localStorage:', reservation.reservation_number);\n\n        // 强制使用预约序号查询，而不是预约码\n        localStorage.setItem('force_use_reservation_number', 'true');\n      }\n      this.$router.push(url);\n    }\n  }\n};","map":{"version":3,"names":["reservationApi","equipmentApi","isReservationExpired","axios","name","data","loading","stats","totalEquipment","availableEquipment","totalReservation","activeReservation","inUseReservation","confirmedReservation","expiredReservation","cancelledReservation","recentReservations","created","fetchData","methods","dashboardResponse","get","dashboardData","total_equipment","available_equipment","total_reservation","active_reservation","reservationStatsResponse","reservationStats","success","in_use","confirmed","expired","cancelled","calculateReservationStats","error","console","recent_reservations","map","reservation","id","reservation_number","reservation_code","equipment_id","equipment_name","user_name","user_department","user_contact","start_datetime","end_datetime","status","created_at","$message","$t","response","params","limit","sort_by","sort_order","items","now","Date","inUseCount","confirmedCount","expiredCount","cancelledCount","forEach","start","end","formatDateTime","row","column","cellValue","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getStatusType","getStatusText","viewReservation","statusText","statusType","log","dbStatus","startTime","endTime","reservationNumber","url","path","query","displayStatus","displayStatusType","localStorage","setItem","removeItem","$router","push"],"sources":["src/views/admin/AdminDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"admin-dashboard\">\n    <div class=\"page-header\">\n      <h1 class=\"page-title\">{{ $t('admin.dashboard') }}</h1>\n    </div>\n\n    <!-- 统计卡片 -->\n    <el-row :gutter=\"20\" class=\"stats-row\">\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\">\n          <el-card shadow=\"hover\" class=\"stats-card primary\">\n            <div class=\"stats-content\">\n              <div class=\"stats-value\">{{ stats.totalEquipment }}</div>\n              <div class=\"stats-label\">{{ $t('admin.totalEquipment') }}</div>\n            </div>\n            <i class=\"el-icon-s-grid stats-icon\"></i>\n          </el-card>\n        </el-col>\n\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\">\n          <el-card shadow=\"hover\" class=\"stats-card success\">\n            <div class=\"stats-content\">\n              <div class=\"stats-value\">{{ stats.availableEquipment }}</div>\n              <div class=\"stats-label\">{{ $t('admin.availableEquipment') }}</div>\n            </div>\n            <i class=\"el-icon-s-cooperation stats-icon\"></i>\n          </el-card>\n        </el-col>\n\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\">\n          <el-card shadow=\"hover\" class=\"stats-card warning\">\n            <div class=\"stats-content\">\n              <div class=\"stats-value\">{{ stats.totalReservation }}</div>\n              <div class=\"stats-label\">{{ $t('admin.totalReservation') }}</div>\n            </div>\n            <i class=\"el-icon-s-order stats-icon\"></i>\n          </el-card>\n        </el-col>\n\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\">\n          <el-card shadow=\"hover\" class=\"stats-card danger\">\n            <div class=\"stats-content\">\n              <div class=\"stats-value\">{{ stats.activeReservation }}</div>\n              <div class=\"stats-label\">{{ $t('admin.activeReservation') }}</div>\n            </div>\n            <i class=\"el-icon-s-claim stats-icon\"></i>\n          </el-card>\n        </el-col>\n      </el-row>\n\n      <!-- 详细预约状态统计 -->\n      <el-row :gutter=\"20\" class=\"stats-row\">\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\">\n          <el-card shadow=\"hover\" class=\"stats-card primary-light\">\n            <div class=\"stats-content\">\n              <div class=\"stats-value\">{{ stats.inUseReservation || 0 }}</div>\n              <div class=\"stats-label\">{{ $t('reservation.inUse') }}</div>\n            </div>\n            <i class=\"el-icon-loading stats-icon\"></i>\n          </el-card>\n        </el-col>\n\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\">\n          <el-card shadow=\"hover\" class=\"stats-card success-light\">\n            <div class=\"stats-content\">\n              <div class=\"stats-value\">{{ stats.confirmedReservation || 0 }}</div>\n              <div class=\"stats-label\">{{ $t('reservation.confirmed') }}</div>\n            </div>\n            <i class=\"el-icon-check stats-icon\"></i>\n          </el-card>\n        </el-col>\n\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\">\n          <el-card shadow=\"hover\" class=\"stats-card warning-light\">\n            <div class=\"stats-content\">\n              <div class=\"stats-value\">{{ stats.expiredReservation || 0 }}</div>\n              <div class=\"stats-label\">{{ $t('reservation.expired') }}</div>\n            </div>\n            <i class=\"el-icon-time stats-icon\"></i>\n          </el-card>\n        </el-col>\n\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"6\">\n          <el-card shadow=\"hover\" class=\"stats-card danger-light\">\n            <div class=\"stats-content\">\n              <div class=\"stats-value\">{{ stats.cancelledReservation || 0 }}</div>\n              <div class=\"stats-label\">{{ $t('reservation.cancelled') }}</div>\n            </div>\n            <i class=\"el-icon-close stats-icon\"></i>\n          </el-card>\n        </el-col>\n      </el-row>\n\n      <!-- 最近预定 -->\n      <el-card shadow=\"hover\" class=\"recent-reservations\">\n        <div slot=\"header\" class=\"card-header\">\n          <div class=\"header-with-info\">\n            <span>{{ $t('admin.recentReservations') }}</span>\n            <el-tooltip content=\"显示最近创建的10条预约记录\" placement=\"top\">\n              <i class=\"el-icon-info info-icon\"></i>\n            </el-tooltip>\n          </div>\n          <el-button\n            type=\"text\"\n            @click=\"$router.push('/admin/reservation')\"\n          >\n            {{ $t('common.more') }} <i class=\"el-icon-arrow-right\"></i>\n          </el-button>\n        </div>\n\n        <div v-if=\"loading\" class=\"loading-container\">\n          <el-skeleton :rows=\"5\" animated />\n        </div>\n\n        <div v-else-if=\"recentReservations.length === 0\" class=\"empty-data\">\n          <el-empty :description=\"$t('common.noData')\"></el-empty>\n        </div>\n\n        <el-table\n          v-else\n          :data=\"recentReservations\"\n          style=\"width: 100%\"\n          :default-sort=\"{ prop: 'created_at', order: 'descending' }\"\n          header-align=\"center\"\n          cell-class-name=\"text-center\"\n          border\n          stripe\n        >\n          <!-- 添加预约序号列 -->\n          <el-table-column\n            prop=\"reservation_number\"\n            :label=\"$t('reservation.number')\"\n            min-width=\"180\"\n          >\n            <template slot-scope=\"scope\">\n              <span style=\"font-weight: bold;\">{{ scope.row.reservation_number || '-' }}</span>\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            prop=\"reservation_code\"\n            :label=\"$t('reservation.code')\"\n            min-width=\"100\"\n          >\n            <template slot-scope=\"scope\">\n              <span style=\"color: #F56C6C; font-weight: bold;\">{{ scope.row.reservation_code }}</span>\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            prop=\"equipment_name\"\n            :label=\"$t('reservation.equipmentName')\"\n            min-width=\"120\"\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"user_name\"\n            :label=\"$t('reservation.userName')\"\n            min-width=\"100\"\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"user_department\"\n            :label=\"$t('reservation.userDepartment')\"\n            min-width=\"100\"\n          >\n            <template slot-scope=\"scope\">\n              {{ scope.row.user_department || '-' }}\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            prop=\"user_contact\"\n            :label=\"$t('reservation.userContact')\"\n            min-width=\"120\"\n          >\n            <template slot-scope=\"scope\">\n              {{ scope.row.user_contact || '-' }}\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            prop=\"start_datetime\"\n            :label=\"$t('reservation.startTime')\"\n            min-width=\"150\"\n            :formatter=\"formatDateTime\"\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"end_datetime\"\n            :label=\"$t('reservation.endTime')\"\n            min-width=\"150\"\n            :formatter=\"formatDateTime\"\n          ></el-table-column>\n\n          <el-table-column\n            prop=\"status\"\n            :label=\"$t('reservation.status')\"\n            min-width=\"100\"\n          >\n            <template slot-scope=\"scope\">\n              <el-tag\n                :type=\"getStatusType(scope.row)\"\n                size=\"medium\"\n                style=\"font-weight: bold; padding: 0px 10px; font-size: 14px;\"\n              >\n                {{ getStatusText(scope.row) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n\n          <el-table-column\n            :label=\"$t('common.operation')\"\n            min-width=\"100\"\n          >\n            <template slot-scope=\"scope\">\n              <el-button\n                type=\"text\"\n                size=\"small\"\n                @click=\"viewReservation(scope.row)\"\n              >\n                {{ $t('admin.viewReservation') }}\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-card>\n  </div>\n</template>\n\n<script>\nimport { reservationApi, equipmentApi } from '@/api'\nimport { isReservationExpired } from '@/utils/date'\nimport axios from 'axios'\n\nexport default {\n  name: 'AdminDashboard',\n\n  data() {\n    return {\n      loading: false,\n      stats: {\n        totalEquipment: 0,\n        availableEquipment: 0,\n        totalReservation: 0,\n        activeReservation: 0,\n        inUseReservation: 0,\n        confirmedReservation: 0,\n        expiredReservation: 0,\n        cancelledReservation: 0\n      },\n      recentReservations: []\n    }\n  },\n\n  created() {\n    this.fetchData()\n  },\n\n  methods: {\n    async fetchData() {\n      this.loading = true\n\n      try {\n        // 使用统计API获取仪表盘数据\n        const dashboardResponse = await axios.get('/api/statistics/dashboard')\n        const dashboardData = dashboardResponse.data\n\n        this.stats.totalEquipment = dashboardData.total_equipment\n        this.stats.availableEquipment = dashboardData.available_equipment\n        this.stats.totalReservation = dashboardData.total_reservation\n        this.stats.activeReservation = dashboardData.active_reservation\n        \n        // 直接从数据库获取所有预约的详细状态统计\n        try {\n          // 直接查询数据库中所有预约的状态统计\n          const reservationStatsResponse = await axios.get('/api/reservations/statistics')\n          const reservationStats = reservationStatsResponse.data\n          \n          // 使用直接从数据库查询的数据\n          if (reservationStats.success) {\n            this.stats.inUseReservation = reservationStats.in_use || 0\n            this.stats.confirmedReservation = reservationStats.confirmed || 0\n            this.stats.expiredReservation = reservationStats.expired || 0\n            this.stats.cancelledReservation = reservationStats.cancelled || 0\n          } else {\n            // 如果专用API调用失败，回退到计算方法\n            await this.calculateReservationStats()\n          }\n        } catch (error) {\n          console.error('获取预约状态统计失败:', error)\n          // 接口不存在或者出错，回退到计算方法\n          await this.calculateReservationStats()\n        }\n\n        // 处理最近预定数据\n        this.recentReservations = dashboardData.recent_reservations.map(reservation => ({\n          id: reservation.id,\n          reservation_number: reservation.reservation_number, // 添加预约序号字段\n          reservation_code: reservation.reservation_code,\n          equipment_id: reservation.equipment_id,\n          equipment_name: reservation.equipment_name,\n          user_name: reservation.user_name,\n          user_department: reservation.user_department || '',\n          user_contact: reservation.user_contact || '',\n          start_datetime: reservation.start_datetime,\n          end_datetime: reservation.end_datetime,\n          status: reservation.status,\n          created_at: reservation.created_at\n        }))\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error)\n        this.$message.error(this.$t('common.error'))\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    // 新增方法：计算预约状态统计\n    async calculateReservationStats() {\n      try {\n        // 直接获取所有预约数据（如果数据量大可能需要分页）\n        const response = await axios.get('/api/reservations', { \n          params: { limit: 1000, sort_by: 'created_at', sort_order: 'desc' } \n        })\n        \n        if (response.data && response.data.items) {\n          const now = new Date()\n          let inUseCount = 0\n          let confirmedCount = 0\n          let expiredCount = 0\n          let cancelledCount = 0\n          \n          // 遍历所有预约并计算状态统计\n          response.data.items.forEach(reservation => {\n            const start = new Date(reservation.start_datetime)\n            const end = new Date(reservation.end_datetime)\n            \n            if (reservation.status === 'cancelled') {\n              cancelledCount++\n            } else if (now > end) {\n              expiredCount++\n            } else if (now >= start && now <= end) {\n              inUseCount++\n            } else if (now < start) {\n              confirmedCount++\n            }\n          })\n          \n          // 更新统计数据\n          this.stats.inUseReservation = inUseCount\n          this.stats.confirmedReservation = confirmedCount\n          this.stats.expiredReservation = expiredCount\n          this.stats.cancelledReservation = cancelledCount\n        }\n      } catch (error) {\n        console.error('计算预约状态统计失败:', error)\n        // 使用保底默认值\n        this.stats.inUseReservation = 0\n        this.stats.confirmedReservation = 0\n        this.stats.expiredReservation = 0\n        this.stats.cancelledReservation = 0\n      }\n    },\n\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return ''\n\n      const date = new Date(cellValue)\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    },\n\n    getStatusType(reservation) {\n      // 如果预约已取消，返回红色\n      if (reservation.status === 'cancelled') {\n        return 'danger'\n      }\n\n      // 如果预约已过期，返回橙色\n      if (isReservationExpired(reservation.end_datetime)) {\n        return 'warning'\n      }\n\n      // 如果预约正在进行中，返回蓝色\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return 'primary'\n      }\n\n      // 如果预约已确认且未开始，返回绿色\n      // \"已确认\"状态出现在预约被管理员批准，但还未开始使用的情况\n      return 'success'\n    },\n\n    getStatusText(reservation) {\n      // 如果预约已取消，显示\"已取消\"\n      if (reservation.status === 'cancelled') {\n        return this.$t('reservation.cancelled')\n      }\n\n      // 如果预约已过期，显示\"已过期\"\n      if (isReservationExpired(reservation.end_datetime)) {\n        return this.$t('reservation.expired')\n      }\n\n      // 如果预约正在进行中，显示\"使用中\"\n      const now = new Date()\n      const start = new Date(reservation.start_datetime)\n      const end = new Date(reservation.end_datetime)\n      if (now >= start && now <= end) {\n        return this.$t('reservation.inUse')\n      }\n\n      // 如果预约已确认且未开始，显示\"已确认\"\n      // \"已确认\"状态出现在预约被管理员批准，但还未开始使用的情况\n      return this.$t('reservation.confirmed')\n    },\n\n    viewReservation(reservation) {\n      // 计算当前预约的实际状态文本和类型\n      const statusText = this.getStatusText(reservation)\n      const statusType = this.getStatusType(reservation)\n      \n      console.log('计算的状态信息:', {\n        statusText,\n        statusType,\n        dbStatus: reservation.status,\n        startTime: reservation.start_datetime,\n        endTime: reservation.end_datetime,\n        reservationNumber: reservation.reservation_number\n      })\n      \n      // 构建URL，添加预约码、时间参数、预约序号和计算好的状态信息\n      const url = {\n        path: `/admin/reservation/${reservation.reservation_code}`,\n        query: {\n          startTime: reservation.start_datetime,\n          endTime: reservation.end_datetime,\n          displayStatus: statusText,\n          displayStatusType: statusType,\n          reservationNumber: reservation.reservation_number // 添加预约序号参数\n        }\n      }\n      \n      // 每次查看预约时，都重新设置一个标记，表示需要显示预约序号通知\n      localStorage.setItem('show_reservation_number_notification', 'true')\n      \n      // 清除之前的预约序号，确保每次都使用新的预约序号\n      localStorage.removeItem('current_reservation_number')\n      \n      // 将预约序号保存到localStorage，以便在页面刷新后仍然可以使用\n      if (reservation.reservation_number) {\n        localStorage.setItem('current_reservation_number', reservation.reservation_number)\n        console.log('保存预约序号到localStorage:', reservation.reservation_number)\n        \n        // 强制使用预约序号查询，而不是预约码\n        localStorage.setItem('force_use_reservation_number', 'true')\n      }\n      \n      this.$router.push(url)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.admin-dashboard {\n  width: 100%;\n}\n\n.page-header {\n  margin-bottom: 20px;\n  padding: 15px 20px;\n  background-color: #FFFFFF;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  font-weight: 500;\n  color: #303133;\n}\n\n.stats-row {\n  margin-bottom: 20px;\n}\n\n.stats-card {\n  height: 100px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  position: relative;\n  overflow: hidden;\n  margin-bottom: 20px;\n}\n\n/* 第二行的状态卡片可以稍微高一些，以确保图标完全显示 */\n.stats-row:nth-child(2) .stats-card {\n  height: 120px; /* 增加高度 */\n  padding: 20px 20px 25px 20px; /* 增加底部内边距 */\n}\n\n.stats-card.primary {\n  border-left: 4px solid #409EFF;\n}\n\n.stats-card.success {\n  border-left: 4px solid #67C23A;\n}\n\n.stats-card.warning {\n  border-left: 4px solid #E6A23C;\n}\n\n.stats-card.danger {\n  border-left: 4px solid #F56C6C;\n}\n\n/* 新增浅色样式卡片 */\n.stats-card.primary-light {\n  border-left: 4px solid #409EFF;\n  background-color: rgba(64, 158, 255, 0.1);\n}\n\n.stats-card.success-light {\n  border-left: 4px solid #67C23A;\n  background-color: rgba(103, 194, 58, 0.1);\n}\n\n.stats-card.warning-light {\n  border-left: 4px solid #E6A23C;\n  background-color: rgba(230, 162, 60, 0.1);\n}\n\n.stats-card.danger-light {\n  border-left: 4px solid #F56C6C;\n  background-color: rgba(245, 108, 108, 0.1);\n}\n\n.stats-content {\n  z-index: 1;\n}\n\n.stats-value {\n  font-size: 28px;\n  font-weight: bold;\n  color: #303133;\n  margin-bottom: 5px;\n}\n\n.stats-label {\n  font-size: 14px;\n  color: #909399;\n}\n\n.stats-icon {\n  position: absolute;\n  right: 20px;\n  font-size: 60px;\n  opacity: 0.1;\n  color: #000;\n}\n\n/* 修改图标样式，确保完整显示在卡片内 */\n.stats-card .stats-icon {\n  position: absolute;\n  right: 20px;\n  bottom: 15px; /* 调整从底部的距离 */\n  font-size: 50px; /* 调小图标尺寸 */\n  opacity: 0.2; /* 增加透明度，让背景色更明显 */\n  color: #000;\n  overflow: hidden; /* 确保溢出部分隐藏 */\n}\n\n.recent-reservations {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.header-with-info {\n  display: flex;\n  align-items: center;\n}\n\n.info-icon {\n  margin-left: 5px;\n  font-size: 14px;\n  color: #909399;\n  cursor: pointer;\n}\n\n.loading-container {\n  padding: 40px 0;\n}\n\n.empty-data {\n  padding: 40px 0;\n  text-align: center;\n}\n\n.text-center {\n  text-align: center !important;\n}\n\n@media (max-width: 768px) {\n  .stats-card {\n    height: 80px;\n  }\n\n  .stats-value {\n    font-size: 24px;\n  }\n\n  .stats-icon {\n    font-size: 40px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}