{"ast":null,"code":"import { reservationApi, recurringReservationApi } from '@/api';\nimport { isReservationExpired } from '@/utils/date';\nexport default {\n  name: 'ReservationQuery',\n  data() {\n    return {\n      // 个人预约管理相关\n      personalLoading: false,\n      showInstructions: true,\n      notFound: false,\n      personalQueryForm: {\n        reservationCode: '',\n        userContact: ''\n      },\n      personalQueryResults: [],\n      // 新增：存放多条预约结果\n\n      personalQueryRules: {\n        reservationCode: [{\n          required: false,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 20,\n          message: this.$t('common.lengthLimit', {\n            min: 6,\n            max: 20\n          }),\n          trigger: 'blur'\n        }],\n        userContact: [{\n          required: false,\n          message: this.$t('reservation.requiredField'),\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    // 如果URL中有预定码参数，自动填充\n    const code = this.$route.query.code;\n    if (code) {\n      this.personalQueryForm.reservationCode = code;\n      // 自动查询\n      this.$nextTick(() => {\n        this.handlePersonalQuery();\n      });\n    }\n  },\n  methods: {\n    // 处理个人预约查询\n    handlePersonalQuery() {\n      // 自定义验证：预定码和联系方式至少填写一项\n      if (!this.personalQueryForm.reservationCode && !this.personalQueryForm.userContact) {\n        this.$message.error(this.$t('reservation.atLeastOneField'));\n        return false;\n      }\n      this.$refs.personalQueryForm.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        this.personalLoading = true;\n        this.showInstructions = false;\n        this.notFound = false;\n        try {\n          // 如果有预定码，优先使用预定码查询\n          if (this.personalQueryForm.reservationCode) {\n            try {\n              // 先查普通预约\n              const response = await reservationApi.getReservationByCode(this.personalQueryForm.reservationCode);\n              if (response.data.success) {\n                // 导航到预定详情页\n                console.log('找到普通预约，跳转到预约详情页:', this.personalQueryForm.reservationCode);\n                this.$router.push(`/reservation/${this.personalQueryForm.reservationCode}`);\n                return;\n              } else {\n                // 如果普通预约查不到，再查循环预约\n                try {\n                  const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(this.personalQueryForm.reservationCode);\n                  if (recurringResponse.data.success) {\n                    // 导航到循环预约详情页\n                    console.log('找到循环预约，跳转到循环预约详情页:', recurringResponse.data.data.id);\n                    this.$router.push(`/recurring-reservation/${recurringResponse.data.data.id}`);\n                    return;\n                  }\n                } catch (recurringError) {\n                  console.error('Failed to query by reservation code (recurring):', recurringError);\n                }\n              }\n            } catch (error) {\n              // 普通预约接口报错时也查循环预约\n              try {\n                const recurringResponse = await recurringReservationApi.getRecurringReservationByCode(this.personalQueryForm.reservationCode);\n                if (recurringResponse.data.success) {\n                  // 导航到循环预约详情页\n                  console.log('找到循环预约，跳转到循环预约详情页:', recurringResponse.data.data.id);\n                  this.$router.push(`/recurring-reservation/${recurringResponse.data.data.id}`);\n                  return;\n                }\n              } catch (recurringError) {\n                console.error('Failed to query by reservation code (recurring):', recurringError);\n              }\n            }\n          }\n\n          // 如果没有预定码或预定码查询失败，尝试使用联系方式查询\n          if (this.personalQueryForm.userContact) {\n            try {\n              // 这里需要调用后端接口根据联系方式查询预定\n              const response = await reservationApi.getReservations({\n                user_contact: this.personalQueryForm.userContact,\n                limit: 50 // 查多一点\n              });\n              if (response.data.items && response.data.items.length > 0) {\n                if (response.data.items.length === 1) {\n                  // 只有一条，直接跳转\n                  const firstReservation = response.data.items[0];\n                  this.$router.push(`/reservation/${firstReservation.reservation_code}`);\n                  return;\n                } else {\n                  // 多条，展示表格\n                  this.personalQueryResults = response.data.items;\n                  return;\n                }\n              }\n            } catch (contactError) {\n              console.error('Failed to query by contact:', contactError);\n            }\n          }\n\n          // 如果两种方式都查询失败，显示未找到\n          this.notFound = true;\n        } catch (error) {\n          console.error('Failed to query personal reservation:', error);\n          this.notFound = true;\n        } finally {\n          this.personalLoading = false;\n        }\n      });\n    },\n    // 格式化日期时间\n    formatDateTime(row, column, cellValue) {\n      if (!cellValue) return '';\n      const date = new Date(cellValue);\n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;\n    },\n    // 获取状态类型\n    getStatusType(reservation) {\n      // 统一小写处理，兼容后端大小写不一致\n      const status = (reservation.status || '').toLowerCase();\n      console.log('status for switch:', reservation.status, '->', status);\n      switch (status) {\n        case 'cancelled':\n          return 'danger';\n        // 已取消 - 红色\n        case 'expired':\n          return 'warning';\n        // 已过期 - 橙色\n        case 'in_use':\n          return 'primary';\n        // 使用中 - 蓝色\n        case 'confirmed':\n          return 'success';\n        // 已确认 - 绿色\n        default:\n          return 'info';\n        // 其他状态 - 灰色\n      }\n    },\n    // 获取状态文本\n    getStatusText(reservation) {\n      // 统一小写处理，兼容后端大小写不一致\n      const status = (reservation.status || '').toLowerCase();\n      console.log('status for switch:', reservation.status, '->', status);\n      switch (status) {\n        case 'cancelled':\n          return this.$t('reservation.cancelled');\n        // 已取消\n        case 'expired':\n          return this.$t('reservation.expired');\n        // 已过期\n        case 'in_use':\n          return this.$t('reservation.inUse');\n        // 使用中\n        case 'confirmed':\n          return this.$t('reservation.confirmed');\n        // 已确认\n        default:\n          return reservation.status;\n        // 其他状态直接显示\n      }\n    },\n    // 重置表单\n    resetForm() {\n      this.$refs.personalQueryForm.resetFields();\n      this.notFound = false;\n      this.showInstructions = true;\n      this.personalQueryResults = []; // 重置结果\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}