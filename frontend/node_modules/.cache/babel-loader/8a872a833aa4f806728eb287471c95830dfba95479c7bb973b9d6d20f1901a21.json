{"ast":null,"code":"import axios from 'axios';\n\n/**\n * 预定API\n */\nexport default {\n  // 创建预定\n  createReservation(data) {\n    return axios.post('/api/reservation/', data);\n  },\n  // 获取预定列表（管理员）\n  getReservations(params) {\n    return axios.get('/api/reservation', {\n      params\n    });\n  },\n  // 获取预定详情\n  getReservation(code) {\n    // 添加时间戳参数，防止缓存\n    const timestamp = new Date().getTime();\n    return axios.get(`/api/reservation/${code}`, {\n      params: {\n        _t: timestamp\n      }\n    });\n  },\n  // 通过预定码获取预定详情\n  getReservationByCode(code, params = {}) {\n    // 添加时间戳参数，防止缓存\n    const timestamp = new Date().getTime();\n\n    // 处理预约序号参数，确保它是字符串格式\n    if (params.reservation_number) {\n      if (typeof params.reservation_number === 'object') {\n        console.log('预约序号参数是对象类型，尝试提取预约序号:', params.reservation_number);\n        if (params.reservation_number.reservation_number) {\n          params.reservation_number = params.reservation_number.reservation_number;\n          console.log(`从对象中提取预约序号: ${params.reservation_number}`);\n        } else {\n          console.warn('无法从对象中提取预约序号，尝试使用整个对象');\n          try {\n            // 尝试将对象转换为字符串\n            params.reservation_number = JSON.stringify(params.reservation_number);\n          } catch (e) {\n            console.error('序列化对象失败:', e);\n            delete params.reservation_number;\n          }\n        }\n      } else {\n        console.log(`预约序号参数是${typeof params.reservation_number}类型: ${params.reservation_number}`);\n      }\n    } else if (typeof params === 'string' || params.startsWith && params.startsWith('RN-')) {\n      // 如果params本身是字符串或者以RN-开头，则将其作为预约序号\n      console.log(`将参数作为预约序号处理: ${params}`);\n      params = {\n        reservation_number: params\n      };\n    } else if (typeof params === 'object' && params.reservation_number === undefined) {\n      // 检查params是否可能是预约序号对象\n      const keys = Object.keys(params);\n      if (keys.length === 1 && keys[0] === 'reservation_number') {\n        console.log(`从对象中提取预约序号: ${params.reservation_number}`);\n      }\n    }\n    params = {\n      ...params,\n      _t: timestamp\n    };\n\n    // 构建API基础URL\n    const url = `/api/reservation/code/${code}`;\n\n    // 记录API请求信息\n    console.log(`API请求: ${url}`, '参数:', params);\n    console.log('获取预约详情URL:', url);\n\n    // 发送请求并记录响应\n    return axios.get(url, {\n      params\n    }).then(response => {\n      console.log(`API响应: ${url}`, response.data);\n\n      // 调试状态信息\n      if (response.data && response.data.success && response.data.data) {\n        console.log(`预约状态: ${response.data.data.status}`);\n      }\n      return response;\n    }).catch(error => {\n      console.error(`API错误: ${url}`, error);\n      throw error;\n    });\n  },\n  // 更新预定\n  updateReservation(code, data) {\n    return axios.put(`/api/reservation/code/${code}`, data);\n  },\n  // 取消预定\n  cancelReservation(code, data = {}) {\n    // 添加时间戳参数，防止缓存\n    const timestamp = new Date().getTime();\n    if (!data._t) {\n      data._t = timestamp;\n    }\n\n    // 确保reservation_number参数被正确传递\n    if (data.reservation_number) {\n      console.log('取消预约 - 预约序号:', data.reservation_number);\n    } else {\n      console.warn('取消预约 - 未提供预约序号，将取消所有具有相同预约码的预约');\n    }\n    console.log('取消预约请求参数:', data);\n    console.log('取消预约请求URL:', `/api/reservation/cancel/code/${code}`);\n\n    // 使用JSON格式发送请求\n    return axios.post(`/api/reservation/cancel/code/${code}`, data);\n  },\n  // 获取设备在指定日期的可用性\n  getEquipmentAvailability(equipmentId, params) {\n    return axios.get(`/api/equipment/${equipmentId}/availability`, {\n      params\n    });\n  },\n  // 获取预定历史记录\n  getReservationHistory(code, reservationNumber = null) {\n    // 添加时间戳参数，防止缓存\n    const timestamp = new Date().getTime();\n    let url = `/api/reservation/code/${code}/history?_t=${timestamp}`;\n\n    // 如果提供了预约序号，添加到URL中\n    if (reservationNumber) {\n      url += `&reservation_number=${encodeURIComponent(reservationNumber)}`;\n    }\n    return axios.get(url);\n  },\n  // 导出预定数据\n  exportReservations(exportData) {\n    return axios.post('/api/reservation/export', exportData, {\n      responseType: 'blob' // 重要：设置响应类型为blob以处理文件下载\n    });\n  }\n};","map":{"version":3,"names":["axios","createReservation","data","post","getReservations","params","get","getReservation","code","timestamp","Date","getTime","_t","getReservationByCode","reservation_number","console","log","warn","JSON","stringify","e","error","startsWith","undefined","keys","Object","length","url","then","response","success","status","catch","updateReservation","put","cancelReservation","getEquipmentAvailability","equipmentId","getReservationHistory","reservationNumber","encodeURIComponent","exportReservations","exportData","responseType"],"sources":["D:/Equipment-Reservation-System-main/frontend/src/api/reservation.js"],"sourcesContent":["import axios from 'axios'\n\n/**\n * 预定API\n */\nexport default {\n  // 创建预定\n  createReservation(data) {\n    return axios.post('/api/reservation/', data)\n  },\n\n  // 获取预定列表（管理员）\n  getReservations(params) {\n    return axios.get('/api/reservation', { params })\n  },\n\n  // 获取预定详情\n  getReservation(code) {\n    // 添加时间戳参数，防止缓存\n    const timestamp = new Date().getTime()\n    return axios.get(`/api/reservation/${code}`, { params: { _t: timestamp } })\n  },\n\n  // 通过预定码获取预定详情\n  getReservationByCode(code, params = {}) {\n    // 添加时间戳参数，防止缓存\n    const timestamp = new Date().getTime()\n\n    // 处理预约序号参数，确保它是字符串格式\n    if (params.reservation_number) {\n      if (typeof params.reservation_number === 'object') {\n        console.log('预约序号参数是对象类型，尝试提取预约序号:', params.reservation_number);\n        if (params.reservation_number.reservation_number) {\n          params.reservation_number = params.reservation_number.reservation_number;\n          console.log(`从对象中提取预约序号: ${params.reservation_number}`);\n        } else {\n          console.warn('无法从对象中提取预约序号，尝试使用整个对象');\n          try {\n            // 尝试将对象转换为字符串\n            params.reservation_number = JSON.stringify(params.reservation_number);\n          } catch (e) {\n            console.error('序列化对象失败:', e);\n            delete params.reservation_number;\n          }\n        }\n      } else {\n        console.log(`预约序号参数是${typeof params.reservation_number}类型: ${params.reservation_number}`);\n      }\n    } else if (typeof params === 'string' || params.startsWith && params.startsWith('RN-')) {\n      // 如果params本身是字符串或者以RN-开头，则将其作为预约序号\n      console.log(`将参数作为预约序号处理: ${params}`);\n      params = { reservation_number: params };\n    } else if (typeof params === 'object' && params.reservation_number === undefined) {\n      // 检查params是否可能是预约序号对象\n      const keys = Object.keys(params);\n      if (keys.length === 1 && keys[0] === 'reservation_number') {\n        console.log(`从对象中提取预约序号: ${params.reservation_number}`);\n      }\n    }\n\n    params = { ...params, _t: timestamp }\n\n    // 构建API基础URL\n    const url = `/api/reservation/code/${code}`\n\n    // 记录API请求信息\n    console.log(`API请求: ${url}`, '参数:', params);\n    console.log('获取预约详情URL:', url);\n\n    // 发送请求并记录响应\n    return axios.get(url, { params })\n      .then(response => {\n        console.log(`API响应: ${url}`, response.data);\n\n        // 调试状态信息\n        if (response.data && response.data.success && response.data.data) {\n          console.log(`预约状态: ${response.data.data.status}`);\n        }\n\n        return response;\n      })\n      .catch(error => {\n        console.error(`API错误: ${url}`, error);\n        throw error;\n      });\n  },\n\n  // 更新预定\n  updateReservation(code, data) {\n    return axios.put(`/api/reservation/code/${code}`, data)\n  },\n\n  // 取消预定\n  cancelReservation(code, data = {}) {\n    // 添加时间戳参数，防止缓存\n    const timestamp = new Date().getTime()\n    if (!data._t) {\n      data._t = timestamp\n    }\n\n    // 确保reservation_number参数被正确传递\n    if (data.reservation_number) {\n      console.log('取消预约 - 预约序号:', data.reservation_number)\n    } else {\n      console.warn('取消预约 - 未提供预约序号，将取消所有具有相同预约码的预约')\n    }\n\n    console.log('取消预约请求参数:', data)\n    console.log('取消预约请求URL:', `/api/reservation/cancel/code/${code}`)\n\n    // 使用JSON格式发送请求\n    return axios.post(`/api/reservation/cancel/code/${code}`, data)\n  },\n\n\n  // 获取设备在指定日期的可用性\n  getEquipmentAvailability(equipmentId, params) {\n    return axios.get(`/api/equipment/${equipmentId}/availability`, { params })\n  },\n\n  // 获取预定历史记录\n  getReservationHistory(code, reservationNumber = null) {\n    // 添加时间戳参数，防止缓存\n    const timestamp = new Date().getTime()\n    let url = `/api/reservation/code/${code}/history?_t=${timestamp}`\n\n    // 如果提供了预约序号，添加到URL中\n    if (reservationNumber) {\n      url += `&reservation_number=${encodeURIComponent(reservationNumber)}`\n    }\n\n    return axios.get(url)\n  },\n\n  // 导出预定数据\n  exportReservations(exportData) {\n    return axios.post('/api/reservation/export', exportData, {\n      responseType: 'blob' // 重要：设置响应类型为blob以处理文件下载\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}